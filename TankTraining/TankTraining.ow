variables
{
	global:
		0: trainingMode
		1: modeTriggerPosList
		2: MODE_TRIGGER_RADIUS
		20: _i_
}

rule("Game Setup")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.trainingMode = -1;
		Global.MODE_TRIGGER_RADIUS = 2;
		Global.modeTriggerPosList = Array(Vector(87.580, 12.650, -70.250));
		For Global Variable(_i_, 0, Count Of(Global.modeTriggerPosList), 1);
			Create Effect(All Players(All Teams), Ring, Color(Yellow), Global.modeTriggerPosList[Global._i_], Global.MODE_TRIGGER_RADIUS,
				Visible To Position and Radius);
		End;
	}
}

rule("[TOOL] HUD")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Host Player == Event Player;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Create HUD Text(Event Player, Custom String("POS: {0}", Position Of(Event Player)), Null, Null, Left, 0, Color(White), Color(
			White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Custom String("DIR: {0}", Facing Direction Of(Event Player)), Null, Null, Left, 1, Color(White),
			Color(White), Color(White), Visible To and String, Default Visibility);
		For Global Variable(_i_, 0, Count Of(Global.modeTriggerPosList), 1);
			Create Effect(All Players(All Teams), Ring, Color(Yellow), Global.modeTriggerPosList[Global._i_], Global.MODE_TRIGGER_RADIUS,
				Visible To Position and Radius);
		End;
		Teleport(Event Player, Global.modeTriggerPosList[0]);
	}
}

rule("Player exits game mode")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Crouch)) == True;
		Global.trainingMode >= 0;
	}

	actions
	{
		Clear Status(Event Player, Rooted);
		Destroy All Dummy Bots;
		Global.trainingMode = -1;
		Set Primary Fire Enabled(Event Player, True);
		Set Secondary Fire Enabled(Event Player, True);
		Set Ability 1 Enabled(Event Player, True);
		Set Ability 2 Enabled(Event Player, True);
		Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("[Orisa] Player triggers game mode")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Hero Of(Event Player) == Hero(Orisa);
		Global.trainingMode < 0;
	}

	actions
	{
		For Global Variable(_i_, 0, Count Of(Global.modeTriggerPosList), 1);
			If(Distance Between(Position Of(Event Player), Global.modeTriggerPosList[Global._i_]) <= Global.MODE_TRIGGER_RADIUS);
				Teleport(Event Player, Global.modeTriggerPosList[Global._i_]);
				Set Status(Event Player, Null, Rooted, 9999);
				Destroy All Dummy Bots;
				Global.trainingMode = Global._i_;
			End;
		End;
	}
}

rule("[0] Orisa - Over-shield pulling")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.trainingMode == 0;
	}

	actions
	{
		Create Dummy Bot(Hero(Ana), Opposite Team Of(Team Of(Host Player)), -1, Vector(79.710, 12.710, -99.980), Vector(0.250, 0, 0.970));
		Create Dummy Bot(Hero(Orisa), Opposite Team Of(Team Of(Host Player)), -1, Vector(80.370, 12.680, -96.780), Vector(0.200, -0.510,
			0.830));
		Set Primary Fire Enabled(Host Player, True);
		Set Secondary Fire Enabled(Host Player, True);
		Set Ability 1 Enabled(Host Player, False);
		Set Ability 2 Enabled(Host Player, False);
		Set Ultimate Ability Enabled(Host Player, False);
	}
}

rule("[0] Orisa spawns shield")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Global.trainingMode == 0;
		Hero Of(Event Player) == Hero(Orisa);
		Is Dummy Bot(Event Player) == True;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Set Facing(Event Player, Vector(0.200, -0.510, 0.830), To World);
		Press Button(Event Player, Button(Ability 1));
		Press Button(Event Player, Button(Ability 2));
		Wait(5, Abort When False);
		Loop If Condition Is True;
	}
}