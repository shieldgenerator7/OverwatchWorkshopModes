variables
{
	global:
		0: trainingMode
		1: modeTriggerPosList
		2: MODE_TRIGGER_RADIUS
		3: START_POS
		4: modeNameList
		5: modeTextList
		20: _i_

	player:
		0: timer
		1: timerLast
		2: timerBest
		3: isTimerRunning
		4: streak
		5: streakLast
		6: streakBest
		7: blockedHook
}

subroutines
{
	0: startTimer
	1: stopTimer
	2: cancelTimer
	3: startStreak
	4: resetStreak
	5: cancelStreak
}

rule("Game Setup")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.trainingMode = -1;
		Global.MODE_TRIGGER_RADIUS = 2;
		Global.START_POS = Vector(85.890, 12.680, -77.020);
		Global.modeTriggerPosList = Array(Vector(87.580, 12.650, -70.250), Vector(82.310, 12.670, -69.290));
		Global.modeNameList = Array(Custom String("{0} Over-Shield Pulling (Halt)", Ability Icon String(Hero(Orisa), Button(
			Secondary Fire))), Custom String("{0} Hog Hook Blocking (Fortify)", Ability Icon String(Hero(Orisa), Button(Ability 1))));
		Global.modeTextList = Array(Custom String("KILL ANA!   {0} -> {1} -> {2}", Ability Icon String(Hero(Orisa), Button(
			Secondary Fire)), Ability Icon String(Hero(Orisa), Button(Primary Fire)), Hero Icon String(Hero(Ana))), Custom String(
			"BLOCK THE HOOK!   {0}{1} -> {2}", Hero Icon String(Hero(Roadhog)), Ability Icon String(Hero(Roadhog), Button(Ability 1)),
			Ability Icon String(Hero(Orisa), Button(Ability 1))));
		For Global Variable(_i_, 0, Count Of(Global.modeTriggerPosList), 1);
			Create Effect(All Players(All Teams), Ring, Color(Yellow), Global.modeTriggerPosList[Global._i_], Global.MODE_TRIGGER_RADIUS,
				Visible To);
			Create In-World Text(All Players(All Teams), Global.modeNameList[Global._i_], Global.modeTriggerPosList[Global._i_] + Up, 2,
				Clip Against Surfaces, Visible To, Color(Yellow), Default Visibility);
		End;
	}
}

rule("Player Setup")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Host Player == Event Player;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Global.START_POS);
		Event Player.timer = -1;
		Event Player.timerLast = -1;
		Event Player.timerBest = -1;
		Event Player.isTimerRunning = False;
		Create HUD Text(Filtered Array(Event Player, Current Array Element.timer >= 0), Custom String("Time: {0}", Event Player.timer),
			Null, Null, Left, 0, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Current Array Element.timerLast >= 0), Custom String("Last: {0}",
			Event Player.timerLast), Null, Null, Left, 1, Color(White), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Current Array Element.timerBest >= 0), Custom String("Best: {0}",
			Event Player.timerBest), Null, Null, Left, 2, Color(White), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Event Player.streak = -1;
		Event Player.streakLast = -1;
		Event Player.streakBest = -1;
		Create HUD Text(Filtered Array(Event Player, Current Array Element.streak >= 0), Custom String("Counters: {0}",
			Event Player.streak), Null, Null, Left, 0, Color(White), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Current Array Element.streakLast >= 0), Custom String("Last: {0}",
			Event Player.streakLast), Null, Null, Left, 1, Color(White), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Current Array Element.streakBest >= 0), Custom String("Best: {0}",
			Event Player.streakBest), Null, Null, Left, 2, Color(White), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Create HUD Text(Event Player, Null, Null, Custom String("Press INTERACT to enter a mode"), Right, 1, Color(White), Color(White),
			Color(White), Visible To, Default Visibility);
		Create HUD Text(Event Player, Null, Null, Custom String("Press CROUCH to exit the mode"), Right, 2, Color(White), Color(White),
			Color(White), Visible To, Default Visibility);
		Create HUD Text(Event Player, Null, Null, Global.modeTextList[Global.trainingMode], Right, 0, Color(White), Color(White), Color(
			White), Visible To and String, Default Visibility);
	}
}

disabled rule("[TOOL] HUD")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Host Player == Event Player;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Create HUD Text(Event Player, Custom String("POS: {0}", Position Of(Event Player)), Null, Null, Left, 10, Color(White), Color(
			White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Custom String("DIR: {0}", Facing Direction Of(Event Player)), Null, Null, Left, 11, Color(White),
			Color(White), Color(White), Visible To and String, Default Visibility);
	}
}

rule("Timer")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.isTimerRunning == True;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Event Player.timer += 0.100;
		Loop If Condition Is True;
	}
}

rule("Start Timer")
{
	event
	{
		Subroutine;
		startTimer;
	}

	actions
	{
		Host Player.timer = 0;
		Host Player.isTimerRunning = True;
	}
}

rule("Stop Timer")
{
	event
	{
		Subroutine;
		stopTimer;
	}

	actions
	{
		Host Player.isTimerRunning = False;
		Host Player.timerLast = Host Player.timer;
		If(Host Player.timer < Host Player.timerBest || Host Player.timerBest < 0);
			Host Player.timerBest = Host Player.timer;
			Big Message(Host Player, Custom String("NEW BEST! {0}", Host Player.timerBest));
		Else If(Host Player.timer <= Host Player.timerBest + 2);
			Big Message(Host Player, Custom String("SO CLOSE! (Within {0})", Host Player.timer - Host Player.timerBest));
		End;
		Host Player.timer = -1;
	}
}

rule("Cancel Timer")
{
	event
	{
		Subroutine;
		cancelTimer;
	}

	actions
	{
		Host Player.isTimerRunning = False;
		Host Player.timer = -1;
	}
}

rule("Start Streak")
{
	event
	{
		Subroutine;
		startStreak;
	}

	actions
	{
		Host Player.streak = 0;
	}
}

rule("Reset Streak")
{
	event
	{
		Subroutine;
		resetStreak;
	}

	actions
	{
		Host Player.streakLast = Host Player.streak;
		If(Host Player.streak > Host Player.streakBest || Host Player.streakBest < 0);
			Host Player.streakBest = Host Player.streak;
			Big Message(Host Player, Custom String("NEW RECORD! {0}", Host Player.streakBest));
		Else If(Host Player.streakBest - Host Player.streak <= 2);
			Big Message(Host Player, Custom String("SO CLOSE! Try again!"));
		End;
		Host Player.streak = 0;
	}
}

rule("Cancel Streak")
{
	event
	{
		Subroutine;
		cancelStreak;
	}

	actions
	{
		Host Player.streak = -1;
	}
}

rule("Player exits game mode")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Crouch)) == True;
		Global.trainingMode >= 0;
	}

	actions
	{
		Clear Status(Event Player, Rooted);
		Destroy All Dummy Bots;
		Global.trainingMode = -1;
		Set Primary Fire Enabled(Event Player, True);
		Set Secondary Fire Enabled(Event Player, True);
		Set Ability 1 Enabled(Event Player, True);
		Set Ability 2 Enabled(Event Player, True);
		Set Ultimate Ability Enabled(Event Player, True);
		Call Subroutine(cancelTimer);
		Call Subroutine(cancelStreak);
	}
}

rule("[Orisa] Player triggers game mode")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Hero Of(Event Player) == Hero(Orisa);
		Global.trainingMode < 0;
	}

	actions
	{
		For Global Variable(_i_, 0, Count Of(Global.modeTriggerPosList), 1);
			If(Distance Between(Position Of(Event Player), Global.modeTriggerPosList[Global._i_]) <= Global.MODE_TRIGGER_RADIUS);
				Teleport(Event Player, Global.START_POS);
				Set Facing(Event Player, Vector(-0.260, -0.090, -0.960), To World);
				Set Status(Event Player, Null, Rooted, 9999);
				Event Player.timer = -1;
				Event Player.timerLast = -1;
				Event Player.timerBest = -1;
				Event Player.isTimerRunning = False;
				Event Player.streak = -1;
				Event Player.streakLast = -1;
				Event Player.streakBest = -1;
				Destroy All Dummy Bots;
				Global.trainingMode = Global._i_;
				disabled Big Message(Event Player, Global.modeTextList[Global.trainingMode]);
			End;
		End;
	}
}

rule("[0] Orisa - Over-shield pulling")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.trainingMode == 0;
	}

	actions
	{
		Create Dummy Bot(Hero(Ana), Opposite Team Of(Team Of(Host Player)), 0, Vector(79.710, 12.710, -99.980), Vector(0.250, 0, 0.970));
		Create Dummy Bot(Hero(Orisa), Opposite Team Of(Team Of(Host Player)), -1, Vector(80.370, 12.680, -96.780), Vector(0.200, -0.510,
			0.830));
		Set Primary Fire Enabled(Host Player, True);
		Set Secondary Fire Enabled(Host Player, True);
		Set Ability 1 Enabled(Host Player, False);
		Set Ability 2 Enabled(Host Player, False);
		Set Ultimate Ability Enabled(Host Player, False);
		Big Message(Host Player, Global.modeTextList[0]);
	}
}

rule("[0] Orisa spawns shield")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Global.trainingMode == 0;
		Hero Of(Event Player) == Hero(Orisa);
		Is Dummy Bot(Event Player) == True;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Set Facing(Event Player, Vector(0.200, -0.510, 0.830), To World);
		Press Button(Event Player, Button(Ability 2));
		Wait(5, Abort When False);
		Loop If Condition Is True;
	}
}

rule("[0] Orisa uses Fortify")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Global.trainingMode == 0;
		Hero Of(Event Player) == Hero(Orisa);
		Is Dummy Bot(Event Player) == True;
		Is Using Ability 1(Event Player) == False;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 1));
	}
}

rule("[0] Ana bot dies")
{
	event
	{
		Player Died;
		All;
		Ana;
	}

	conditions
	{
		Global.trainingMode == 0;
		Hero Of(Event Player) == Hero(Ana);
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Destroy Dummy Bot(All Teams, 0);
		Create Dummy Bot(Hero(Ana), Opposite Team Of(Team Of(Host Player)), 0, Vector(79.710, 12.710, -99.980), Vector(0.250, 0, 0.970));
		Call Subroutine(stopTimer);
	}
}

rule("[0] Orisa Halt starts timer")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Global.trainingMode == 0;
		Hero Of(Event Player) == Hero(Orisa);
		Is Firing Secondary(Event Player) == True;
		Event Player.isTimerRunning == False;
	}

	actions
	{
		Call Subroutine(startTimer);
	}
}

rule("[1] Orisa - Hog Hook Countering")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.trainingMode == 1;
	}

	actions
	{
		Host Player.blockedHook = False;
		Create Dummy Bot(Hero(Roadhog), Opposite Team Of(Team Of(Host Player)), -1, Vector(80.370, 12.680, -96.780), Vector(0.200, -0.510,
			0.830));
		Set Primary Fire Enabled(Host Player, False);
		Set Secondary Fire Enabled(Host Player, False);
		Set Ability 1 Enabled(Host Player, True);
		Set Ability 2 Enabled(Host Player, False);
		Set Ultimate Ability Enabled(Host Player, False);
		Call Subroutine(startStreak);
		Big Message(Host Player, Global.modeTextList[1]);
	}
}

rule("[1] Roadhog uses Hook")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Global.trainingMode == 1;
		Hero Of(Event Player) == Hero(Roadhog);
		Is Dummy Bot(Event Player) == True;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Set Facing(Event Player, Direction Towards(Position Of(Event Player), Position Of(Host Player)), To World);
		Wait(Random Real(2, 7), Ignore Condition);
		Press Button(Event Player, Button(Ability 1));
		Loop If Condition Is True;
	}
}

rule("[1] Limit duration of Fortify")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Global.trainingMode == 1;
		Hero Of(Event Player) == Hero(Orisa);
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Kill(Event Player, Null);
		Resurrect(Event Player);
		If(Event Player.blockedHook == True);
			Event Player.streak += 1;
		Else;
			Call Subroutine(resetStreak);
			Small Message(Event Player, Custom String("Don't spam Fortify {0}", Ability Icon String(Hero(Orisa), Button(Ability 1))));
		End;
		Event Player.blockedHook = False;
	}
}

rule("[1] Orisa hooked - teleport back to start")
{
	event
	{
		Player Took Damage;
		All;
		Orisa;
	}

	conditions
	{
		Global.trainingMode == 1;
		Hero Of(Event Player) == Hero(Orisa);
		Event Damage < 100;
	}

	actions
	{
		Call Subroutine(resetStreak);
		Small Message(Event Player, Custom String("Use Fortify {0} to block Hook {1}", Ability Icon String(Hero(Orisa), Button(Ability 1)),
			Ability Icon String(Hero(Roadhog), Button(Ability 1))));
		Wait(1, Ignore Condition);
		Teleport(Event Player, Global.START_POS);
		Heal(Event Player, Null, 100);
	}
}

rule("[1] Orisa blocks hook")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Global.trainingMode == 1;
		Hero Of(Event Player) == Hero(Roadhog);
		Is Dummy Bot(Event Player) == True;
		Is Using Ability 1(Event Player) == True;
		Is Using Ability 1(Host Player) == True;
	}

	actions
	{
		Host Player.blockedHook = True;
	}
}