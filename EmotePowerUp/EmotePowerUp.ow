rule("Player spawn in, set up")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	actions
	{
		Set Player Variable(Event Player, P, 100);
		Create HUD Text(Event Player, String("{0}: {1}", String("Power", Null, Null, Null), Player Variable(Event Player, P), Null), Null,
			Null, Left, 0, White, White, White, Visible To and String);
	}
}

rule("Emote to Gain Power")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating Any Emote(Event Player) == True;
	}

	actions
	{
		Modify Player Variable(Event Player, P, Add, 1);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("If P != Q, adjust values for new power level")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, P) != Player Variable(Event Player, Q);
	}

	actions
	{
		Set Player Variable(Event Player, Q, Player Variable(Event Player, P));
		Set Damage Dealt(Event Player, Player Variable(Event Player, P));
		Set Move Speed(Event Player, Player Variable(Event Player, P));
		Set Healing Received(Event Player, Player Variable(Event Player, P));
	}
}

rule("Slowly lose power")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, P) > 100;
		Is Communicating Any Emote(Event Player) == False;
	}

	actions
	{
		Modify Player Variable(Event Player, P, Subtract, 1);
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Reset Power when die")
{
	event
	{
		Player Died;
		All;
		All;
	}

	actions
	{
		Set Player Variable(Event Player, P, 100);
	}
}

rule("Update max health at certain values")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Modulo(Player Variable(Event Player, P), 50) == 0;
	}

	actions
	{
		Set Max Health(Event Player, Player Variable(Event Player, P));
		Heal(Event Player, Event Player, 25);
	}
}