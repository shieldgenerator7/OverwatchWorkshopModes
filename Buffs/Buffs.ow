variables
{
	global:
		0: REIN_TRAIL_RADIUS
		1: REIN_TRAIL_DPS
		2: REIN_TRAIL_DURATION

	player:
		0: reinTrailPoints
		1: reinTrailEffectIds
		4: _reinTrailTargetList_
		5: _reinTrailLeft_
		6: _reinTrailTarget_
		7: _result_
		8: _i_
		9: _j_
}

subroutines
{
	0: ReinTrailContainsTarget
}

rule("Game Setup")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.REIN_TRAIL_RADIUS = 1;
		Global.REIN_TRAIL_DPS = 40;
		Global.REIN_TRAIL_DURATION = 10;
	}
}

rule("Player Spawn In")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	actions
	{
		Event Player.reinTrailPoints = Empty Array;
		Event Player.reinTrailEffectIds = Empty Array;
	}
}

rule("Rein Charge - Make Trail")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reinhardt);
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Modify Player Variable(Event Player, reinTrailPoints, Append To Array, Position Of(Event Player));
		Event Player._reinTrailLeft_ = Global.REIN_TRAIL_RADIUS * Direction From Angles(Horizontal Facing Angle Of(Event Player) + 90, 0);
		If(Count Of(Event Player.reinTrailPoints) > 1);
			Create Beam Effect(All Players(All Teams), Bad Beam, Event Player.reinTrailPoints[Count Of(Event Player.reinTrailPoints)
				- 2] + Event Player._reinTrailLeft_, Event Player.reinTrailPoints[Count Of(Event Player.reinTrailPoints)
				- 1] + Event Player._reinTrailLeft_, Red, Visible To);
			Modify Player Variable(Event Player, reinTrailEffectIds, Append To Array, Last Created Entity);
			Create Beam Effect(All Players(All Teams), Bad Beam, Event Player.reinTrailPoints[Count Of(Event Player.reinTrailPoints)
				- 2] - Event Player._reinTrailLeft_, Event Player.reinTrailPoints[Count Of(Event Player.reinTrailPoints)
				- 1] - Event Player._reinTrailLeft_, Red, Visible To);
			Modify Player Variable(Event Player, reinTrailEffectIds, Append To Array, Last Created Entity);
		End;
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
		Set Facing(Event Player, Facing Direction Of(Event Player) * -1, To World);
		Wait(Global.REIN_TRAIL_DURATION, Ignore Condition);
		While(Count Of(Event Player.reinTrailPoints) > 0);
			Destroy Effect(Event Player.reinTrailEffectIds[0]);
			Modify Player Variable(Event Player, reinTrailEffectIds, Remove From Array By Index, 0);
			Destroy Effect(Event Player.reinTrailEffectIds[0]);
			Modify Player Variable(Event Player, reinTrailEffectIds, Remove From Array By Index, 0);
			Modify Player Variable(Event Player, reinTrailPoints, Remove From Array By Index, 0);
			Wait(0.100, Ignore Condition);
		End;
		Event Player.reinTrailPoints = Empty Array;
		Event Player.reinTrailEffectIds = Empty Array;
		Event Player._reinTrailLeft_ = Vector(0, 0, 0);
	}
}

rule("Rein tracks damage opponents")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reinhardt);
		Count Of(Event Player.reinTrailPoints) > 0;
	}

	actions
	{
		Event Player._reinTrailTargetList_ = All Living Players(Opposite Team Of(Team Of(Event Player)));
		"For all enemy players,"
		For Player Variable(Event Player, _i_, 0, Count Of(Event Player._reinTrailTargetList_), 1);
			Event Player._reinTrailTarget_ = Event Player._reinTrailTargetList_[Event Player._i_];
			"If that player is on the trail,"
			Call Subroutine(ReinTrailContainsTarget);
			If(Event Player._result_ == True);
				"Damage that player"
				Damage(Event Player._reinTrailTarget_, Event Player, Global.REIN_TRAIL_DPS / 10);
			End;
		End;
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("ReinTrailContainsTarget(): _result_ = true when _reinTrailTarget_ is in range of one of the reinTrailPoints")
{
	event
	{
		Subroutine;
		ReinTrailContainsTarget;
	}

	actions
	{
		Event Player._result_ = False;
		For Player Variable(Event Player, _j_, 0, Count Of(Event Player.reinTrailPoints), 1);
			If(Distance Between(Position Of(Event Player._reinTrailTarget_), Event Player.reinTrailPoints[Event Player._j_])
				<= Global.REIN_TRAIL_RADIUS);
				Event Player._result_ = True;
				Break;
			End;
		End;
	}
}

rule("==TEST== Create dummy")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player == Host Player;
		Is Button Held(Event Player, Interact) == True;
	}

	actions
	{
		Create Dummy Bot(Random Value In Array(All Heroes), All Teams, -1, Position Of(Event Player), Facing Direction Of(Event Player));
	}
}