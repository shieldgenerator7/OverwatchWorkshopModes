variables
{
	global:
		0: SHIELDS_FROM_DAMAGE_PERCENT
		1: MSSNRY_PROTECT_DURATION

	player:
		0: shields
		1: shieldHUDID
		2: shieldTextID
		3: mssnryWatchTarget
		4: mssnryWatchTargetIndex
		5: mssnryDivineProtectionTime
		6: divineProtected
		7: mssnryWatchTargetPrev
		8: mssnryWatchTargetHUDID
}

rule("Game Setup")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Set Global Variable(SHIELDS_FROM_DAMAGE_PERCENT, 0.400);
		Set Global Variable(MSSNRY_PROTECT_DURATION, 2);
	}
}

rule("==TEST== SKIP SETUP ==")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is In Setup == True;
	}

	actions
	{
		Set Match Time(0);
	}
}

rule("==TEST== SKIP ASSEMBLY ==")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Assembling Heroes == True;
	}

	actions
	{
		Set Match Time(0);
	}
}

rule("==TEST==SPAWN BOTS==")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Host Player == True;
		Is Button Held(Event Player, Interact) == True;
	}

	actions
	{
		Create Dummy Bot(Random Value In Array(All Heroes), All Teams, -1.000, Nearest Walkable Position(Ray Cast Hit Position(
			Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 100)), All Players(
			All Teams), Event Player, True)), Multiply(Facing Direction Of(Event Player), -1.000));
	}
}

rule("==TEST==BOTS==PRIMARY FIRE")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Press Button(Event Player, Primary Fire);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Player Spawn - Initialize player vars")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Set Player Variable(Event Player, shields, 0);
	}
}

rule("Player dealt damage - grant shields")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	actions
	{
		Modify Player Variable(Event Player, shields, Add, Multiply(Event Damage, Global Variable(SHIELDS_FROM_DAMAGE_PERCENT)));
	}
}

rule("Shields gained (shields > 0)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, shields) > 0;
	}

	actions
	{
		Set Status(Event Player, Event Player, Unkillable, 9999);
		Create HUD Text(Event Player, Custom String("SHIELDS: {0}", Player Variable(Event Player, shields), Null, Null), Null, Null, Left,
			0, Blue, White, White, String, Default Visibility);
		Set Player Variable(Event Player, shieldHUDID, Last Text ID);
		Create In-World Text(All Players(All Teams), Custom String("Shields: {0}", Player Variable(Event Player, shields), Null, Null),
			Add(Multiply(Up, 0.100), Eye Position(Event Player)), 1, Clip Against Surfaces, Visible To Position and String, Blue,
			Default Visibility);
		Set Player Variable(Event Player, shieldTextID, Last Text ID);
	}
}

rule("Shields lost (shields <= 0)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, shields) <= 0;
	}

	actions
	{
		Set Player Variable(Event Player, shields, 0);
		Destroy HUD Text(Player Variable(Event Player, shieldHUDID));
		Destroy In-World Text(Player Variable(Event Player, shieldTextID));
		Clear Status(Event Player, Unkillable);
	}
}

rule("Player took damage (with shields)")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, shields) > 0;
	}

	actions
	{
		Skip If(Compare(Event Damage, <, Add(Health(Event Player), Player Variable(Event Player, shields))), 2);
		Clear Status(Event Player, Unkillable);
		Damage(Event Player, Attacker, Event Damage);
		Skip If(Compare(Player Variable(Event Player, shields), <, Event Damage), 1);
		Heal(Event Player, Null, Event Damage);
		Skip If(Compare(Player Variable(Event Player, shields), >=, Event Damage), 1);
		Heal(Event Player, Null, Subtract(Event Damage, Player Variable(Event Player, shields)));
		Modify Player Variable(Event Player, shields, Subtract, Event Damage);
	}
}

rule("Soldier Spawn In: Setup & Disallow abilities")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Soldier: 76);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Disallow Button(Event Player, Secondary Fire);
		Disallow Button(Event Player, Ability 1);
		Disallow Button(Event Player, Ability 2);
		Disallow Button(Event Player, Ultimate);
		Set Player Variable(Event Player, mssnryWatchTarget, Event Player);
		Create HUD Text(Event Player, Custom String("WATCH TARGET: {0} {1} - {2}", Hero Icon String(Hero Of(Player Variable(Event Player,
			mssnryWatchTarget))), Hero Of(Player Variable(Event Player, mssnryWatchTarget)), Player Variable(Event Player,
			mssnryWatchTarget)), Null, Null, Left, 0, White, White, White, String, Default Visibility);
		Set Player Variable(Event Player, mssnryWatchTargetHUDID, Last Text ID);
	}
}

rule("Soldier died - reallow abilities")
{
	event
	{
		Player Died;
		All;
		Soldier: 76;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Soldier: 76);
	}

	actions
	{
		Allow Button(Event Player, Primary Fire);
		Allow Button(Event Player, Secondary Fire);
		Allow Button(Event Player, Ability 1);
		Allow Button(Event Player, Ability 2);
		Allow Button(Event Player, Ultimate);
		Destroy HUD Text(Player Variable(Event Player, mssnryWatchTargetHUDID));
	}
}

rule("Missionary RMB - pray for teammate")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Soldier: 76);
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Secondary Fire) == True;
	}

	actions
	{
		disabled Set Player Variable(Event Player, mssnryWatchTarget, Event Player);
		Set Player Variable(Event Player, mssnryWatchTargetIndex, Index Of Array Value(All Players(Team Of(Event Player)), Player Variable(
			Event Player, mssnryWatchTarget)));
		Set Player Variable(Event Player, mssnryWatchTargetPrev, Player Variable(Event Player, mssnryWatchTarget));
		Start Camera(Event Player, Add(Eye Position(Player Variable(Event Player, mssnryWatchTarget)), Add(Multiply(Facing Direction Of(
			Player Variable(Event Player, mssnryWatchTarget)), -2.000), Up)), Add(Facing Direction Of(Player Variable(Event Player,
			mssnryWatchTarget)), Add(Eye Position(Player Variable(Event Player, mssnryWatchTarget)), Add(Multiply(Facing Direction Of(
			Player Variable(Event Player, mssnryWatchTarget)), -2.000), Up))), 50);
		Set Status(Event Player, Event Player, Knocked Down, 9999);
		Disallow Button(Event Player, Primary Fire);
	}
}

rule("Missionary Man LMB during RMB - switch teammate target")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Soldier: 76);
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Secondary Fire) == True;
		Is Button Held(Event Player, Primary Fire) == True;
	}

	actions
	{
		Modify Player Variable(Event Player, mssnryWatchTargetIndex, Add, 1);
		Skip If(Compare(Player Variable(Event Player, mssnryWatchTargetIndex), <, Count Of(All Players(Team Of(Event Player)))), 1);
		Set Player Variable(Event Player, mssnryWatchTargetIndex, 0);
		Set Player Variable(Event Player, mssnryWatchTarget, Value In Array(All Players(Team Of(Event Player)), Player Variable(
			Event Player, mssnryWatchTargetIndex)));
	}
}

rule("Missionary Man - stop praying")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Soldier: 76);
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Secondary Fire) == False;
	}

	actions
	{
		Clear Status(Event Player, Knocked Down);
		Stop Camera(Event Player);
		Allow Button(Event Player, Primary Fire);
	}
}

rule("Missionary - E - Divine Protection (BEGIN)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Soldier: 76);
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Secondary Fire) == True;
		Is Button Held(Event Player, Ability 2) == True;
	}

	actions
	{
		Set Player Variable(Player Variable(Event Player, mssnryWatchTarget), divineProtected, True);
		Set Status(Player Variable(Event Player, mssnryWatchTarget), Event Player, Unkillable, 9999);
		Stop Chasing Player Variable(Event Player, mssnryDivineProtectionTime);
		Set Player Variable(Event Player, mssnryDivineProtectionTime, Global Variable(MSSNRY_PROTECT_DURATION));
		Chase Player Variable At Rate(Event Player, mssnryDivineProtectionTime, 0, 1, None);
	}
}

rule("Missionary - E - Divine Protection (END)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Player Variable(Event Player, mssnryDivineProtectionTime) == 0;
	}

	actions
	{
		Set Player Variable(Player Variable(Event Player, mssnryWatchTarget), divineProtected, False);
		Stop Chasing Player Variable(Event Player, mssnryDivineProtectionTime);
		Clear Status(Player Variable(Event Player, mssnryWatchTarget), Unkillable);
	}
}

rule("Player divine protected")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, divineProtected) == True;
	}

	actions
	{
		Modify Player Variable(Event Player, shields, Add, Event Damage);
		Small Message(Players On Hero(Hero(Soldier: 76), Team Of(Event Player)), Custom String(
			"{0} DAMAGE CONVERTED: {1} {0} SHIELDS: {2} {0}", Hero Icon String(Hero Of(Event Player)), Event Damage, Player Variable(
			Event Player, shields)));
	}
}

rule("Missionry - Watch Target Switched (move effects to new target)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Soldier: 76);
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Secondary Fire) == True;
		Player Variable(Event Player, mssnryWatchTarget) != Player Variable(Event Player, mssnryWatchTargetPrev);
	}

	actions
	{
		Skip If(Compare(Player Variable(Event Player, mssnryDivineProtectionTime), >, 0), 4);
		Set Player Variable(Player Variable(Event Player, mssnryWatchTargetPrev), divineProtected, False);
		Clear Status(Player Variable(Event Player, mssnryWatchTargetPrev), Unkillable);
		Set Player Variable(Player Variable(Event Player, mssnryWatchTarget), divineProtected, True);
		Set Status(Player Variable(Event Player, mssnryWatchTarget), Event Player, Unkillable, 9999);
		Set Player Variable(Event Player, mssnryWatchTargetPrev, Player Variable(Event Player, mssnryWatchTarget));
	}
}