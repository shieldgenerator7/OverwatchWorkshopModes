variables
{
	global:
		0: BEAM_RANGE
		1: BEAM_VIEW_ANGLE
		2: BEAM_DAMAGE_PER_SECOND
		3: BEAM_TICK_RATE
		4: BEAM_KNOCK_BACK
		5: BEAM_DISARM_STACKS_PER_SECOND
		6: BEAM_DISARM_STACK_LIMIT
		7: BEAM_DISARM_STACK_DECAY_P_SECOND
		8: BEAM_DISARM_DURATION
		9: WIND_TUNNEL_FORCE
		10: WIND_TUNNEL_RADIUS
		11: WIND_TUNNEL_DURATION
		12: WIND_TUNNEL_COOLDOWN
		13: WIND_TUNNEL_TICK_RATE
		14: WIND_TUNNEL_MAX_VELOCITY
		17: TRASH_BAG_SPEED
		18: TRASH_BAG_DAMAGE_IMPACT
		19: TRASH_BAG_RADIUS
		20: TRASH_BAG_RADIUS_SPLASH
		21: TRASH_BAG_GRAVITY
		22: TRASH_BAG_TICK_RATE
		23: TRASH_BAG_DAMAGE_SPLASH

	player:
		0: fBeamEffectId
		1: eBeamEffectId
		2: eBeamTargetList
		3: beamType
		4: beamDisarmStacks
		5: beamDisarmTimeLeft
		6: windTunnelPosition
		7: fWindTunnelTargetList
		8: eWindTunnelTargetList
		9: windTunnelCooldown
		10: windTunnelCooldownTextId
		11: fWindTunnelEffectId
		12: eWindTunnelEffectId
		13: windTunnelTimeLeft
		14: trashBagCooldown
		15: trashBagPosition
		16: trashBagVelocity
		18: fTrashBagEffectId
		19: eTrashBagEffectId
		20: eTrashBagTargetList
		21: trashBagHitNormal
}

rule("Game Setup")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Set Global Variable(BEAM_RANGE, 15);
		Set Global Variable(BEAM_VIEW_ANGLE, 12);
		Set Global Variable(BEAM_DAMAGE_PER_SECOND, 90);
		Set Global Variable(BEAM_TICK_RATE, 50);
		Set Global Variable(BEAM_KNOCK_BACK, 4);
		Set Global Variable(BEAM_DISARM_STACKS_PER_SECOND, 50);
		Set Global Variable(BEAM_DISARM_STACK_LIMIT, 100);
		Set Global Variable(BEAM_DISARM_STACK_DECAY_P_SECOND, 25);
		Set Global Variable(BEAM_DISARM_DURATION, 5);
		Set Global Variable(WIND_TUNNEL_FORCE, 5);
		Set Global Variable(WIND_TUNNEL_RADIUS, 2);
		Set Global Variable(WIND_TUNNEL_DURATION, 10);
		Set Global Variable(WIND_TUNNEL_COOLDOWN, 5);
		Set Global Variable(WIND_TUNNEL_TICK_RATE, 20);
		Set Global Variable(WIND_TUNNEL_MAX_VELOCITY, 5);
		Set Global Variable(TRASH_BAG_SPEED, 40);
		Set Global Variable(TRASH_BAG_RADIUS, 0.500);
		Set Global Variable(TRASH_BAG_GRAVITY, 1);
		Set Global Variable(TRASH_BAG_TICK_RATE, 40);
		Set Global Variable(TRASH_BAG_DAMAGE_SPLASH, 50);
		Set Global Variable(TRASH_BAG_DAMAGE_IMPACT, 70);
		Set Global Variable(TRASH_BAG_RADIUS_SPLASH, 3);
	}
}

rule("TEST COMMAND Bring everyone to the objective")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player == Host Player;
		Is Button Held(Event Player, Interact) == True;
	}

	actions
	{
		Teleport(All Players(All Teams), Objective Position(1));
	}
}

rule("Garbage Man Setup")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junkrat;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Junkrat);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Set Primary Fire Enabled(Event Player, False);
		Set Secondary Fire Enabled(Event Player, False);
		Set Ability 1 Enabled(Event Player, False);
		Set Ability 2 Enabled(Event Player, False);
		Set Ultimate Ability Enabled(Event Player, False);
		Set Player Variable(Event Player, beamDisarmStacks, 0);
		Set Player Variable(Event Player, beamDisarmTimeLeft, 0);
		Set Player Variable(Event Player, windTunnelCooldown, 0);
		Destroy HUD Text(Player Variable(Event Player, windTunnelCooldownTextId));
		Create HUD Text(Event Player, Custom String("Wind Tunnel: READY", Null, Null, Null), Null, Null, Left, 0, White, White, White,
			String, Default Visibility);
		Set Player Variable(Event Player, windTunnelCooldownTextId, Last Text ID);
	}
}

rule("Non-Garbage Man Setup")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junkrat;
	}

	conditions
	{
		Hero Of(Event Player) != Hero(Junkrat);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Set Primary Fire Enabled(Event Player, True);
		Set Secondary Fire Enabled(Event Player, True);
		Set Ability 1 Enabled(Event Player, True);
		Set Ability 2 Enabled(Event Player, True);
		Set Ultimate Ability Enabled(Event Player, True);
		Set Player Variable(Event Player, beamDisarmStacks, 0);
		Set Player Variable(Event Player, beamDisarmTimeLeft, 0);
		Destroy HUD Text(Player Variable(Event Player, windTunnelCooldownTextId));
	}
}

rule("Garbage Man Primary Fire \"Leaf Blower\" (START)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junkrat;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Junkrat);
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Primary Fire) == True;
	}

	actions
	{
		Set Player Variable(Event Player, beamType, 1);
	}
}

rule("Garbage Man Secondary Fire \"Trash Vac\" (START)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junkrat;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Junkrat);
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Secondary Fire) == True;
	}

	actions
	{
		Set Player Variable(Event Player, beamType, 2);
	}
}

rule("Garbage Man Beam (START)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junkrat;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Junkrat);
		Is Alive(Event Player) == True;
		Player Variable(Event Player, beamType) > 0;
	}

	actions
	{
		Destroy Effect(Player Variable(Event Player, fBeamEffectId));
		Create Beam Effect(All Players(Team Of(Event Player)), Bad Beam, Event Player, Add(Position Of(Event Player), Multiply(
			Global Variable(BEAM_RANGE), Facing Direction Of(Event Player))), White, Position and Radius);
		Set Player Variable(Event Player, fBeamEffectId, Last Created Entity);
		Destroy Effect(Player Variable(Event Player, eBeamEffectId));
		Create Beam Effect(All Players(Opposite Team Of(Team Of(Event Player))), Bad Beam, Event Player, Add(Position Of(Event Player),
			Multiply(Global Variable(BEAM_RANGE), Facing Direction Of(Event Player))), Orange, Position and Radius);
		Set Player Variable(Event Player, eBeamEffectId, Last Created Entity);
	}
}

rule("Garbage Man Beam (EFFECT)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junkrat;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Junkrat);
		Is Alive(Event Player) == True;
		Player Variable(Event Player, beamType) > 0;
	}

	actions
	{
		Set Player Variable(Event Player, eBeamTargetList, Filtered Array(Players in View Angle(Event Player, Opposite Team Of(Team Of(
			Event Player)), Global Variable(BEAM_VIEW_ANGLE)), And(Is In Line of Sight(Eye Position(Event Player), Eye Position(
			Current Array Element), Enemy Barriers Block LOS), Compare(Distance Between(Position Of(Event Player), Position Of(
			Current Array Element)), <=, Global Variable(BEAM_RANGE)))));
		Damage(Player Variable(Event Player, eBeamTargetList), Event Player, Divide(Global Variable(BEAM_DAMAGE_PER_SECOND),
			Global Variable(BEAM_TICK_RATE)));
		Skip If(Compare(Player Variable(Event Player, beamType), !=, 1), 1);
		Apply Impulse(Player Variable(Event Player, eBeamTargetList), Facing Direction Of(Event Player), Global Variable(BEAM_KNOCK_BACK),
			To World, Incorporate Contrary Motion);
		Skip If(Compare(Player Variable(Event Player, beamType), !=, 2), 1);
		Apply Impulse(Player Variable(Event Player, eBeamTargetList), Multiply(Facing Direction Of(Event Player), -1.000), Global Variable(
			BEAM_KNOCK_BACK), To World, Incorporate Contrary Motion);
		Wait(Divide(1, Global Variable(BEAM_TICK_RATE)), Abort When False);
		Loop If Condition Is True;
	}
}

rule("Garbage Man Beam (END: OFF)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junkrat;
	}

	conditions
	{
		Is Button Held(Event Player, Primary Fire) == False;
		Is Button Held(Event Player, Secondary Fire) == False;
	}

	actions
	{
		Set Player Variable(Event Player, beamType, 0);
	}
}

rule("Garbage Man Beam (END: DEATH)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junkrat;
	}

	conditions
	{
		Is Alive(Event Player) == False;
	}

	actions
	{
		Set Player Variable(Event Player, beamType, 0);
	}
}

rule("Garbage Man Beam (END)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junkrat;
	}

	conditions
	{
		Player Variable(Event Player, beamType) == 0;
	}

	actions
	{
		Destroy Effect(Player Variable(Event Player, fBeamEffectId));
		Destroy Effect(Player Variable(Event Player, eBeamEffectId));
		Set Player Variable(Event Player, eBeamTargetList, Empty Array);
	}
}

rule("Garbage Man Ability 1 \"Wind Tunnel\" (START)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junkrat;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Junkrat);
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Ability 1) == True;
		Player Variable(Event Player, windTunnelCooldown) <= 0;
	}

	actions
	{
		Set Player Variable(Event Player, windTunnelPosition, Position Of(Event Player));
		Destroy Effect(Player Variable(Event Player, fWindTunnelEffectId));
		Create Effect(All Players(Team Of(Event Player)), Light Shaft, White, Player Variable(Event Player, windTunnelPosition),
			Global Variable(WIND_TUNNEL_RADIUS), None);
		Set Player Variable(Event Player, fWindTunnelEffectId, Last Created Entity);
		Destroy Effect(Player Variable(Event Player, eWindTunnelEffectId));
		Create Effect(All Players(Opposite Team Of(Team Of(Event Player))), Light Shaft, Orange, Player Variable(Event Player,
			windTunnelPosition), Global Variable(WIND_TUNNEL_RADIUS), None);
		Set Player Variable(Event Player, eWindTunnelEffectId, Last Created Entity);
		Stop Chasing Player Variable(Event Player, windTunnelTimeLeft);
		Set Player Variable(Event Player, windTunnelTimeLeft, Global Variable(WIND_TUNNEL_DURATION));
		Chase Player Variable At Rate(Event Player, windTunnelTimeLeft, 0, 1, None);
		Destroy HUD Text(Player Variable(Event Player, windTunnelCooldownTextId));
		Create HUD Text(Event Player, Custom String("Wind Tunnel: {0} sec", Player Variable(Event Player, windTunnelCooldown), Null, Null),
			Null, Null, Left, 0, White, White, White, String, Default Visibility);
		Set Player Variable(Event Player, windTunnelCooldownTextId, Last Text ID);
		Stop Chasing Player Variable(Event Player, windTunnelCooldown);
		Set Player Variable(Event Player, windTunnelCooldown, Global Variable(WIND_TUNNEL_COOLDOWN));
		Chase Player Variable At Rate(Event Player, windTunnelCooldown, 0, 1, None);
	}
}

rule("Garbage Man Ability 1 \"Wind Tunnel\" (EFFECT)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junkrat;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Junkrat);
		Player Variable(Event Player, windTunnelTimeLeft) > 0;
	}

	actions
	{
		Set Player Variable(Event Player, fWindTunnelTargetList, Filtered Array(All Players(Team Of(Event Player)), And(Is Button Held(
			Current Array Element, Jump), And(Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), 0,
			Z Component Of(Position Of(Current Array Element))), Vector(X Component Of(Player Variable(Event Player, windTunnelPosition)),
			0, Z Component Of(Player Variable(Event Player, windTunnelPosition)))), <=, Global Variable(WIND_TUNNEL_RADIUS)), Compare(
			Y Component Of(Velocity Of(Current Array Element)), <=, Global Variable(WIND_TUNNEL_MAX_VELOCITY))))));
		Apply Impulse(Player Variable(Event Player, fWindTunnelTargetList), Up, Global Variable(WIND_TUNNEL_FORCE), To World,
			Incorporate Contrary Motion);
		Set Player Variable(Event Player, eWindTunnelTargetList, Filtered Array(All Players(Opposite Team Of(Team Of(Event Player))), And(
			True, Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), 0, Z Component Of(Position Of(
			Current Array Element))), Vector(X Component Of(Player Variable(Event Player, windTunnelPosition)), 0, Z Component Of(
			Player Variable(Event Player, windTunnelPosition)))), <=, Global Variable(WIND_TUNNEL_RADIUS)))));
		Apply Impulse(Player Variable(Event Player, eWindTunnelTargetList), Down, Global Variable(WIND_TUNNEL_FORCE), To World,
			Incorporate Contrary Motion);
		Wait(Divide(1, Global Variable(WIND_TUNNEL_TICK_RATE)), Abort When False);
		Loop If Condition Is True;
	}
}

rule("Garbage Man Ability 1 \"Wind Tunnel\" (END)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junkrat;
	}

	conditions
	{
		Player Variable(Event Player, windTunnelTimeLeft) <= 0;
	}

	actions
	{
		Destroy Effect(Player Variable(Event Player, fWindTunnelEffectId));
		Destroy Effect(Player Variable(Event Player, eWindTunnelEffectId));
		Set Player Variable(Event Player, windTunnelTimeLeft, 0);
	}
}

rule("Garbage Man Ability 1 \"Wind Tunnel\" (READY)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junkrat;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Junkrat);
		Player Variable(Event Player, windTunnelCooldown) <= 0;
	}

	actions
	{
		Destroy HUD Text(Player Variable(Event Player, windTunnelCooldownTextId));
		Create HUD Text(Event Player, Custom String("Wind Tunnel: READY", Null, Null, Null), Null, Null, Left, 0, White, White, White,
			String, Default Visibility);
		Set Player Variable(Event Player, windTunnelCooldownTextId, Last Text ID);
	}
}

rule("Garbage Man Ability 2 \"Trash Bag\" (START)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junkrat;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Junkrat);
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Ability 2) == True;
		Player Variable(Event Player, trashBagCooldown) <= 0;
	}

	actions
	{
		Destroy Effect(Player Variable(Event Player, fTrashBagEffectId));
		Create Effect(All Players(Team Of(Event Player)), Sphere, Green, Player Variable(Event Player, trashBagPosition), Global Variable(
			TRASH_BAG_RADIUS), Position and Radius);
		Set Player Variable(Event Player, fTrashBagEffectId, Last Created Entity);
		Destroy Effect(Player Variable(Event Player, eTrashBagEffectId));
		Create Effect(All Players(Opposite Team Of(Team Of(Event Player))), Sphere, Yellow, Player Variable(Event Player,
			trashBagPosition), Global Variable(TRASH_BAG_RADIUS), Position and Radius);
		Set Player Variable(Event Player, eTrashBagEffectId, Last Created Entity);
		Stop Chasing Player Variable(Event Player, trashBagPosition);
		Stop Chasing Player Variable(Event Player, trashBagVelocity);
		Set Player Variable(Event Player, trashBagPosition, Eye Position(Event Player));
		Set Player Variable(Event Player, trashBagVelocity, Facing Direction Of(Event Player));
		disabled Chase Player Variable At Rate(Event Player, trashBagPosition, Add(Player Variable(Event Player, trashBagPosition), Player Variable(
			Event Player, trashBagVelocity)), Global Variable(TRASH_BAG_SPEED), Destination and Rate);
		Chase Player Variable At Rate(Event Player, trashBagVelocity, Down, Global Variable(TRASH_BAG_GRAVITY), None);
	}
}

rule("Garbage Man Ability 2 \"Trash Bag\" (ACTIVE)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junkrat;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Junkrat);
		Player Variable(Event Player, trashBagVelocity) != Vector(0, 0, 0);
	}

	actions
	{
		Modify Player Variable(Event Player, trashBagPosition, Add, Multiply(Player Variable(Event Player, trashBagVelocity), Divide(
			Global Variable(TRASH_BAG_SPEED), Global Variable(TRASH_BAG_TICK_RATE))));
		Skip If(Compare(Count Of(Player Variable(Event Player, eTrashBagTargetList)), >, 0), 1);
		Set Player Variable(Event Player, eTrashBagTargetList, Ray Cast Hit Player(Player Variable(Event Player, trashBagPosition), Add(
			Player Variable(Event Player, trashBagPosition), Multiply(Player Variable(Event Player, trashBagVelocity), Divide(
			Global Variable(TRASH_BAG_SPEED), Global Variable(TRASH_BAG_TICK_RATE)))), All Players(Opposite Team Of(Team Of(
			Event Player))), All Players(Team Of(Event Player)), True));
		Skip If(Compare(Count Of(Player Variable(Event Player, eTrashBagTargetList)), >, 0), 1);
		Set Player Variable(Event Player, trashBagHitNormal, Ray Cast Hit Normal(Player Variable(Event Player, trashBagPosition), Add(
			Player Variable(Event Player, trashBagPosition), Multiply(Player Variable(Event Player, trashBagVelocity), Divide(
			Global Variable(TRASH_BAG_SPEED), Global Variable(TRASH_BAG_TICK_RATE)))), Empty Array, All Players(All Teams), False));
		Wait(Divide(1, Global Variable(TRASH_BAG_TICK_RATE)), Abort When False);
		Loop If Condition Is True;
	}
}

rule("Garbage Man Ability 2 \"Trash Bag\" (HIT PLAYER)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junkrat;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Junkrat);
		Player Variable(Event Player, trashBagVelocity) != Vector(0, 0, 0);
		Count Of(Player Variable(Event Player, eTrashBagTargetList)) > 0;
	}

	actions
	{
		Damage(Player Variable(Event Player, eTrashBagTargetList), Event Player, Global Variable(TRASH_BAG_DAMAGE_IMPACT));
		Modify Player Variable(Event Player, trashBagVelocity, Multiply, Vector(-1.000, 0, -1.000));
		Set Player Variable(Event Player, eTrashBagTargetList, Empty Array);
	}
}

rule("Garbage Man Ability 2 \"Trash Bag\" (HIT WALL)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junkrat;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Junkrat);
		Player Variable(Event Player, trashBagVelocity) != Vector(0, 0, 0);
		Player Variable(Event Player, trashBagHitNormal) != Multiply(Player Variable(Event Player, trashBagVelocity), Divide(
			Global Variable(TRASH_BAG_SPEED), Global Variable(TRASH_BAG_TICK_RATE)));
		Player Variable(Event Player, trashBagHitNormal) != Vector(0, 0, 0);
		Player Variable(Event Player, trashBagHitNormal) != Vector(0, 1, 0);
		Count Of(Player Variable(Event Player, eTrashBagTargetList)) <= 0;
	}

	actions
	{
		Modify Player Variable(Event Player, trashBagVelocity, Multiply, Vector(-1.000, 0, -1.000));
		Set Player Variable(Event Player, trashBagHitNormal, Vector(0, 0, 0));
	}
}

rule("Garbage Man Ability 2 \"Trash Bag\" (HIT FLOOR)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junkrat;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Junkrat);
		Player Variable(Event Player, trashBagVelocity) != Vector(0, 0, 0);
		Player Variable(Event Player, trashBagHitNormal) != Multiply(Player Variable(Event Player, trashBagVelocity), Divide(
			Global Variable(TRASH_BAG_SPEED), Global Variable(TRASH_BAG_TICK_RATE)));
		Player Variable(Event Player, trashBagHitNormal) != Vector(0, 0, 0);
		Player Variable(Event Player, trashBagHitNormal) == Vector(0, 1, 0);
		Count Of(Player Variable(Event Player, eTrashBagTargetList)) <= 0;
	}

	actions
	{
		Set Player Variable(Event Player, trashBagHitNormal, Vector(0, 0, 0));
		Stop Chasing Player Variable(Event Player, trashBagVelocity);
		Set Player Variable(Event Player, trashBagVelocity, Vector(0, 0, 0));
		Set Player Variable(Event Player, eTrashBagTargetList, Players Within Radius(Player Variable(Event Player, trashBagPosition),
			Global Variable(TRASH_BAG_RADIUS_SPLASH), Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers));
		Damage(Player Variable(Event Player, eTrashBagTargetList), Event Player, Global Variable(TRASH_BAG_DAMAGE_SPLASH));
		Apply Impulse(Player Variable(Event Player, eTrashBagTargetList), Subtract(Position Of(Player Variable(Event Player,
			eTrashBagTargetList)), Player Variable(Event Player, trashBagPosition)), Global Variable(TRASH_BAG_DAMAGE_SPLASH), To World,
			Cancel Contrary Motion);
	}
}