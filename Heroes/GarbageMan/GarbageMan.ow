variables
{
	global:
		0: BEAM_RANGE
		1: BEAM_VIEW_ANGLE
		2: BEAM_DAMAGE_PER_SECOND
		3: BEAM_TICK_RATE

	player:
		0: fBeamEffectId
		1: eBeamEffectId
		2: eBeamTargetList
}

rule("Game Setup")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Set Global Variable(BEAM_RANGE, 15);
		Set Global Variable(BEAM_VIEW_ANGLE, 10);
		Set Global Variable(BEAM_DAMAGE_PER_SECOND, 90);
		Set Global Variable(BEAM_TICK_RATE, 20);
	}
}

rule("Garbage Man Setup")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junkrat;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Junkrat);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Set Primary Fire Enabled(Event Player, False);
		Set Secondary Fire Enabled(Event Player, False);
		Set Ability 1 Enabled(Event Player, False);
		Set Ability 2 Enabled(Event Player, False);
		Set Ultimate Ability Enabled(Event Player, False);
	}
}

rule("Non-Garbage Man Setup")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junkrat;
	}

	conditions
	{
		Hero Of(Event Player) != Hero(Junkrat);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Set Primary Fire Enabled(Event Player, True);
		Set Secondary Fire Enabled(Event Player, True);
		Set Ability 1 Enabled(Event Player, True);
		Set Ability 2 Enabled(Event Player, True);
		Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("Garbage Man Primary Fire (START)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junkrat;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Junkrat);
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Primary Fire) == True;
	}

	actions
	{
		Destroy Effect(Player Variable(Event Player, fBeamEffectId));
		Create Beam Effect(All Players(Team Of(Event Player)), Bad Beam, Event Player, Add(Position Of(Event Player), Multiply(
			Global Variable(BEAM_RANGE), Facing Direction Of(Event Player))), White, Position and Radius);
		Set Player Variable(Event Player, fBeamEffectId, Last Created Entity);
		Destroy Effect(Player Variable(Event Player, eBeamEffectId));
		Create Beam Effect(All Players(Opposite Team Of(Team Of(Event Player))), Bad Beam, Event Player, Add(Position Of(Event Player),
			Multiply(Global Variable(BEAM_RANGE), Facing Direction Of(Event Player))), Orange, Position and Radius);
		Set Player Variable(Event Player, eBeamEffectId, Last Created Entity);
	}
}

rule("Garbage Man Primary Fire (END)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junkrat;
	}

	conditions
	{
		Is Button Held(Event Player, Primary Fire) == False;
	}

	actions
	{
		Destroy Effect(Player Variable(Event Player, fBeamEffectId));
		Destroy Effect(Player Variable(Event Player, eBeamEffectId));
		Set Player Variable(Event Player, eBeamTargetList, Empty Array);
	}
}

rule("Garbage Man Primary Fire (EFFECT)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junkrat;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Junkrat);
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Primary Fire) == True;
	}

	actions
	{
		Set Player Variable(Event Player, eBeamTargetList, Filtered Array(Players in View Angle(Event Player, Opposite Team Of(Team Of(
			Event Player)), Global Variable(BEAM_VIEW_ANGLE)), And(Is In Line of Sight(Eye Position(Event Player), Eye Position(
			Current Array Element), Enemy Barriers Block LOS), Compare(Distance Between(Position Of(Event Player), Position Of(
			Current Array Element)), <=, Global Variable(BEAM_RANGE)))));
		Damage(Player Variable(Event Player, eBeamTargetList), Event Player, Divide(Global Variable(BEAM_DAMAGE_PER_SECOND),
			Global Variable(BEAM_TICK_RATE)));
		Apply Impulse(Player Variable(Event Player, eBeamTargetList), Facing Direction Of(Event Player), 3, To World,
			Incorporate Contrary Motion);
		Wait(Divide(1, Global Variable(BEAM_TICK_RATE)), Abort When False);
		Loop If Condition Is True;
	}
}

rule("TEST COMMAND Bring everyone to the objective")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player == Host Player;
		Is Button Held(Event Player, Interact) == True;
	}

	actions
	{
		Teleport(All Players(All Teams), Objective Position(1));
	}
}