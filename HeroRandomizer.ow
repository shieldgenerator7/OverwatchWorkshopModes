variables
{
	player:
		0: heroMain
		1: hero1
		2: hero2
		3: hero3
		4: ultCharge
		5: currentHero
		6: abilityPressed
}

rule("Game Setup")
{
	event
	{
		Ongoing - Global;
	}
}

rule("==TEST==SPAWN BOTS==")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Host Player == True;
		Is Button Held(Event Player, Interact) == True;
	}

	actions
	{
		Create Dummy Bot(Random Value In Array(All Heroes), All Teams, -1.000, Nearest Walkable Position(Ray Cast Hit Position(
			Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 100)), All Players(
			All Teams), Event Player, True)), Multiply(Facing Direction Of(Event Player), -1.000));
	}
}

rule("Player Spawn - Show Hero HUDs")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	actions
	{
		Create HUD Text(Event Player, Custom String("SHIFT: {0} {1}", Hero Icon String(Player Variable(Event Player, hero1)),
			Player Variable(Event Player, hero1), Null), Null, Null, Left, 0, White, White, White, String, Default Visibility);
		Create HUD Text(Event Player, Custom String("E: {0} {1}", Hero Icon String(Player Variable(Event Player, hero2)), Player Variable(
			Event Player, hero2), Null), Null, Null, Left, 0, White, White, White, String, Default Visibility);
		Create HUD Text(Event Player, Custom String("Q: {0} {1}", Hero Icon String(Player Variable(Event Player, hero3)), Player Variable(
			Event Player, hero3), Null), Null, Null, Left, 0, White, White, White, String, Default Visibility);
	}
}

rule("Player Spawns - Randomize heroes")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Set Player Variable(Event Player, heroMain, Random Value In Array(All Heroes));
		Set Player Variable(Event Player, hero1, Random Value In Array(All Heroes));
		Set Player Variable(Event Player, hero2, Random Value In Array(All Heroes));
		Set Player Variable(Event Player, hero3, Random Value In Array(All Heroes));
		Start Forcing Player To Be Hero(Event Player, Player Variable(Event Player, hero1));
		Disallow Button(Event Player, Ability 1);
		Disallow Button(Event Player, Ability 2);
		Disallow Button(Event Player, Ultimate);
	}
}

rule("Player SHIFT - Change to hero 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Ability 1) == True;
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Set Player Variable(Event Player, currentHero, Player Variable(Event Player, hero1));
	}
}

rule("Player E - Change to hero 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Ability 2) == True;
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Set Player Variable(Event Player, currentHero, Player Variable(Event Player, hero2));
	}
}

rule("Player Q - Change to hero 3")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Ultimate) == True;
		Ultimate Charge Percent(Event Player) == 100;
	}

	actions
	{
		Set Player Variable(Event Player, currentHero, Player Variable(Event Player, hero3));
	}
}

rule("Player switch to hero")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Hero Of(Event Player) != Player Variable(Event Player, currentHero);
	}

	actions
	{
		Set Player Variable(Event Player, abilityPressed, False);
		Set Player Variable(Event Player, ultCharge, Ultimate Charge Percent(Event Player));
		Start Forcing Player To Be Hero(Event Player, Player Variable(Event Player, currentHero));
		Wait(0.100, Ignore Condition);
		Set Ultimate Charge(Event Player, Player Variable(Event Player, ultCharge));
		Allow Button(Event Player, Ability 1);
		Allow Button(Event Player, Ability 2);
		Allow Button(Event Player, Ultimate);
		Wait(0.900, Ignore Condition);
		Wait(0.250, Ignore Condition);
		Skip If(Compare(Player Variable(Event Player, currentHero), ==, Player Variable(Event Player, hero1)), 1);
		Disallow Button(Event Player, Ability 1);
		Skip If(Compare(Player Variable(Event Player, currentHero), ==, Player Variable(Event Player, hero2)), 1);
		Disallow Button(Event Player, Ability 2);
		Skip If(Compare(Player Variable(Event Player, currentHero), ==, Player Variable(Event Player, hero3)), 1);
		Disallow Button(Event Player, Ultimate);
		Loop If Condition Is True;
	}
}

rule("Press Ability 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Player Variable(Event Player, hero1);
		Is Using Ability 1(Event Player) != True;
		Player Variable(Event Player, abilityPressed) == False;
	}

	actions
	{
		Press Button(Event Player, Ability 1);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
		Set Player Variable(Event Player, abilityPressed, True);
	}
}

rule("Press Ability 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Player Variable(Event Player, hero2);
		Is Using Ability 2(Event Player) != True;
		Player Variable(Event Player, abilityPressed) == False;
	}

	actions
	{
		Press Button(Event Player, Ability 2);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
		Set Player Variable(Event Player, abilityPressed, True);
	}
}

rule("Press Ultimate")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Player Variable(Event Player, hero3);
		Is Using Ultimate(Event Player) != True;
		Player Variable(Event Player, abilityPressed) == False;
	}

	actions
	{
		Press Button(Event Player, Ultimate);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
		Set Player Variable(Event Player, abilityPressed, True);
	}
}