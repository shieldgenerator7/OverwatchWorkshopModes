
//
// Evolution
//
// Players mate with other players and lay eggs that become respawn points.
// Player stats change and evolve depending on who their parents were and random variations.
//
// == Stats that change ==
// Max Health (50 - 200)
// Damage Dealt
// Damage Received
// Healing Dealt
// Healing Received
// Heal Per Second (Regen)
// Movement Speed
// Jump Gravity
//
// == Player Variables Used ==
// H - Self Heals Per Second
// R - Ring Effect ID

rule("Player spawn, give them random stats")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	actions
	{
		Set Max Health(Event Player, Multiply(100, Multiply(Random Real(0.500, 1), Random Real(1, 2))));
		Set Damage Dealt(Event Player, Multiply(100, Multiply(Random Real(0.500, 1), Random Real(1, 2))));
		Set Damage Received(Event Player, Multiply(100, Multiply(Random Real(0.500, 1), Random Real(1, 2))));
		Set Healing Dealt(Event Player, Multiply(100, Multiply(Random Real(0.500, 1), Random Real(1, 2))));
		Set Healing Received(Event Player, Multiply(100, Multiply(Random Real(0.500, 1), Random Real(1, 2))));
		Set Player Variable(Event Player, H, Random Integer(1, 10));
		Set Move Speed(Event Player, Multiply(100, Multiply(Random Real(0.500, 1), Random Real(1, 2))));
		Set Gravity(Event Player, Multiply(100, Multiply(Random Real(0.500, 1), Random Real(1, 2))));
		Start Heal Over Time(Event Player, Event Player, 9999, Player Variable(Event Player, H));
	}
}

rule("Player emote to call a mate")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating Any Emote(Event Player) == True;
	}

	actions
	{
		Destroy Effect(Player Variable(Event Player, R));
		Create Effect(All Players(Team Of(Event Player)), Ring, Yellow, Event Player, 5, Visible To Position and Radius);
		Set Player Variable(Event Player, R, Last Created Entity);
	}
}

rule("Player stop emoting")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating Any Emote(Event Player) == False;
	}

	actions
	{
		Destroy Effect(Player Variable(Event Player, R));
	}
}

rule("Player emote next to another emoting player to mate")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating Any Emote(Event Player) == True;
		Is True For Any(Players Within Radius(Position Of(Event Player), 5, Team Of(Event Player), Surfaces And Enemy Barriers), And(
			Compare(Current Array Element, !=, Event Player), Compare(Is Communicating Any Emote(Current Array Element), ==, True)))
			== True;
	}

	actions
	{
		Create Effect(All Players(All Teams), Sphere, Yellow, Event Player, 2, Visible To Position and Radius);
	}
}