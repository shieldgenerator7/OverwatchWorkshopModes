variables
{
	global:
		0: MAP_RADIUS
		1: lootPosList
		2: i
		3: LOOT_COUNT
		4: lootEffectIdList
		5: LOOT_RADIUS
		6: lootHeroList
		7: ringPos
		8: ringRadius
		9: newRingPos
		10: newRingRadius
		11: RING_MOVE_DURATION
		12: RING_PAUSE_DURATION
		13: ringEffectId
		14: newRingEffectId
		15: ringPauseTime

	player:
		0: lootSelectIndex
		1: i
		2: lootPreviewHUDId
}

subroutines
{
	0: ResetRing
	1: GenerateNextRing
}

rule("Game Setup")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.MAP_RADIUS = 380;
		Global.LOOT_COUNT = 10;
		Global.LOOT_RADIUS = 1;
		Global.ringPos = 1;
		Global.ringRadius = 1;
		Global.newRingPos = 1;
		Global.newRingRadius = 1;
		Global.RING_MOVE_DURATION = 10;
		Global.RING_PAUSE_DURATION = 5;
		Global.lootPosList = Empty Array;
		Global.lootEffectIdList = Empty Array;
		Global.lootHeroList = Empty Array;
		For Global Variable(i, 0, Global.LOOT_COUNT, 1);
			Modify Global Variable(lootPosList, Append To Array, Vector(Random Integer(Global.MAP_RADIUS * -1, Global.MAP_RADIUS), 0,
				Random Integer(Global.MAP_RADIUS * -1, Global.MAP_RADIUS)));
			Create Effect(All Players(All Teams), Sphere, Yellow, Global.lootPosList[Global.i], Global.LOOT_RADIUS, Visible To);
			Modify Global Variable(lootEffectIdList, Append To Array, Last Created Entity);
			Modify Global Variable(lootHeroList, Append To Array, Random Value In Array(All Heroes));
		End;
		Call Subroutine(ResetRing);
	}
}

rule("Reset Ring")
{
	event
	{
		Subroutine;
		ResetRing;
	}

	actions
	{
		Destroy Effect(Global.ringEffectId);
		Destroy Effect(Global.newRingEffectId);
		Global.ringPos = Vector(0, 0, 0);
		Global.ringRadius = Global.MAP_RADIUS;
		Call Subroutine(GenerateNextRing);
		Create Effect(All Players(All Teams), Light Shaft, Red, Global.ringPos, Global.ringRadius, Visible To Position and Radius);
		Global.ringEffectId = Last Created Entity;
		Create Effect(All Players(All Teams), Light Shaft, White, Global.newRingPos, Global.newRingRadius, Visible To Position and Radius);
		Global.newRingEffectId = Last Created Entity;
		Global.ringPauseTime = Global.RING_PAUSE_DURATION;
	}
}

rule("Generate Next RIng")
{
	event
	{
		Subroutine;
		GenerateNextRing;
	}

	actions
	{
		Global.newRingRadius = Global.ringRadius * 0.700;
		Global.newRingPos = Vector(Random Integer((Global.ringRadius - Global.newRingRadius) * -1,
			Global.ringRadius - Global.newRingRadius), 0, Random Integer((Global.ringRadius - Global.newRingRadius) * -1,
			Global.ringRadius - Global.newRingRadius)) + Global.ringPos;
	}
}

rule("Skip Assembly")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Assembling Heroes == True;
	}

	actions
	{
		Set Match Time(0);
	}
}

rule("Player Spawn in")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(Random Integer(Global.MAP_RADIUS * -1, Global.MAP_RADIUS), 0, Random Integer(Global.MAP_RADIUS * -1,
			Global.MAP_RADIUS)));
		Start Forcing Player To Be Hero(Event Player, Hero(Mercy));
	}
}

rule("==TEST== Player Reset")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Interact) == True;
		Is Button Held(Event Player, Crouch) == True;
	}

	actions
	{
		Kill(Event Player, Event Player);
	}
}

rule("==TEST== Player Join Match, get POS HUD")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	actions
	{
		Create HUD Text(Event Player, Custom String("POS: {0}", Position Of(Event Player)), Null, Null, Left, 0, White, White, White,
			Visible To and String, Default Visibility);
		disabled Start Forcing Player To Be Hero(Event Player, Hero(Mercy));
	}
}

rule("Player Collects Loot")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Interact) == True;
	}

	actions
	{
		Event Player.lootSelectIndex = -1;
		For Player Variable(Event Player, i, 0, Count Of(Global.lootPosList), 1);
			If(Distance Between(Position Of(Event Player), Global.lootPosList[Event Player.i]) <= Global.LOOT_RADIUS);
				Event Player.lootSelectIndex = Event Player.i;
				Break;
			End;
		End;
		Abort If(Event Player.lootSelectIndex < 0);
		Small Message(Event Player, Custom String("PICKED UP LOOT @ {0}", Global.lootPosList[Event Player.lootSelectIndex]));
		Modify Global Variable(lootPosList, Remove From Array By Index, Event Player.lootSelectIndex);
		Destroy Effect(Global.lootEffectIdList[Event Player.lootSelectIndex]);
		Modify Global Variable(lootEffectIdList, Remove From Array By Index, Event Player.lootSelectIndex);
		Start Forcing Player To Be Hero(Event Player, Global.lootHeroList[Event Player.lootSelectIndex]);
		Modify Global Variable(lootHeroList, Remove From Array By Index, Event Player.lootSelectIndex);
	}
}

rule("Player Stands Over Loot")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is True For Any(Global.lootPosList, Distance Between(Position Of(Event Player), Current Array Element) <= Global.LOOT_RADIUS)
			== True;
	}

	actions
	{
		Event Player.lootSelectIndex = -1;
		For Player Variable(Event Player, i, 0, Count Of(Global.lootPosList), 1);
			If(Distance Between(Position Of(Event Player), Global.lootPosList[Event Player.i]) <= Global.LOOT_RADIUS);
				Event Player.lootSelectIndex = Event Player.i;
				Break;
			End;
		End;
		Abort If(Event Player.lootSelectIndex < 0);
		Destroy HUD Text(Event Player.lootPreviewHUDId);
		Create HUD Text(Event Player, Custom String("HERO: {0}", Global.lootHeroList[Event Player.lootSelectIndex]), Null, Custom String(
			"Press Interact to pickup"), Top, 0, White, White, White, Visible To and String, Default Visibility);
		Event Player.lootPreviewHUDId = Last Text ID;
	}
}

rule("Player Stands Over Loot (End)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is True For Any(Global.lootPosList, Distance Between(Position Of(Event Player), Current Array Element) <= Global.LOOT_RADIUS)
			== False;
	}

	actions
	{
		Destroy HUD Text(Event Player.lootPreviewHUDId);
	}
}

rule("Ring Pause Time Reset, Start Countdown")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.ringPauseTime == Global.RING_PAUSE_DURATION;
	}

	actions
	{
		Chase Global Variable At Rate(ringPauseTime, 0, 1, None);
	}
}

rule("Ring Pause Time Ended, Start Closing Circle")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.ringPauseTime == 0;
		Global.ringEffectId != 0;
	}

	actions
	{
		Stop Chasing Global Variable(ringPauseTime);
		Chase Global Variable Over Time(ringRadius, Global.newRingRadius, Global.RING_MOVE_DURATION, None);
		Chase Global Variable Over Time(ringPos, Global.newRingPos, Global.RING_MOVE_DURATION, None);
	}
}

rule("Ring Closed In, Start Pause Timer")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.ringRadius == Global.newRingRadius;
	}

	actions
	{
		Stop Chasing Global Variable(ringPos);
		Stop Chasing Global Variable(ringRadius);
		Call Subroutine(GenerateNextRing);
		Global.ringPauseTime = Global.RING_PAUSE_DURATION;
	}
}

rule("Ring Radius less than new ring radius, end move in")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.ringRadius < Global.newRingRadius;
	}

	actions
	{
		Stop Chasing Global Variable(ringPos);
		Stop Chasing Global Variable(ringRadius);
		Call Subroutine(GenerateNextRing);
		Global.ringPauseTime = Global.RING_PAUSE_DURATION;
	}
}

rule("==TEST== Host Player Reset RIng")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Host Player == True;
		Is Button Held(Event Player, Crouch) == True;
		Is Button Held(Event Player, Melee) == True;
	}

	actions
	{
		Call Subroutine(ResetRing);
	}
}