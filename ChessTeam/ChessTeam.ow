variables
{
	global:
		0: king1
		1: king2
		2: i
		3: startCamPos
		4: TITLE_LIST

	player:
		0: titleIndex
}

subroutines
{
	0: SetupRound
	1: SetupBoard
	2: PopulateWithAI
	3: EndRound
	4: StartRoundIntro
}

rule("Game Setup")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Call Subroutine(PopulateWithAI);
		Set Match Time(0);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Press INTERACT + CROUCH to change Title"), Left, 0, White,
			White, Green, Visible To and String, Default Visibility);
		Global.TITLE_LIST = Empty Array;
		Modify Global Variable(TITLE_LIST, Append To Array, Custom String("KING"));
		Modify Global Variable(TITLE_LIST, Append To Array, Custom String("QUEEN"));
		Modify Global Variable(TITLE_LIST, Append To Array, Custom String("EMPORER"));
		Modify Global Variable(TITLE_LIST, Append To Array, Custom String("PRESIDENT"));
		Modify Global Variable(TITLE_LIST, Append To Array, Custom String("DICTATOR"));
		Modify Global Variable(TITLE_LIST, Append To Array, Custom String("RULER"));
		Modify Global Variable(TITLE_LIST, Append To Array, Custom String("PRIME MINISTER"));
	}
}

rule("Game Setup (Post-Start)")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Wait(2, Ignore Condition);
		Call Subroutine(SetupRound);
		Create Icon(All Players(All Teams), Eye Position(Global.king1), Diamond, Visible To and Position, Yellow, False);
		Create Effect(All Players(All Teams), Ring, Yellow, Global.king1, 1, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Ring, Yellow, Global.king1, 0.500, Visible To Position and Radius);
		Create Icon(All Players(All Teams), Eye Position(Global.king2), Diamond, Visible To and Position, Yellow, False);
		Create Effect(All Players(All Teams), Ring, Yellow, Global.king2, 1, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Ring, Yellow, Global.king2, 0.500, Visible To Position and Radius);
	}
}

rule("SetupRound()")
{
	event
	{
		Subroutine;
		SetupRound;
	}

	actions
	{
		Respawn(All Dead Players(All Teams));
		Wait(1, Ignore Condition);
		Call Subroutine(SetupBoard);
		Enable Built-In Game Mode Respawning(All Players(All Teams));
		Disable Built-In Game Mode Respawning(Global.king1);
		Disable Built-In Game Mode Respawning(Global.king2);
		Disable Built-In Game Mode Scoring;
		Disable Built-In Game Mode Completion;
		Call Subroutine(StartRoundIntro);
	}
}

rule("SetupBoard()")
{
	event
	{
		Subroutine;
		SetupBoard;
	}

	actions
	{
		"Select King 1"
		Global.king1 = Random Value In Array(All Players(Team 1));
		"Position King 1"
		Teleport(Global.king1, Vector(-18, 0, 0));
		"Position Pieces 1"
		For Global Variable(i, 0, 5, 1);
			Teleport(Filtered Array(All Players(Team 1), Current Array Element != Global.king1)[Global.i], Vector(-14, 0, 8 - 4 * Global.i));
		End;
		"Set facing Team 1"
		Set Facing(All Players(Team 1), Left, To World);
		"Select King 2"
		Global.king2 = Random Value In Array(All Players(Team 2));
		"Position King 2"
		Teleport(Global.king2, Vector(18, 0, 0));
		"Position Pieces 2"
		For Global Variable(i, 0, 5, 1);
			Teleport(Filtered Array(All Players(Team 2), Current Array Element != Global.king2)[Global.i], Vector(14, 0, -8 + 4 * Global.i));
		End;
		"Set facing Team 2"
		Set Facing(All Players(Team 2), Right, To World);
		"Heal Everyone"
		Heal(All Players(All Teams), Null, 10000);
		"Reset everyone's ult charge"
		Set Ultimate Charge(All Players(All Teams), 0);
	}
}

rule("StartRoundIntro()")
{
	event
	{
		Subroutine;
		StartRoundIntro;
	}

	actions
	{
		"Show Team 1 their King"
		Start Camera(All Players(Team 1), Eye Position(Global.king1) + Down * 0.700 + 2 * Facing Direction Of(Global.king1), Eye Position(
			Global.king1), 0);
		Big Message(All Players(Team 1), Custom String("ALL HAIL {1} {0}!", Global.king1, Global.TITLE_LIST[Global.king1.titleIndex]));
		"Show Team 2 their King"
		Start Camera(All Players(Team 2), Eye Position(Global.king2) + Down * 0.700 + 2 * Facing Direction Of(Global.king2), Eye Position(
			Global.king2), 0);
		Big Message(All Players(Team 2), Custom String("ALL HAIL {1} {0}!", Global.king2, Global.TITLE_LIST[Global.king2.titleIndex]));
		Wait(3, Ignore Condition);
		"Show Team 1 their Enemy King"
		Start Camera(All Players(Team 1), Eye Position(Global.king2) + Up + 2 * Facing Direction Of(Global.king2), Eye Position(
			Global.king2), 0);
		Big Message(All Players(Team 1), Custom String("DOWN WITH {1} {0}!", Global.king2, Global.TITLE_LIST[Global.king2.titleIndex]));
		"Show Team 2 their Enemy King"
		Start Camera(All Players(Team 2), Eye Position(Global.king1) + Up + 2 * Facing Direction Of(Global.king1), Eye Position(
			Global.king1), 0);
		Big Message(All Players(Team 2), Custom String("DOWN WITH {1} {0}!", Global.king1, Global.TITLE_LIST[Global.king1.titleIndex]));
		Wait(3, Ignore Condition);
		Stop Camera(All Players(All Teams));
	}
}

rule("PopulateWithAI()")
{
	event
	{
		Subroutine;
		PopulateWithAI;
	}

	actions
	{
		While(Count Of(All Players(Team 1)) < 6);
			Create Dummy Bot(Random Value In Array(All Heroes), Team 1, -1, Vector(0, 0, 0), Vector(0, 0, 0));
		End;
		While(Count Of(All Players(Team 2)) < 6);
			Create Dummy Bot(Random Value In Array(All Heroes), Team 2, -1, Vector(0, 0, 0), Vector(0, 0, 0));
		End;
	}
}

rule("King 1 Dies")
{
	event
	{
		Player Died;
		Team 1;
		All;
	}

	conditions
	{
		Event Player == Global.king1;
	}

	actions
	{
		Modify Team Score(Team 2, 1);
		Call Subroutine(EndRound);
	}
}

rule("King 2 Dies")
{
	event
	{
		Player Died;
		Team 2;
		All;
	}

	conditions
	{
		Event Player == Global.king2;
	}

	actions
	{
		Modify Team Score(Team 1, 1);
		Call Subroutine(EndRound);
	}
}

rule("EndRound()")
{
	event
	{
		Subroutine;
		EndRound;
	}

	actions
	{
		If(Attacker != Null);
			Global.startCamPos = Eye Position(Attacker);
		Else;
			Global.startCamPos = Eye Position(Victim);
		End;
		Start Camera(All Players(All Teams), (Eye Position(Victim) + Global.startCamPos) / 2, Eye Position(Victim), 0);
		Big Message(All Players(All Teams), Custom String("{1} {0} has been defeated!", Victim, Global.TITLE_LIST[Victim.titleIndex]));
		Wait(2, Ignore Condition);
		Call Subroutine(SetupRound);
		Stop Camera(All Players(All Teams));
	}
}

rule("Player Change Title")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Interact) == True;
		Is Button Held(Event Player, Crouch) == True;
	}

	actions
	{
		Event Player.titleIndex += 1;
		Event Player.titleIndex %= Count Of(Global.TITLE_LIST);
		Small Message(Event Player, Custom String("New Title: {1} {0}", Event Player, Global.TITLE_LIST[Event Player.titleIndex]));
	}
}

rule("Player Spawn In: Give random title")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	actions
	{
		Event Player.titleIndex = Random Integer(0, Count Of(Global.TITLE_LIST) - 1);
		Event Player.titleIndex %= Count Of(Global.TITLE_LIST);
	}
}

rule("King 1 Left")
{
	event
	{
		Player Left Match;
		Team 1;
		All;
	}

	actions
	{
		Create Dummy Bot(Hero Of(Event Player), Team 1, -1, Position Of(Event Player), Facing Direction Of(Event Player));
		If(Event Player == Global.king1);
			Global.king1 = Random Value In Array(All Players(Team 1));
		End;
	}
}

rule("King 2 Left")
{
	event
	{
		Player Left Match;
		Team 2;
		All;
	}

	actions
	{
		Create Dummy Bot(Hero Of(Event Player), Team 2, -1, Position Of(Event Player), Facing Direction Of(Event Player));
		If(Event Player == Global.king2);
			Global.king2 = Random Value In Array(All Players(Team 2));
		End;
	}
}