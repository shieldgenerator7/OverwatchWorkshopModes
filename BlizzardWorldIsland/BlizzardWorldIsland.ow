variables
{
	global:
		0: platformPosList
		1: platformRadiusList
		2: PLATFORM_LAND_THRESHOLD_Y
		3: _i_
		4: minPlatformY
		5: maxPlatformY
		6: heroDisableUltimateList

	player:
		0: platformIndex
		1: platformPos
		2: platformRadius
		3: _i_
		4: pickupIndex
		5: ultTargetList
}

subroutines
{
	0: playerSetPlatformOn
	1: playerSetPlatformOff
}

rule("Game Setup")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.PLATFORM_LAND_THRESHOLD_Y = 0.400;
		Global.platformPosList = Array(Vector(58, -5, 154), Vector(65.769, -3.279, 148.106), Vector(59.429, -1.961, 161.150));
		Global.platformRadiusList = Array(15, 3, 3);
		"Show visuals for first platform (Island Platform Base)"
		Create Effect(All Players(All Teams), Ring, White, Global.platformPosList[0], Global.platformRadiusList[0], Visible To);
		"Show visuals for first platform (Island Platform Base)"
		disabled Create Effect(All Players(All Teams), Light Shaft, White, Global.platformPosList[1], Global.platformRadiusList[1],
			Visible To Position and Radius);
		"Show visuals for first platform (Island Platform Base)"
		disabled Create Effect(All Players(All Teams), Light Shaft, White, Global.platformPosList[2], Global.platformRadiusList[2],
			Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), Custom String("Created by ShieldGnrtr7#2909"), Vector(58, 30, 154), 3, Do Not Clip,
			Visible To, Blue, Default Visibility);
		Create In-World Text(All Players(All Teams), Custom String("Last Updated 2020-06-10"), Vector(58, 30, 157), 2, Do Not Clip,
			Visible To, Green, Default Visibility);
		Disable Inspector Recording;
		disabled For Global Variable(_i_, 0, 3, 1);
		disabled Create Dummy Bot(Random Value In Array(All Heroes), All Teams, -1, Vector(0, 0, 0), Vector(0, 0, 0));
		disabled End;
		"Calculate minPlatformY and maxPlatformY"
		For Global Variable(_i_, 0, Count Of(Global.platformPosList), 1);
			Modify Global Variable(minPlatformY, Min, Y Component Of(Global.platformPosList[Global._i_]));
			Modify Global Variable(maxPlatformY, Max, Y Component Of(Global.platformPosList[Global._i_]));
		End;
		Global.heroDisableUltimateList = Array(Hero(Reinhardt), Hero(Sigma));
	}
}

rule("Player Spawns In, Teleport to Island, Set Vars")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(58, 15, 154));
		Event Player.platformIndex = -1;
	}
}

rule("Player Respawns, Teleport to Island")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(58, 15, 154));
		If(Array Contains(Global.heroDisableUltimateList, Hero Of(Event Player)) == True);
			Disallow Button(Event Player, Ultimate);
		Else;
			Allow Button(Event Player, Ultimate);
		End;
	}
}

rule("Player lands on platform in list")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		"Player is not already on a platform"
		Event Player.platformIndex < 0;
		Y Component Of(Position Of(Event Player)) >= Global.minPlatformY;
		Y Component Of(Position Of(Event Player)) <= Global.maxPlatformY;
	}

	actions
	{
		For Player Variable(Event Player, _i_, 0, Count Of(Global.platformPosList), 1);
			If(Distance Between(Vector(X Component Of(Position Of(Event Player)), 0, Z Component Of(Position Of(Event Player))), Vector(
				X Component Of(Global.platformPosList[Event Player._i_]), 0, Z Component Of(Global.platformPosList[Event Player._i_])))
				<= Global.platformRadiusList[Event Player._i_] && Absolute Value(Y Component Of(Position Of(Event Player)) - Y Component Of(
				Global.platformPosList[Event Player._i_])) <= Global.PLATFORM_LAND_THRESHOLD_Y);
				Event Player.platformIndex = Event Player._i_;
				Call Subroutine(playerSetPlatformOn);
				Break;
			End;
		End;
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Player jumps while on platform")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.platformIndex >= 0;
		Is Button Held(Event Player, Jump) == True;
		Hero Of(Event Player) != Hero(Pharah);
	}

	actions
	{
		Apply Impulse(Event Player, Up, 10, To World, Cancel Contrary Motion);
		Call Subroutine(playerSetPlatformOff);
	}
}

rule("Player is no longer on platform horizontally")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		"Player is not already on a platform"
		Event Player.platformIndex >= 0;
		"If the player's horizontal position is in the platform's radius"
		Distance Between(Vector(X Component Of(Position Of(Event Player)), 0, Z Component Of(Position Of(Event Player))), Vector(
			X Component Of(Event Player.platformPos), 0, Z Component Of(Event Player.platformPos))) > Event Player.platformRadius;
	}

	actions
	{
		Call Subroutine(playerSetPlatformOff);
	}
}

rule("Player is no longer on platform vertically")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		"Player is not already on a platform"
		Event Player.platformIndex >= 0;
		"If the player's vertical position is really close to the platform's vertical position"
		Absolute Value(Y Component Of(Position Of(Event Player)) - Y Component Of(Event Player.platformPos))
			> Global.PLATFORM_LAND_THRESHOLD_Y;
	}

	actions
	{
		Call Subroutine(playerSetPlatformOff);
	}
}

rule("Player Set Platform On")
{
	event
	{
		Subroutine;
		playerSetPlatformOn;
	}

	actions
	{
		Set Gravity(Event Player, 0);
		Apply Impulse(Event Player, Up, 0.100, To World, Cancel Contrary Motion);
		Apply Impulse(Event Player, Down, 0.100, To World, Incorporate Contrary Motion);
		Event Player.platformPos = Global.platformPosList[Event Player.platformIndex];
		Event Player.platformRadius = Global.platformRadiusList[Event Player.platformIndex];
		Teleport(Event Player, Vector(X Component Of(Position Of(Event Player)), Y Component Of(Event Player.platformPos), Z Component Of(
			Position Of(Event Player))));
	}
}

rule("Player Set Platform Off")
{
	event
	{
		Subroutine;
		playerSetPlatformOff;
	}

	actions
	{
		Set Gravity(Event Player, 100);
		Event Player.platformIndex = -1;
	}
}

rule("Stop when not intentionally moving")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Throttle Of(Event Player) == Vector(0, 0, 0);
		(X Component Of(Velocity Of(Event Player)) != 0 || Z Component Of(Velocity Of(Event Player)) != 0) == True;
		disabled Absolute Value(Square Root(0 ^ 0)) == True;
	}

	actions
	{
		Apply Impulse(Event Player, Vector(X Component Of(Velocity Of(Event Player)), 0, Z Component Of(Velocity Of(Event Player))) * -1,
			Square Root(X Component Of(Velocity Of(Event Player)) ^ 2 + Z Component Of(Velocity Of(Event Player)) ^ 2) * 0.100, To World,
			Incorporate Contrary Motion);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("If player is not in island area, teleport them")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Position Of(Event Player), Global.platformPosList[0]) > Global.platformPosList[0] * 5;
	}

	actions
	{
		Teleport(Event Player, Vector(58, 15, 154));
	}
}

rule("== TEST== Manual teleport to island")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Interact) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(58, 15, 154));
	}
}

disabled rule("==TEST== Pickup platform (make one if none found)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Host Player == True;
		Is Button Held(Event Player, Ultimate) == True;
	}

	actions
	{
		Event Player.pickupIndex = -1;
		For Player Variable(Event Player, _i_, 1, Count Of(Global.platformPosList), 1);
			If(Distance Between(Vector(X Component Of(Position Of(Event Player)), 0, Z Component Of(Position Of(Event Player))), Vector(
				X Component Of(Global.platformPosList[Event Player._i_]), 0, Z Component Of(Global.platformPosList[Event Player._i_])))
				<= Global.platformRadiusList[Event Player._i_] && Absolute Value(Y Component Of(Position Of(Event Player)) - Y Component Of(
				Global.platformPosList[Event Player._i_])) <= Global.PLATFORM_LAND_THRESHOLD_Y * 3);
				Event Player.pickupIndex = Event Player._i_;
				Break;
			End;
		End;
		If(Event Player.pickupIndex < 0);
			"Island Platform Base"
			Modify Global Variable(platformPosList, Append To Array, Position Of(Event Player));
			Modify Global Variable(platformRadiusList, Append To Array, 5);
			Event Player.pickupIndex = Count Of(Global.platformPosList) - 1;
			Small Message(All Players(All Teams), Custom String("Created Platform {0}", Event Player.pickupIndex));
		Else;
			Teleport(Event Player, Global.platformPosList[Event Player.pickupIndex]);
			Small Message(Event Player, Custom String("Picked up Platform {0}", Event Player.pickupIndex));
		End;
	}
}

disabled rule("==TEST== Move platform while picked up")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Host Player == True;
		Hero Of(Event Player) == Hero(Pharah);
		Event Player.pickupIndex >= 1;
	}

	actions
	{
		Global.platformPosList[Event Player.pickupIndex] = Position Of(Event Player);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("==TEST== Put down platform")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Host Player == True;
		Is Button Held(Event Player, Ability 2) == True;
	}

	actions
	{
		Small Message(All Players(All Teams), Custom String("Put down Platform {0}", Event Player.pickupIndex));
		Event Player.pickupIndex = -1;
	}
}

disabled rule("==TEST== Make Pharah immune to gravity")
{
	event
	{
		Player Joined Match;
		All;
		Pharah;
	}

	conditions
	{
		Host Player == True;
		Hero Of(Event Player) == Hero(Pharah);
	}

	actions
	{
		Set Gravity(Event Player, 0);
		Event Player.pickupIndex = -1;
	}
}

disabled rule("==TEST== Pharah: crouch to go down")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Host Player == True;
		Hero Of(Event Player) == Hero(Pharah);
		Is Button Held(Event Player, Crouch) == True;
	}

	actions
	{
		Set Gravity(Event Player, 0);
		Apply Impulse(Event Player, Down, 1, To World, Cancel Contrary Motion);
	}
}

disabled rule("==TEST== Pharah: crouch to go down (stop)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Host Player == True;
		Hero Of(Event Player) == Hero(Pharah);
		Is Button Held(Event Player, Crouch) == False;
	}

	actions
	{
		Set Gravity(Event Player, 0);
		Apply Impulse(Event Player, Up, 1, To World, Incorporate Contrary Motion);
	}
}

disabled rule("==TEST== Pharah: space to go up")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Host Player == True;
		Hero Of(Event Player) == Hero(Pharah);
		Is Button Held(Event Player, Jump) == True;
	}

	actions
	{
		Set Gravity(Event Player, 0);
		Apply Impulse(Event Player, Up, 1, To World, Cancel Contrary Motion);
	}
}

disabled rule("==TEST== Pharah: space to go up (stop)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Host Player == True;
		Hero Of(Event Player) == Hero(Pharah);
		Is Button Held(Event Player, Jump) == False;
	}

	actions
	{
		Set Gravity(Event Player, 0);
		Apply Impulse(Event Player, Down, 1, To World, Incorporate Contrary Motion);
	}
}

disabled rule("==TEST== Turn into echo")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		Host Player == True;
		Hero Of(Event Player) == Hero(Pharah);
		Is Communicating Any Voice line(Event Player) == True;
	}

	actions
	{
		Set Gravity(Event Player, 100);
		Start Forcing Player To Be Hero(Event Player, Hero(Echo));
	}
}

disabled rule("==TEST== Turn into pharah")
{
	event
	{
		Ongoing - Each Player;
		All;
		Echo;
	}

	conditions
	{
		Host Player == True;
		Hero Of(Event Player) == Hero(Echo);
		Is Button Held(Event Player, Ultimate) == True;
	}

	actions
	{
		Set Gravity(Event Player, 0);
		Start Forcing Player To Be Hero(Event Player, Hero(Pharah));
	}
}

disabled rule("==AI== Dummy Bot Spawn In")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Holding Button(Event Player, Primary Fire);
	}
}

rule("Rein Earthshatter")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reinhardt);
		Is Button Held(Event Player, Ultimate) == True;
		Event Player.platformIndex >= 0;
		Ultimate Charge Percent(Event Player) == 100;
	}

	actions
	{
		Set Ultimate Charge(Event Player, 0);
		Event Player.ultTargetList = Filtered Array(Players in View Angle(Event Player, All Teams, 45),
			Current Array Element.platformIndex == Event Player.platformIndex);
		Set Status(Event Player.ultTargetList, Event Player, Knocked Down, 5);
		Damage(Event Player.ultTargetList, Event Player, 50);
		Apply Impulse(Event Player.ultTargetList, Up, 3, To World, Cancel Contrary Motion);
	}
}

rule("Sigma Gravitic Flux")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Sigma);
		Is Button Held(Event Player, Ultimate) == True;
		Ultimate Charge Percent(Event Player) == 100;
	}

	actions
	{
		Set Ultimate Charge(Event Player, 0);
		"Sigma floats up"
		Apply Impulse(Event Player, Up, 70, To World, Cancel Contrary Motion);
		Event Player.ultTargetList = Filtered Array(All Players(All Teams), Current Array Element != Event Player);
		Damage(Event Player.ultTargetList, Event Player, 50);
		"Sigma lifts opponents up"
		Apply Impulse(Event Player.ultTargetList, Up, 70, To World, Cancel Contrary Motion);
		Wait(5, Ignore Condition);
		Set Status(Event Player.ultTargetList, Event Player, Stunned, 0.500);
		"Sigma drops opponents"
		Apply Impulse(Event Player.ultTargetList, Down, 70, To World, Cancel Contrary Motion);
		"Sigma deals half of opponent's health in damage"
		For Player Variable(Event Player, _i_, 0, Count Of(Event Player.ultTargetList), 1);
			Damage(Event Player.ultTargetList[Event Player._i_], Event Player, Max Health(Event Player.ultTargetList[Event Player._i_]) / 2);
		End;
		"Reset Sigma's Ult Charge"
		Set Ultimate Charge(Event Player, 0);
	}
}