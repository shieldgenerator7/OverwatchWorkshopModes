variables
{
	global:
		0: REIN_TURN_AMOUNT
		1: TRAIN_JOIN_RADIUS

	player:
		0: isCar
		1: carParent
		2: carChild
}

rule("Game Setup")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Set Global Variable(REIN_TURN_AMOUNT, 90);
		Set Global Variable(TRAIN_JOIN_RADIUS, 5);
		Create Dummy Bot(Hero(Brigitte), Team 1, -1.000, Objective Position(1), Vector(1, 0, 0));
	}
}

rule("TEST BOT SETUP")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Dummy Bot(Hero(Brigitte), Team 1, -1.000, Objective Position(1), Vector(1, 0, 0));
	}
}

rule("Reinhardt Setup")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reinhardt);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Set Primary Fire Enabled(Event Player, False);
		Set Secondary Fire Enabled(Event Player, False);
		Set Ability 2 Enabled(Event Player, False);
		Set Ultimate Ability Enabled(Event Player, False);
		Set Player Variable(Event Player, isCar, True);
		Set Player Variable(Event Player, carChild, Null);
		disabled Destroy HUD Text(Player Variable(Event Player, isCar));
		disabled Create HUD Text(Event Player, Custom String("Wind Tunnel: READY", Null, Null, Null), Null, Null, Left, 0, Green, White, White,
			String, Default Visibility);
		disabled Set Player Variable(Event Player, isCar, Last Text ID);
	}
}

rule("Non-Rein Setup")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Hero Of(Event Player) != Hero(Reinhardt);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Set Primary Fire Enabled(Event Player, True);
		Set Secondary Fire Enabled(Event Player, True);
		Set Ability 1 Enabled(Event Player, True);
		Set Ability 2 Enabled(Event Player, True);
		Set Ultimate Ability Enabled(Event Player, True);
		Set Player Variable(Event Player, isCar, False);
		Set Player Variable(Event Player, carChild, Null);
		disabled Destroy HUD Text(Player Variable(Event Player, isCar));
	}
}

rule("Rein Always Charge")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reinhardt);
		Is Alive(Event Player) == True;
		disabled Is Using Ability 1(Event Player) == False;
	}

	actions
	{
		Press Button(Event Player, Ability 1);
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rein Controls - Left")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reinhardt);
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Primary Fire) == True;
		disabled X Component Of(Throttle Of(Event Player)) > 0;
	}

	actions
	{
		Set Facing(Event Player, Direction From Angles(Global Variable(REIN_TURN_AMOUNT), 0), To Player);
	}
}

rule("Rein Controls - Right")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reinhardt);
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Secondary Fire) == True;
		disabled X Component Of(Throttle Of(Event Player)) < 0;
	}

	actions
	{
		Set Facing(Event Player, Direction From Angles(Multiply(Global Variable(REIN_TURN_AMOUNT), -1.000), 0), To Player);
	}
}

rule("Player Joins the Train")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Player Variable(Event Player, carParent) == Null;
		Player Variable(Event Player, isCar) == False;
		disabled Is True For Any(Players Within Radius(Position Of(Event Player), Global Variable(TRAIN_JOIN_RADIUS), Team Of(Event Player),
			Surfaces), And(Compare(Player Variable(Current Array Element, isCar), ==, True), Compare(Player Variable(Current Array Element,
			carChild), ==, Null))) == True;
	}

	actions
	{
		Set Player Variable(Event Player, carParent, Value In Array(Filtered Array(Players Within Radius(Position Of(Event Player),
			Global Variable(TRAIN_JOIN_RADIUS), Team Of(Event Player), Surfaces), And(Compare(Player Variable(Current Array Element,
			isCar), ==, True), Compare(Player Variable(Current Array Element, carChild), ==, Null))), 0));
		Skip If(Compare(Player Variable(Event Player, carParent), ==, Null), 3);
		Set Player Variable(Player Variable(Event Player, carParent), carChild, Event Player);
		Set Player Variable(Event Player, isCar, True);
		Small Message(All Players(All Teams), Custom String("{0} JOINED {1}", Event Player, Player Variable(Event Player, carParent),
			Null));
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}