variables
{
	global:
		0: TRACK_RADIUS
		1: TRACK_DPS
		2: TRACK_DURATION
		3: trackPoints
		4: trackEffectIds
		5: _trackTargetList_
		6: _trackLeft_
		7: _trackTarget_
		9: _result_
		10: _i_
		11: _j_

	player:
		0: nextCheckPoint
		1: flagEffectId
}

subroutines
{
	0: ReinTrailContainsTarget
	1: DisplayTrackSegments
	2: NextPlayerCheckpoint
}

rule("Game Setup")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.TRACK_RADIUS = 1;
		Global.TRACK_DPS = 250;
		Global.TRACK_DURATION = 7;
		Global.trackPoints = Array(Vector(-2.771, 0.006, -9.900), Vector(-17.783, 0.078, -16.934), Vector(-22.672, -1.827, -14.997),
			Vector(-28.986, -1.954, -12.829), Vector(-31.359, 1.814, -30.305), Vector(-32.700, 1.923, -33.667), Vector(-21.688, 1.967,
			-35.846), Vector(-15.737, 1.991, -29.964), Vector(-3.721, 1.833, -27.165), Vector(5.064, 3.809, -27.066), Vector(8.396, 3.820,
			-26.115), Vector(12.687, 3.838, -29.729), Vector(12.824, 4.004, -37.156), Vector(12.880, 4.386, -43.663), Vector(12.410, 4.671,
			-49.054), Vector(2.749, 5.765, -56.002), Vector(-4.432, 5.998, -55.425), Vector(-8.773, 5, -55.116), Vector(-8.910, 5,
			-57.141), Vector(-9.505, 3, -63.217), Vector(-9.819, 3.001, -65.395), Vector(-10.377, 3.114, -74.056), Vector(-7.679, 3.449,
			-79.790), Vector(-5.023, 3.545, -85.081), Vector(-0.656, 4.301, -91.154), Vector(2.296, 4.771, -94.193), Vector(5.604, 4.958,
			-95.136), Vector(9.792, 6.012, -93.522), Vector(16.157, 6.012, -90.123), Vector(17.259, 6.235, -91.104), Vector(18.632, 9.012,
			-96.888), Vector(19.527, 9.021, -97.952), Vector(17.972, 9.406, -98.792), Vector(14.607, 11.012, -99.710), Vector(12.620,
			11.012, -100.271), Vector(12.137, 11.012, -98.762), Vector(10.445, 11.012, -93.756), Vector(9.746, 11.012, -90.914), Vector(
			11.199, 11.012, -90.088), Vector(17.548, 11.012, -88.535), Vector(21.397, 11.012, -89.359), Vector(28.620, 8, -86.504), Vector(
			30.932, 8, -85.072), Vector(32.053, 8, -82.984), Vector(33.021, 8, -82.364), Vector(34.775, 8.072, -82.913), Vector(36.460,
			8.021, -84.587), Vector(38.003, 8.063, -85.804), Vector(37.749, 8.247, -88.296), Vector(36.435, 8.758, -89.751), Vector(34.859,
			9.454, -91.770), Vector(34.035, 10.038, -93.883), Vector(35.489, 10.246, -95.488), Vector(37.392, 10.598, -96.899), Vector(
			42.655, 10.545, -100.382), Vector(46.208, 9.016, -102.301), Vector(51.619, 6.723, -104.163), Vector(53.877, 6.723, -104.896),
			Vector(63.117, 6.723, -107.242), Vector(67.514, 8.728, -108.408), Vector(73.112, 10.710, -109.756), Vector(80.069, 10.658,
			-110.773), Vector(85.234, 10.723, -112.469), Vector(91.316, 12.723, -115.266), Vector(92.847, 12.723, -115.580), Vector(94.938,
			12.723, -113.616), Vector(96.008, 12.723, -110.362), Vector(94.201, 12.723, -111.543), Vector(93.233, 12.723, -109.562),
			Vector(91.287, 12.723, -106.575), Vector(89.943, 12.723, -103.272), Vector(87.732, 12.841, -101.113), Vector(84.803, 12.897,
			-97.945), Vector(84.285, 12.707, -94.436), Vector(88.395, 12.691, -77.389), Vector(90.673, 12.663, -74.163), Vector(98.452,
			12.666, -71.625), Vector(100.266, 12.723, -69.760), Vector(99.890, 12.733, -66.049), Vector(98.382, 12.733, -58.651), Vector(
			97.274, 12.723, -57.575), Vector(94.389, 12.723, -56.861), Vector(94.703, 12.723, -54.503), Vector(95.436, 11.723, -49.360),
			Vector(96.596, 10.723, -45.515), Vector(95.321, 12.723, -111.270), Vector(95.844, 10.723, -44.483), Vector(103.445, 12.723,
			-46.879), Vector(104.941, 12.723, -47.618), Vector(104.785, 12.723, -53.778), Vector(113.877, 12.723, -59.679), Vector(120.368,
			10.723, -61.158), Vector(125.992, 10.723, -61.670), Vector(129.564, 11.810, -62.159), Vector(133.266, 11.723, -62.764), Vector(
			135.673, 11.723, -62.218), Vector(136.961, 11.723, -60.672), Vector(141.966, 11.723, -47.974), Vector(142.373, 11.723,
			-41.047), Vector(142.777, 11.723, -35.560), Vector(141.716, 11.810, -31.496), Vector(139.622, 10.723, -28.227), Vector(136.344,
			10.723, -21.164), Vector(133.814, 10.723, -16.777), Vector(133.813, 12.723, -11.366), Vector(133.841, 12.723, -9.874), Vector(
			132.306, 12.868, -8.681), Vector(129.958, 13.723, -8.313), Vector(126.812, 13.723, -7.583), Vector(123.461, 12.723, -6.724),
			Vector(122.650, 12.723, -6.670), Vector(121.824, 12.723, -8.129), Vector(120.727, 10.723, -13.107), Vector(116.877, 10.723,
			-13.856), Vector(114.852, 10.723, -15.427), Vector(113.553, 10.723, -18.365), Vector(113.635, 10.723, -21.663), Vector(113.773,
			10.723, -27.854), Vector(114.922, 8.720, -32.211), Vector(115.639, 8.719, -37.752), Vector(112.278, 8.958, -40.348), Vector(
			107.324, 10.723, -37.398), Vector(107.130, 10.723, -37.084), Vector(107.161, 10.723, -35.588), Vector(108.168, 10.723,
			-30.500), Vector(108.583, 11.316, -28.701), Vector(109.159, 12.558, -26.288), Vector(109.571, 12.723, -23.909), Vector(108.087,
			12.742, -23.391), Vector(101.764, 15.723, -21.468), Vector(98.689, 15.723, -20.585), Vector(94.141, 15.723, -19.550), Vector(
			90.818, 15.723, -19.606), Vector(89.104, 15.723, -21.476), Vector(87.756, 12.723, -28.667), Vector(86.530, 12.723, -35.028),
			Vector(83.538, 12.723, -49.007), Vector(81.539, 12.723, -51.833), Vector(78.650, 12.723, -56.345), Vector(77.757, 12.723,
			-59.850), Vector(76.895, 12.723, -63.326), Vector(76.364, 12.660, -65.137), Vector(74.101, 12.801, -65.120), Vector(70.986,
			14.692, -64.442), Vector(68.448, 16.196, -65.340), Vector(64.877, 18.249, -67.320), Vector(61.356, 20.021, -67.476), Vector(
			56.645, 21.003, -66.141), Vector(51.286, 21.726, -65.048), Vector(44.763, 5.306, -65.555), Vector(41.779, 5.085, -62.567),
			Vector(39.244, 5.152, -59.769), Vector(36.614, 5.250, -58.131), Vector(34.411, 5.250, -58.867), Vector(29.986, 4.839, -59.083),
			Vector(23.780, 4.814, -57.344), Vector(21.228, 4.853, -53.300), Vector(21.813, 5, -48.554), Vector(22.990, 5, -44.097), Vector(
			26.611, 5, -39.585), Vector(27.045, 4.015, -36.379), Vector(26.771, 4.015, -30.708), Vector(27.135, 3.901, -26.890), Vector(
			27.663, 3.239, -23.080), Vector(28.278, 0.983, -14.875), Vector(26.767, 0.920, -11.989), Vector(24.211, 0.905, -10.010),
			Vector(20.854, 0.896, -8.384), Vector(16.711, 0.890, -6.993), Vector(9.761, 1, -7.176), Vector(-0.986, 0.016, -9.394));
		disabled Call Subroutine(DisplayTrackSegments);
	}
}

rule("Display Track Segments")
{
	event
	{
		Subroutine;
		DisplayTrackSegments;
	}

	actions
	{
		If(Count Of(Global.trackPoints) <= 1);
			Abort;
		End;
		For Global Variable(_i_, 0, Count Of(Global.trackPoints), 1);
			Destroy Effect(Global.trackEffectIds[Global._i_]);
		End;
		Global.trackEffectIds = Empty Array;
		For Global Variable(_i_, 1, Count Of(Global.trackPoints), 1);
			If(Is True For Any(All Players(All Teams),
				Current Array Element.nextCheckPoint * 10 + 5 >= Global._i_ && Current Array Element.nextCheckPoint * 10 - 10 <= Global._i_));
				Global._trackLeft_ = Global.TRACK_RADIUS * Direction From Angles(Angle Between Vectors(
					Global.trackPoints[Global._i_ + 1] - Global.trackPoints[Global._i_ - 1], Forward) + 90, 0);
				Create Beam Effect(All Players(All Teams), Good Beam, Global.trackPoints[Global._i_ - 1] + Global._trackLeft_,
					Global.trackPoints[Global._i_] + Global._trackLeft_, Color(Green), Visible To);
				Modify Global Variable(trackEffectIds, Append To Array, Last Created Entity);
				Create Beam Effect(All Players(All Teams), Good Beam, Global.trackPoints[Global._i_ - 1] - Global._trackLeft_,
					Global.trackPoints[Global._i_] - Global._trackLeft_, Color(Green), Visible To);
				Modify Global Variable(trackEffectIds, Append To Array, Last Created Entity);
			End;
		End;
	}
}

rule("Player Spawn In")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Count Of(Global.trackPoints) >= 100;
	}

	actions
	{
		Event Player.nextCheckPoint = 0;
		Call Subroutine(NextPlayerCheckpoint);
		Create Icon(Event Player, Global.trackPoints[Event Player.nextCheckPoint * 10], Flag, Position, Color(Green), True);
		Event Player.flagEffectId = Last Created Entity;
		Create Effect(Event Player, Ring, Color(Green), Global.trackPoints[Event Player.nextCheckPoint * 10], 2, Position and Radius);
	}
}

rule("Host - Make Track Segment")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Crouch)) == True;
		Event Player == Host Player;
	}

	actions
	{
		Modify Global Variable(trackPoints, Append To Array, Position Of(Event Player));
		Global._trackLeft_ = Global.TRACK_RADIUS * Direction From Angles(Horizontal Facing Angle Of(Event Player) + 90, 0);
		If(Count Of(Global.trackPoints) > 1);
			Create Beam Effect(All Players(All Teams), Good Beam, Global.trackPoints[Count Of(Global.trackPoints) - 2] + Global._trackLeft_,
				Global.trackPoints[Count Of(Global.trackPoints) - 1] + Global._trackLeft_, Color(Green), Visible To);
			Modify Global Variable(trackEffectIds, Append To Array, Last Created Entity);
			Create Beam Effect(All Players(All Teams), Good Beam, Global.trackPoints[Count Of(Global.trackPoints) - 2] - Global._trackLeft_,
				Global.trackPoints[Count Of(Global.trackPoints) - 1] - Global._trackLeft_, Color(Green), Visible To);
			Modify Global Variable(trackEffectIds, Append To Array, Last Created Entity);
		End;
	}
}

rule("Rein tracks damage opponents")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Count Of(Global.trackPoints) > 0;
	}

	actions
	{
		Global._trackTargetList_ = All Players(All Teams);
		"For all enemy players,"
		For Global Variable(_i_, 0, Count Of(Global._trackTargetList_), 1);
			Global._trackTarget_ = Global._trackTargetList_[Global._i_];
			"If that player is on the trail,"
			Call Subroutine(ReinTrailContainsTarget);
			If(Global._result_ == True);
				"Give that player speed"
				Set Move Speed(Global._trackTarget_, 150);
			Else;
				"Set to normal speed"
				Set Move Speed(Global._trackTarget_, 100);
			End;
		End;
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("k")
{
	event
	{
		Subroutine;
		ReinTrailContainsTarget;
	}

	actions
	{
		Global._result_ = False;
		For Global Variable(_j_, 0, Count Of(Global.trackPoints), 1);
			If(Distance Between(Position Of(Global._trackTarget_), Global.trackPoints[Global._j_]) <= Global.TRACK_RADIUS);
				Global._result_ = True;
				Break;
			End;
		End;
	}
}

disabled rule("==TEST== Create dummy")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player == Host Player;
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		Create Dummy Bot(Random Value In Array(All Heroes), All Teams, -1, Position Of(Event Player), Facing Direction Of(Event Player));
	}
}

rule("Next Player Checkpoint")
{
	event
	{
		Subroutine;
		NextPlayerCheckpoint;
	}

	actions
	{
		Event Player.nextCheckPoint += 1;
		If(Event Player.nextCheckPoint * 10 >= Count Of(Global.trackPoints));
			Event Player.nextCheckPoint = 0;
		End;
	}
}

rule("Player gets flag")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Position Of(Event Player), Global.trackPoints[Event Player.nextCheckPoint * 10]) <= 2;
	}

	actions
	{
		Call Subroutine(NextPlayerCheckpoint);
		Call Subroutine(DisplayTrackSegments);
	}
}