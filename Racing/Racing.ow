variables
{
	global:
		0: TRACK_RADIUS
		1: TRACK_DPS
		2: TRACK_DURATION
		3: trackPoints
		4: trackEffectIds
		5: _trackTargetList_
		6: _trackLeft_
		7: _trackTarget_
		9: _result_
		10: _i_
		11: _j_
}

subroutines
{
	0: ReinTrailContainsTarget
}

rule("Game Setup")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.TRACK_RADIUS = 1;
		Global.TRACK_DPS = 250;
		Global.TRACK_DURATION = 7;
	}
}

rule("Player Spawn In")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	actions
	{
		Global.trackPoints = Empty Array;
		Global.trackEffectIds = Empty Array;
	}
}

rule("Host - Make Track Segment")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Crouch)) == True;
		Event Player == Host Player;
	}

	actions
	{
		Modify Global Variable(trackPoints, Append To Array, Position Of(Event Player));
		Global._trackLeft_ = Global.TRACK_RADIUS * Direction From Angles(Horizontal Facing Angle Of(Event Player) + 90, 0);
		If(Count Of(Global.trackPoints) > 1);
			Create Beam Effect(All Players(All Teams), Good Beam, Global.trackPoints[Count Of(Global.trackPoints) - 2] + Global._trackLeft_,
				Global.trackPoints[Count Of(Global.trackPoints) - 1] + Global._trackLeft_, Color(Green), Visible To);
			Modify Global Variable(trackEffectIds, Append To Array, Last Created Entity);
			Create Beam Effect(All Players(All Teams), Good Beam, Global.trackPoints[Count Of(Global.trackPoints) - 2] - Global._trackLeft_,
				Global.trackPoints[Count Of(Global.trackPoints) - 1] - Global._trackLeft_, Color(Green), Visible To);
			Modify Global Variable(trackEffectIds, Append To Array, Last Created Entity);
		End;
	}
}

rule("Rein tracks damage opponents")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reinhardt);
		Count Of(Global.trackPoints) > 0;
	}

	actions
	{
		Global._trackTargetList_ = Filtered Array(All Living Players(Opposite Team Of(Team Of(Event Player))),
			Current Array Element != Event Player);
		"For all enemy players,"
		For Global Variable(_i_, 0, Count Of(Global._trackTargetList_), 1);
			Global._trackTarget_ = Global._trackTargetList_[Global._i_];
			"If that player is on the trail,"
			Call Subroutine(ReinTrailContainsTarget);
			If(Global._result_ == True);
				"Damage that player"
				Damage(Global._trackTarget_, Event Player, Global.TRACK_DPS / 10);
			End;
		End;
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("k")
{
	event
	{
		Subroutine;
		ReinTrailContainsTarget;
	}

	actions
	{
		Global._result_ = False;
		For Global Variable(_j_, 0, Count Of(Global.trackPoints), 1);
			If(Distance Between(Position Of(Global._trackTarget_), Global.trackPoints[Global._j_]) <= Global.TRACK_RADIUS);
				Global._result_ = True;
				Break;
			End;
		End;
	}
}

disabled rule("==TEST== Create dummy")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player == Host Player;
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		Create Dummy Bot(Random Value In Array(All Heroes), All Teams, -1, Position Of(Event Player), Facing Direction Of(Event Player));
	}
}