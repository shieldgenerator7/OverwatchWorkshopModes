variables
{
	global:
		7: horseList
		14: OFFSET_ATTACH
		17: riderList

	player:
		0: alive
		2: _verticalFacingAngle
		3: punchDamage
		7: horse
		12: mountCooldown
		13: mounted
		17: rider
		18: speed
}

rule("game setup - made by shieldgnrtr7")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.OFFSET_ATTACH = Vector(0, 1, 0);
	}
}

rule("skip assembly")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Assembling Heroes == True;
	}

	actions
	{
		Set Match Time(0);
	}
}

rule("skip setup")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is In Setup == True;
	}

	actions
	{
		Set Match Time(0);
	}
}

rule("player spawn (rider) (mccree)")
{
	event
	{
		Ongoing - Each Player;
		All;
		McCree;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Hero Of(Event Player) == Hero(McCree);
	}

	actions
	{
		Skip If(Global.riderList != 0, 1);
		Global.riderList = Event Player;
		Skip If(Array Contains(Global.riderList, Event Player), 1);
		Modify Global Variable(riderList, Append To Array, Event Player);
		Modify Global Variable(horseList, Remove From Array By Value, Event Player);
		Event Player.alive = True;
		Event Player.horse.rider = Null;
		Event Player.rider.horse = Null;
		Event Player.horse = Null;
		Event Player.rider = Null;
		Event Player.mountCooldown = 0;
		Event Player.mounted = False;
		Set Move Speed(Event Player, 100);
		Set Aim Speed(Event Player, 100);
		Clear Status(Event Player, Unkillable);
		Clear Status(Event Player, Phased Out);
	}
}

rule("player spawn (horse) (orisa)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Hero Of(Event Player) == Hero(Orisa);
	}

	actions
	{
		Skip If(Global.horseList != 0, 1);
		Global.horseList = Event Player;
		Skip If(Array Contains(Global.horseList, Event Player), 1);
		Modify Global Variable(horseList, Append To Array, Event Player);
		Modify Global Variable(riderList, Remove From Array By Value, Event Player);
		Event Player.alive = False;
		Event Player.rider.horse = Null;
		Event Player.horse.rider = Null;
		Event Player.horse = Null;
		Event Player.rider = Null;
		Event Player.mountCooldown = 0;
		Event Player.mounted = False;
		Event Player.speed = 50;
		Set Move Speed(Event Player, 50);
		Set Aim Speed(Event Player, 100);
		Clear Status(Event Player, Unkillable);
		Clear Status(Event Player, Phased Out);
	}
}

rule("rider chooses horse")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.alive == True;
		Event Player.horse == Null;
		Is True For Any(Global.horseList, Current Array Element.rider == Null && Distance Between(Position Of(Event Player), Position Of(
			Current Array Element)) <= 2) == True;
	}

	actions
	{
		Event Player.horse = Filtered Array(Global.horseList, Current Array Element.rider == Null && Distance Between(Position Of(
			Event Player), Position Of(Current Array Element)) <= 2)[0];
		Event Player.horse.rider = Event Player;
	}
}

rule("rider mounts horse")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.alive == True;
		Event Player.horse != Null;
		Event Player.mounted == False;
		Distance Between(Position Of(Event Player), Position Of(Event Player.horse)) <= 2;
		Event Player.mountCooldown == 0;
	}

	actions
	{
		Event Player.mounted = True;
		Event Player.horse.mounted = True;
		Set Status(Event Player, Event Player.horse, Phased Out, 9999);
		Set Status(Event Player.horse, Event Player, Unkillable, 9999);
		Clear Status(Event Player, Knocked Down);
		Heal(Event Player, Event Player.horse, 100);
		Heal(Event Player.horse, Event Player, 100);
	}
}

rule("rider rides horse (copied from \"stacks\" by Squ1dward)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.alive == True;
		Event Player.mounted == True;
		Is Alive(Event Player) == True;
		Event Player.horse != Null;
		Is Alive(Event Player.horse) == True;
	}

	actions
	{
		Abort If Condition Is False;
		Apply Impulse(Event Player, Direction Towards(Position Of(Event Player), Position Of(Event Player) + Vector(Speed Of In Direction(
			Event Player, Left), Vertical Speed Of(Event Player), Speed Of In Direction(Event Player, Forward))), Speed Of(Event Player)
			* -0.800, To World, Incorporate Contrary Motion);
		Apply Impulse(Event Player, Direction Towards(Event Player, Position Of(Event Player.horse) + Global.OFFSET_ATTACH),
			Distance Between(Position Of(Event Player), Position Of(Event Player.horse) + Global.OFFSET_ATTACH) * 10, To World,
			Cancel Contrary Motion);
		Skip If(Distance Between(Position Of(Event Player), Position Of(Event Player.horse)) < 2 || Is Alive(Event Player.horse) != True,
			3);
		Event Player._verticalFacingAngle = Vertical Facing Angle Of(Event Player);
		Teleport(Event Player, Position Of(Event Player.horse) + Global.OFFSET_ATTACH);
		Set Facing(Event Player, Direction From Angles(Horizontal Facing Angle Of(Event Player), Event Player._verticalFacingAngle),
			To World);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("rider injured")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Event Player.alive == True;
		Event Player.mounted == True;
		Normalized Health(Event Player) < 0.250;
	}

	actions
	{
		Event Player.mounted = False;
		Event Player.mountCooldown = 2;
	}
}

rule("horse injured")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Event Player.alive == False;
		Event Player.mounted == True;
		Normalized Health(Event Player) < 0.500;
	}

	actions
	{
		Event Player.rider.mounted = False;
		Event Player.rider.mountCooldown = 2;
	}
}

rule("rider thrown off horse")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.alive == True;
		Event Player.mountCooldown > 0;
	}

	actions
	{
		Event Player.horse.mounted = False;
		Event Player.mountCooldown = 2;
		Chase Player Variable Over Time(Event Player, mountCooldown, 0, 2, Destination and Duration);
		Clear Status(Event Player, Phased Out);
		Clear Status(Event Player.horse, Unkillable);
		Set Status(Event Player, Null, Knocked Down, 5);
		Apply Impulse(Event Player, Facing Direction Of(Event Player.horse) * -1 + Vector(0, 1, 0), 10, To World, Cancel Contrary Motion);
	}
}

rule("rider dies")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Event Player.alive == True;
	}

	actions
	{
		Event Player.horse.rider = Null;
		Event Player.horse = Null;
		Modify Global Variable(riderList, Remove From Array By Value, Event Player);
	}
}

rule("horse dies")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Event Player.alive == False;
	}

	actions
	{
		Event Player.rider.horse = Null;
		Event Player.rider = Null;
		Modify Global Variable(horseList, Remove From Array By Value, Event Player);
	}
}

rule("rider's horse dies")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Event Player.alive == True;
		Is Alive(Event Player.horse) == False;
	}

	actions
	{
		Event Player.horse = Null;
	}
}

rule("horse's rider dies")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Event Player.alive == False;
		Is Alive(Event Player.rider) == False;
	}

	actions
	{
		Event Player.rider = Null;
	}
}

rule("horse gallop (speed up)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.alive == False;
		Is Button Held(Event Player, Button(Ability 1)) == True;
	}

	actions
	{
		Event Player.speed += 10;
		Event Player.speed = Min(Event Player.speed, 200);
		Set Move Speed(Event Player, Event Player.speed);
		Set Aim Speed(Event Player, Min(215 - Event Player.speed, 100));
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("horse gallop (initial speed burst)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.alive == False;
		Is Button Held(Event Player, Button(Ability 1)) == True;
	}

	actions
	{
		Event Player.speed += 30;
		Event Player.speed = Min(Event Player.speed, 200);
		Set Move Speed(Event Player, Event Player.speed);
		Set Aim Speed(Event Player, Min(215 - Event Player.speed, 100));
	}
}

rule("horse gallop (slow down)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.alive == False;
		Is Button Held(Event Player, Button(Ability 1)) == False;
		Event Player.speed > 50;
	}

	actions
	{
		Event Player.speed -= 10;
		Event Player.speed = Max(Event Player.speed, 50);
		Set Move Speed(Event Player, Event Player.speed);
		Set Aim Speed(Event Player, Min(215 - Event Player.speed, 100));
		Wait(0.300, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("horse gallop (initial slow down)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.alive == False;
		Is Button Held(Event Player, Button(Ability 1)) == False;
		Event Player.speed > 50;
	}

	actions
	{
		Event Player.speed -= 15;
		Event Player.speed = Max(Event Player.speed, 50);
		Set Move Speed(Event Player, Event Player.speed);
		Set Aim Speed(Event Player, Min(215 - Event Player.speed, 100));
	}
}

rule("horse punches deal damage the faster she went (suggested by XDnetwork)")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Attacker.alive == False;
	}

	actions
	{
		Event Player.punchDamage = Event Player.speed * 0.500 - 80;
		Damage(Victim, Attacker, Event Player.punchDamage);
		Set Status(Attacker, Victim, Rooted, 0.500);
		Small Message(Attacker, String("{0}: {1}", String("Damage"), Event Player.punchDamage));
	}
}

rule("horse reset speed")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.alive == False;
		Speed Of(Event Player) < 1;
	}

	actions
	{
		Event Player.speed = 50;
		Set Move Speed(Event Player, Event Player.speed);
		Set Aim Speed(Event Player, 100);
	}
}

rule("antibug attempt #1 (rider)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.alive == True;
		Event Player.mounted == True;
		Event Player.horse == Null;
	}

	actions
	{
		Kill(Event Player, Null);
	}
}

rule("antibug attempt #1 (horse)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.alive == False;
		Event Player.mounted == True;
		Event Player.rider == Null;
	}

	actions
	{
		Kill(Event Player, Null);
	}
}

rule("antibug attempt #2 (rider)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.alive == True;
		Event Player.horse != Null;
		Event Player.horse.rider != Event Player;
	}

	actions
	{
		Kill(Event Player, Null);
		Clear Status(Event Player, Unkillable);
		Clear Status(Event Player, Phased Out);
	}
}

rule("antibug attempt #2 (horse)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.alive == False;
		Event Player.rider != Null;
		Event Player.rider.horse != Event Player;
	}

	actions
	{
		Kill(Event Player, Null);
		Clear Status(Event Player, Unkillable);
		Clear Status(Event Player, Phased Out);
	}
}

rule("made by shieldgnrtr7 @ShieldGnrtr7 ===last updated 2019-05-26 @00:00===")
{
	event
	{
		Ongoing - Global;
	}
}