//2020-01-13: copied from an Overwatch Workshop game mode by Spreadsheet#11101 (last updated by him 2019-12-29)

variables
{
	global:
		1: BotFramework
		2: tester_var
		3: RNGvar
		5: newbaptargeter
		7: HanzoGodmodeChecker
		8: over_heaven_active
		9: HeroBeforeHanzo
		10: OVER_HEAVEN_CAMERA
		11: genji_ult_detect_for_fix
		13: AnsweringQuestion
		14: thetextidforthatquestion
		15: worldendingplayer
		16: closestplayerto
		18: WORLDisENDING
		20: camerapos
		21: cameratarget
		22: house_text_before_purchase
		23: telltale_answer
		24: BuyableHouseOWNER
		25: house_setting_friends_mode

	player:
		0: DANCE_PARTY
		1: MarkedForTracerExplosion
		2: pretend_gtav
		3: AnaDamage
		4: AnaHealth
		5: SombraSpying
		6: HanzoGodmode
		7: SombraSpyTarget
		8: MercySlotTargeter
		9: MercyJuice
		10: HeroDetectorForHintCircle
		11: WidowEmoteDetector
		12: walter
		13: DoomfistDoubleHPBuff
		14: SombraTimeInSpy
		15: MeiBlastTargeter
		16: HammondDamageCharge
		17: MercyAttackCancel
		18: DoomfistIsInWalmartMode
		19: SombraCameraOrb
		20: BrigIsDown
		21: DoomfistBuffStunOnFirstHit
		22: HanzoGodmodeRNG
		23: DoomfistWalmartCircleBlue
		24: DoomfistWalmartCircleRed
		25: Genji2ndUlt
		26: DFredcirclevisual
		27: DFbluecirclevisual
		28: DFredtext
		29: DFbluetext
		30: lennyface
		31: reaper_new
		32: odm1targeter
		33: odm2targeter
		34: odm1beam
		35: odm2beam
		36: IsUsingLeftODM
		37: IsUsingRightODM
		38: bap_hud_icon
		39: junkrat_being_wacky
		40: SIGMA_UNDERTALE
		41: brig_ashe_exception
		42: ZaryaBubble
		43: sigmasparkles
		44: zarya_bubble_VISUALS
		45: widowsparklesthingy
		46: hanzo_icon
		47: bap_ending_icon
		48: IsInHouse
		49: altitude_detector_for_greenday
		50: greenday_toggle
		51: greenday_cloud
		52: portal_gun_blue
		53: portal_gun_orange
		54: Recently_Used_Portal
		55: blueportalring
		56: orangeportalring
		57: portal_alternater
		58: dva_help_hud_text
		59: has_seen_angelo
		60: COMMUNISM_GLOW_V2
		61: OverHeaven
		62: the_host_has_been_yeeted
		63: mccree_once_per_life
		64: another_sombra_bubble
		65: VA_MTT
		66: VA_the_entire_dance_gang
		67: VA_dance_stages
		68: VA_dance_instructions
		69: MercyBeamVisualAlso69Nice
		70: mercy_backup_if_leave
}

rule("GLOBAL INIT")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create In-World Text(All Players(All Teams), Custom String("made by spreadsheet (#11101)", Null, Null, Null), Vector(0, 300, 0), 5,
			Clip Against Surfaces, Visible To and String, Green, Default Visibility);
		Create In-World Text(All Players(All Teams), Custom String(
			"also check out ivybridge and coffelake's version, they copied me a lot and im great so their game is therefore also great",
			Null, Null, Null), Vector(0, 225, 0), 1, Clip Against Surfaces, Visible To and String, Turquoise, Default Visibility);
		Create In-World Text(All Players(All Teams), Custom String("version 3.16.4 29/12/19", Null, Null, Null), Vector(0, 150, 0), 5,
			Clip Against Surfaces, Visible To and String, Lime Green, Default Visibility);
		Create In-World Text(All Players(All Teams), Custom String("four teams: BZWAB kings: H27BB poll: 9VER0", Null, Null, Null), Vector(
			0, 75, 0), 1, Clip Against Surfaces, Visible To and String, Sky Blue, Default Visibility);
		disabled Create In-World Text(All Players(All Teams), String("{0}: {1}", Custom String("version 3", Null, Null, Null), 16.010, Null),
			Vector(0, 150, 0), 5, Clip Against Surfaces, Visible To and String, Lime Green, Default Visibility);
		Create In-World Text(All Players(All Teams), Custom String("load average: {0}", Server Load Average, Null, Null), Vector(400, 300,
			160), 2, Clip Against Surfaces, Visible To and String, Orange, Default Visibility);
		Create In-World Text(All Players(All Teams), Custom String("load peak: {0}", Server Load Peak, Null, Null), Vector(400, 275, 160),
			2, Clip Against Surfaces, Visible To and String, Orange, Default Visibility);
		Create In-World Text(All Players(All Teams), Custom String("jeff will kill us all if this goes too high", Server Load Peak, Null,
			Null), Vector(400, 250, 160), 2, Clip Against Surfaces, Visible To and String, Orange, Default Visibility);
		Set Match Time(8);
		Create In-World Text(Players Within Radius(Vector(180.500, 9.170, 64), 10, All Teams, Off), Custom String(
			"enter sniper tower (jump)", Null, Null, Null), Vector(180.500, 9.170, 64), 2, Do Not Clip, Visible To and String, White,
			Visible Always);
		Create Icon(All Players(All Teams), Vector(180, 10, 64), Diamond, Visible To, Purple, False);
		Create In-World Text(Players Within Radius(Vector(200.500, 9.300, 90), 10, All Teams, Off), Custom String("enter cellar (jump)",
			Null, Null, Null), Vector(200.500, 9.300, 89), 2, Do Not Clip, Visible To and String, White, Visible Always);
		Create Icon(All Players(All Teams), Vector(200, 11, 90), Diamond, Visible To, Blue, False);
		Create In-World Text(All Players(All Teams), Custom String("the diamond icons show where doors are", Null, Null, Null), Vector(200,
			-100.000, 80), 3, Do Not Clip, Visible To and String, Lime Green, Visible Never);
		Create Icon(All Players(All Teams), Vector(210, 11, 69), Diamond, Visible To, Yellow, False);
		Create In-World Text(Players Within Radius(Vector(209.500, 9, 69), 10, All Teams, Off), Custom String("enter house (jump)",
			Global Variable(BuyableHouseOWNER), Null, Null), Vector(209.500, 9.500, 69), 2, Do Not Clip, Visible To and String, White,
			Visible Always);
		Create In-World Text(Players Within Radius(Vector(209.500, 9, 69), 5, All Teams, Off), Custom String("owner: {0} locked: {1}",
			Global Variable(BuyableHouseOWNER), Compare(Global Variable(house_setting_friends_mode), ==, 0), Null), Vector(209.500, 8.500,
			69), 2, Do Not Clip, Visible To and String, White, Visible Always);
		Create In-World Text(Global Variable(BuyableHouseOWNER), Custom String("f to allow friends", Null, Null, Null), Vector(192, 28,
			80), 2, Clip Against Surfaces, Visible To and String, Yellow, Default Visibility);
		Create In-World Text(Global Variable(BuyableHouseOWNER), Custom String("f+crouch anywhere to teleport here", Null, Null, Null),
			Vector(195, 27, 85), 2, Clip Against Surfaces, Visible To and String, Yellow, Default Visibility);
		Create In-World Text(Players Within Radius(Vector(209.500, 9, 69), 5, All Teams, Off), Custom String("10 points to buy (jump)",
			Global Variable(BuyableHouseOWNER), Compare(Global Variable(house_setting_friends_mode), ==, 0), Null), Vector(209.500, 10.500,
			69), 2, Do Not Clip, Visible To and String, White, Visible Always);
		Set Global Variable(house_text_before_purchase, Last Text ID);
		Create Icon(All Players(All Teams), Vector(223.500, 11.500, 98), Diamond, Visible To, White, False);
		Create In-World Text(Players Within Radius(Vector(223.500, 11.500, 98), 10, All Teams, Off), Custom String("heaven's door (jump)",
			Null, Null, Null), Vector(223.500, 8.750, 98), 2, Do Not Clip, Visible To and String, White, Visible Always);
		Create In-World Text(Players Within Radius(Vector(223.500, 11.500, 98), 10, All Teams, Off), Custom String("in use: {0}", Compare(
			Global Variable(over_heaven_active), ==, 1), Null, Null), Vector(223.500, 9.500, 98), 2, Do Not Clip, Visible To and String,
			White, Visible Always);
		Create Icon(Append To Array(Append To Array(Empty Array, Players Within Radius(Vector(203.666, 4.762, 44.482), 35, All Teams,
			Surfaces)), Players Within Radius(Vector(202, 8.500, 46.500), 2.500, All Teams, Off)), Vector(203.700, 5.300, 45), Happy,
			Visible To, White, False);
		Disable Built-In Game Mode Music;
		Create HUD Text(All Players(All Teams), Custom String("use group up for hero info", Null, Null, Null), Custom String(
			"(hold c and click on it)", Null, Null, Null), Null, Right, -1.000, White, Sky Blue, White, Visible To and String,
			Default Visibility);
	}
}

rule("global random number generator 1-8")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Set Global Variable(RNGvar, Random Integer(1, 8));
		Wait(10, Ignore Condition);
		Set Slow Motion(100);
		Loop;
	}
}

rule("everyone can see everything when dead")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	actions
	{
		Enable Death Spectate All Players(Event Player);
	}
}

rule("but first, a word from our sponsor, RAID: shadow legends")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Match Time < 5;
		Random Integer(1, 3) == 3;
		Global Variable(WORLDisENDING) == 0;
	}

	actions
	{
		Wait(0.250, Abort When False);
		Pause Match Time;
		Set Status(All Players(All Teams), Null, Knocked Down, 10);
		Start Camera(All Players(All Teams), World Vector Of(Vector(0, 2, 3), Farthest Player From(Vector(0, 0, 0), All Teams),
			Rotation And Translation), Eye Position(Farthest Player From(Vector(0, 0, 0), All Teams)), 0);
		Create In-World Text(All Players(All Teams), Custom String("{0} im sure you want the game to end", Hero Icon String(Hero Of(
			Farthest Player From(Vector(0, 0, 0), All Teams))), Null, Null), Eye Position(Farthest Player From(Vector(0, 0, 0),
			All Teams)), 3, Do Not Clip, Visible To Position and String, White, Default Visibility);
		Wait(2, Ignore Condition);
		Destroy In-World Text(Last Text ID);
		Create In-World Text(All Players(All Teams), Custom String("{0} but first, a word from our sponsor", Hero Icon String(Hero Of(
			Farthest Player From(Vector(0, 0, 0), All Teams))), Null, Null), Eye Position(Farthest Player From(Vector(0, 0, 0),
			All Teams)), 3, Do Not Clip, Visible To Position and String, White, Default Visibility);
		Wait(2, Ignore Condition);
		Destroy In-World Text(Last Text ID);
		Create In-World Text(All Players(All Teams), Custom String("{0} RAID: shadow legends. download or die", Hero Icon String(Hero Of(
			Farthest Player From(Vector(0, 0, 0), All Teams))), Null, Null), Eye Position(Farthest Player From(Vector(0, 0, 0),
			All Teams)), 3, Do Not Clip, Visible To Position and String, White, Default Visibility);
		Wait(2, Ignore Condition);
		Destroy In-World Text(Last Text ID);
		Create In-World Text(All Players(All Teams), Custom String("{0} game is very good, they told me to say so", Hero Icon String(
			Hero Of(Farthest Player From(Vector(0, 0, 0), All Teams))), Null, Null), Eye Position(Farthest Player From(Vector(0, 0, 0),
			All Teams)), 3, Do Not Clip, Visible To Position and String, White, Default Visibility);
		Wait(2, Ignore Condition);
		Destroy In-World Text(Last Text ID);
		Create In-World Text(All Players(All Teams), Custom String("{0} use code YEET for 1000000 server load", Hero Icon String(Hero Of(
			Farthest Player From(Vector(0, 0, 0), All Teams))), Null, Null), Eye Position(Farthest Player From(Vector(0, 0, 0),
			All Teams)), 3, Do Not Clip, Visible To Position and String, White, Default Visibility);
		Wait(2, Ignore Condition);
		Unpause Match Time;
		Stop Camera(All Players(All Teams));
	}
}

disabled rule("the moderates scream moderately loud")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		disabled Or(Or(Has Status(Event Player, Asleep), Has Status(Event Player, Knocked Down)), Or(Has Status(Event Player, Frozen), Has Status(
			Event Player, Stunned))) == True;
	}
}

disabled rule("eliminate the center")
{
	event
	{
		Ongoing - Global;
	}
}

rule("[old reaper now roadhog] (sneaky) <strong> {you score on death, rather than on kill}")
{
	event
	{
		Player Died;
		All;
		Roadhog;
	}

	conditions
	{
		Attacker != Event Player;
	}

	actions
	{
		Modify Player Score(Event Player, 1);
		Modify Player Score(Attacker, -1.000);
	}
}

rule("[tracer] (obvious) <bad> {you die over and over GER style, until your killer has more score than you}")
{
	event
	{
		Player Died;
		All;
		Tracer;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Tracer);
		Score Of(Attacker) <= Score Of(Event Player);
		Is Game In Progress == True;
		Attacker != Event Player;
		Hero Of(Attacker) != Hero(Roadhog);
		Hero Of(Attacker) != Hero(Soldier: 76);
	}

	actions
	{
		Wait(0.100, Abort When False);
		Resurrect(Event Player);
		Set Status(Event Player, Null, Stunned, 0.500);
		Set Status(Event Player, Null, Phased Out, 0.500);
		Teleport(Event Player, Nearest Walkable Position(Vector(Random Integer(150, 250), Random Integer(5, 30), Random Integer(30,
			130))));
		Wait(0.500, Abort When False);
		Kill(Event Player, Attacker);
		Loop If Condition Is True;
		Small Message(Event Player, Custom String("thats part of tracer btw, not {0}", Hero Of(Attacker), Null, Null));
	}
}

rule("[old mercy] (hidden] <busted> {you can resurrect nearby dead enemies, and they are knocked down upon rez}")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mercy;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Mercy);
		Is Button Held(Event Player, Ability 2) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Play Effect(All Players(All Teams), Ring Explosion, Orange, Event Player, 5);
		Big Message(Remove From Array(Players Within Radius(Event Player, 5, All Teams, Off), All Living Players(All Teams)), String(
			"{0} {1}", Hero Icon String(Hero(Mercy)), String("Resurrect", Null, Null, Null), Null));
		Set Status(Remove From Array(Remove From Array(Players Within Radius(Event Player, 5, All Teams, Off), All Living Players(
			All Teams)), Event Player), Event Player, Knocked Down, 5);
		Resurrect(Remove From Array(Players Within Radius(Event Player, 5, All Teams, Off), Event Player));
		Set Ability 2 Enabled(Event Player, False);
		Wait(9, Ignore Condition);
		Set Ability 2 Enabled(Event Player, True);
	}
}

rule("[torbjorn] (noticeable) <busted> {hammer banishes people to the shadow realm}")
{
	event
	{
		Player Dealt Damage;
		All;
		Torbjörn;
	}

	conditions
	{
		Event Damage <= 55;
		Event Damage >= 50;
		Distance Between(Event Player, Victim) < 5;
		Is Alive(Victim) == True;
	}

	actions
	{
		Wait(0.100, Abort When False);
		Skip If(Compare(Has Status(Victim, Unkillable), ==, True), 1);
		Set Status(Victim, Null, Unkillable, 10);
		Start Accelerating(Victim, Up, 50, 500, To World, None);
		Wait(2, Ignore Condition);
		Teleport(Victim, World Vector Of(Vector(0, 20, 0), Victim, Rotation And Translation));
		Wait(2, Ignore Condition);
		Teleport(Victim, World Vector Of(Vector(0, 20, 0), Victim, Rotation And Translation));
		Wait(2, Ignore Condition);
		Teleport(Victim, World Vector Of(Vector(0, 20, 0), Victim, Rotation And Translation));
		Wait(1, Ignore Condition);
		Set Status(Victim, Null, Frozen, 5);
		Wait(3, Ignore Condition);
		Small Message(Victim, Custom String("eventually, {0} stopped thinking.", Hero Of(Victim), Null, Null));
		Clear Status(Victim, Unkillable);
		Wait(2, Ignore Condition);
		Stop Accelerating(Victim);
		Kill(Victim, Event Player);
		Wait(2, Ignore Condition);
		Skip If(Compare(Is Dead(Victim), ==, True), 1);
		Teleport(Victim, Nearest Walkable Position(Victim));
		Wait(5, Ignore Condition);
		Small Message(Event Player, Custom String("hammer attacc is bacc", Null, Null, Null));
	}
}

rule("[widow] (hidden) <busted> {stun anyone who attacks you during an emote} and stun scales with damage too")
{
	event
	{
		Player Took Damage;
		All;
		Widowmaker;
	}

	conditions
	{
		Player Variable(Event Player, WidowEmoteDetector) == 1;
	}

	actions
	{
		Wait(0.050, Ignore Condition);
		Damage(Attacker, Event Player, Multiply(Event Damage, 2));
		Set Status(Attacker, Event Player, Stunned, Add(Divide(Event Damage, 5), 1));
		Small Message(Event Player, Custom String("stun: {0} seconds", Add(Divide(Event Damage, 5), 1), Null, Null));
		Small Message(Attacker, Custom String("stun: {0} seconds", Add(Divide(Event Damage, 5), 1), Null, Null));
	}
}

rule("[bastion] (obvious) <average> {fly backward when you shoot}")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Firing Primary(Event Player) == True;
		Hero Of(Event Player) == Hero(Bastion);
	}

	actions
	{
		Apply Impulse(Event Player, Multiply(Facing Direction Of(Event Player), -1.000), 7, To World, Incorporate Contrary Motion);
		Wait(0.150, Abort When False);
		Loop;
	}
}

rule("[zenyatta] (noticeable) <average> {teleport ALL players to you when you ult, and root them} AND THEN GO BOOM")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zenyatta;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Hero Of(Event Player) == Hero(Zenyatta);
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Teleport(Remove From Array(All Living Players(All Teams), Event Player), Event Player);
		Set Status(All Living Players(All Teams), Event Player, Rooted, 7);
		Wait(5.500, Ignore Condition);
		Damage(Remove From Array(Players Within Radius(Event Player, 7, All Teams, Off), Event Player), Event Player, 600);
		Wait(1, Ignore Condition);
		Clear Status(Event Player, Stunned);
	}
}

rule("[genji] (noticeable) <strong> {za warudo! freeze all other players when you ult}")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Hero Of(Event Player) == Hero(Genji);
		Player Variable(Event Player, Genji2ndUlt) == 0;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Wait(0.100, Abort When False);
		Set Global Variable(genji_ult_detect_for_fix, 1);
		Heal(Event Player, Null, 1000);
		Set Status(Remove From Array(All Players(All Teams), Event Player), Event Player, Frozen, 7);
		Create Effect(All Players(All Teams), Sparkles, Turquoise, Event Player, 1, Position and Radius);
		Pause Match Time;
		Start Camera(Remove From Array(Remove From Array(All Players(All Teams), Players On Hero(Hero(Sombra), All Teams)),
			Players On Hero(Hero(Genji), All Teams)), Ray Cast Hit Position(Eye Position(Event Player), World Vector Of(Vector(8, 2.500,
			2), Closest Player To(Event Player, All Teams), Rotation And Translation), All Players(All Teams), Event Player, True),
			World Vector Of(Vector(0, 0, 2), Event Player, Rotation And Translation), 15);
		Wait(7, Ignore Condition);
		Stop Camera(Remove From Array(All Players(All Teams), Players On Hero(Hero(Sombra), All Teams)));
		Destroy Effect(Last Created Entity);
		Unpause Match Time;
		Set Global Variable(genji_ult_detect_for_fix, 0);
	}
}

rule("[roadhog old] (noticeable) <average> {reflect damage under 50}")
{
	event
	{
		Player Took Damage;
		All;
		Roadhog;
	}

	conditions
	{
		Event Damage < 50;
	}

	actions
	{
		Damage(Attacker, Event Player, Event Damage);
	}
}

rule("mccree  time slows at low hp")
{
	event
	{
		Player Took Damage;
		All;
		McCree;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Health(Event Player) < 41;
	}

	actions
	{
		Wait(0.100, Abort When False);
		Abort If(Compare(Player Variable(Event Player, mccree_once_per_life), ==, 1));
		Set Player Variable(Event Player, mccree_once_per_life, 1);
		Set Slow Motion(25);
		Set Status(Event Player, Null, Unkillable, 0.600);
		Create Effect(All Players(All Teams), Sparkles, Red, Event Player, 1, Position and Radius);
		Clear Status(Event Player, Asleep);
		Clear Status(Event Player, Knocked Down);
		Clear Status(Event Player, Frozen);
		Clear Status(Event Player, Stunned);
		Wait(0.600, Ignore Condition);
		Set Slow Motion(100);
		Clear Status(Event Player, Unkillable);
		Destroy Effect(Last Created Entity);
	}
}

rule("[junkrat] (noticeable) <average> {teleport nearby players to your total mayhem bombs after you die}")
{
	event
	{
		Player Died;
		All;
		Junkrat;
	}

	actions
	{
		Wait(0.450, Ignore Condition);
		Set Status(Remove From Array(Players Within Radius(Event Player, 8, All Teams, Surfaces), Event Player), Event Player, Rooted,
			0.500);
		Teleport(Players Within Radius(Event Player, 8, All Teams, Surfaces), Event Player);
	}
}

rule("soldier switches hero instead of dying. he thinks hes playing infection.")
{
	event
	{
		Player Took Damage;
		All;
		Soldier: 76;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Soldier: 76);
		Is Alive(Event Player) == True;
		Health(Event Player) < 5;
		Hero Of(Attacker) != Hero(Soldier: 76);
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero Of(Attacker));
		Modify Player Score(Attacker, 1);
		Wait(1, Ignore Condition);
		Stop Forcing Player To Be Hero(Event Player);
	}
}

rule("reinhardt 1v1s people in the sky")
{
	event
	{
		Player Dealt Damage;
		All;
		Reinhardt;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reinhardt);
		Is Alive(Event Player) == True;
		Is Alive(Victim) == True;
		Hero Of(Victim) != Hero(Reinhardt);
	}

	actions
	{
		Wait(0.100, Abort When False);
		Big Message(Victim, Custom String("{0} looks like youre going to the shadow realm {0}", Hero Icon String(Hero(Reinhardt)), Null,
			Null));
		Teleport(Event Player, Vector(200, 100, 80));
		Teleport(Victim, Vector(200, 100, 80));
		Disable Built-In Game Mode Respawning(Event Player);
		Disable Built-In Game Mode Respawning(Victim);
		Wait(10, Ignore Condition);
		Skip If(Compare(Is Dead(Victim), ==, True), 2);
		Skip If(Compare(Is Dead(Event Player), ==, True), 1);
		Wait(10, Ignore Condition);
		Respawn(Event Player);
		Respawn(Victim);
		Enable Built-In Game Mode Respawning(Event Player);
		Enable Built-In Game Mode Respawning(Victim);
		Skip If(Compare(Hero Of(Victim), !=, Hero(Brigitte)), 1);
		Teleport(Victim, Nearest Walkable Position(Position Of(Victim)));
	}
}

rule("[lucio] (noticeable) <weak> {go really fast and low gravity when you touch a wall}")
{
	event
	{
		Ongoing - Each Player;
		All;
		Lúcio;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Lúcio);
		Is On Wall(Event Player) == True;
	}

	actions
	{
		Set Move Speed(Event Player, 300);
		Set Gravity(Event Player, 30);
		Wait(3, Restart When True);
		Loop If Condition Is True;
		Set Move Speed(Event Player, 100);
		Set Gravity(Event Player, 100);
	}
}

rule("[dva] (hidden) <strong> {voice line puts people to sleep}")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	conditions
	{
		Is Communicating Any Voice line(Event Player) == True;
		Hero Of(Event Player) == Hero(D.Va);
		Is Alive(Event Player) == True;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Stunned) == False;
	}

	actions
	{
		Set Status(Remove From Array(Remove From Array(Players Within Radius(Event Player, 10, All Teams, Off), All Dead Players(
			All Teams)), Event Player), Event Player, Asleep, 8);
		Play Effect(All Players(All Teams), Ring Explosion, Sky Blue, Event Player, 8);
		Wait(10, Ignore Condition);
		Small Message(Event Player, Custom String("sleep is ready", Null, Null, Null));
		Loop If Condition Is True;
	}
}

rule("dva help hud text")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(D.Va);
	}

	actions
	{
		Create HUD Text(Event Player, Compare(Is Communicating Any Voice line(Event Player), ==, True), Custom String(
			"<- using voice line?", Null, Null, Null), Custom String("sleep has 10s CD", Null, Null, Null), Right, -6.000, Blue, Turquoise,
			White, String, Default Visibility);
		Set Player Variable(Event Player, dva_help_hud_text, Last Text ID);
	}
}

rule("not dva removes that text")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) != Hero(D.Va);
	}

	actions
	{
		Destroy HUD Text(Player Variable(Event Player, dva_help_hud_text));
	}
}

rule("ZENYATTA TWO] (sneaky) <average> {players hit by your gun have their aim messed up}")
{
	event
	{
		Player Dealt Damage;
		All;
		Zenyatta;
	}

	conditions
	{
		Global Variable(RNGvar) <= 4;
	}

	actions
	{
		Set Aim Speed(Victim, Random Integer(10, 50));
		Wait(1, Ignore Condition);
		Set Aim Speed(Victim, 100);
	}
}

rule("[ana] (hidden) <average> {every kill increases damage and DR by 25%, and 7% additively}")
{
	event
	{
		Player Dealt Final Blow;
		All;
		Ana;
	}

	conditions
	{
		Player Variable(Event Player, AnaHealth) < 70;
		Hero Of(Event Player) == Hero(Ana);
	}

	actions
	{
		Modify Player Variable(Event Player, AnaDamage, Add, 15);
		Modify Player Variable(Event Player, AnaHealth, Add, 3);
		Small Message(Event Player, Custom String("{0}% resist", Player Variable(Event Player, AnaHealth), Null, Null));
	}
}

rule("[brig] (noticeable) <average> {fall on ground instead of dying, but you reflect damage on the ground}")
{
	event
	{
		Player Died;
		All;
		Brigitte;
	}

	conditions
	{
		Hero Of(Attacker) != Hero(Soldier: 76);
		Hero Of(Attacker) != Hero(Ashe);
		Has Status(Event Player, Unkillable) == False;
		Hero Of(Event Player) == Hero(Brigitte);
	}

	actions
	{
		Skip If(Compare(Is Alive(Event Player), ==, True), 5);
		Wait(0.500, Ignore Condition);
		Resurrect(Event Player);
		Set Status(Event Player, Null, Unkillable, 0.100);
		Wait(0.100, Ignore Condition);
		Small Message(Event Player, Custom String("hold crouch to stay down", Null, Null, Null));
		Skip If(Compare(Player Variable(Event Player, BrigIsDown), ==, 1), 1);
		Damage(Event Player, Null, 240);
		Set Status(Event Player, Null, Unkillable, 2.500);
		Start Heal Over Time(Event Player, Event Player, 2.500, 50);
		Set Player Variable(Event Player, BrigIsDown, 1);
		Wait(2.500, Ignore Condition);
		Loop If(Compare(Is Button Held(Event Player, Crouch), ==, True));
		Skip If(Compare(Is Dead(Event Player), ==, True), 1);
		Loop If(Compare(Health(Event Player), <, 240));
		Set Player Variable(Event Player, BrigIsDown, 0);
	}
}

rule("[moira invis] (hidden) <strong> {become invisible while crouching}")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Moira);
		Is Crouching(Event Player) == True;
	}

	actions
	{
		Set Invisible(Event Player, All);
	}
}

rule("[hammond] (sneaky) <average> {get points for moving slowly and getting shot at, and also take really low dmg during it}")
{
	event
	{
		Player Took Damage;
		All;
		Wrecking Ball;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Wrecking Ball);
		Speed Of(Event Player) < 3;
	}

	actions
	{
		Modify Player Variable(Event Player, HammondDamageCharge, Add, Event Damage);
	}
}

rule("[ashe] (noticeable) <busted> {teleport to anyone you kill when they respawn}")
{
	event
	{
		Player Dealt Final Blow;
		All;
		Ashe;
	}

	conditions
	{
		Hero Of(Victim) != Hero(Tracer);
		Hero Of(Victim) != Hero(Brigitte);
		Hero Of(Victim) != Hero(Soldier: 76);
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Skip If(Is Alive(Victim), 11);
		Wait(1.500, Ignore Condition);
		Skip If(Is Alive(Victim), 9);
		Wait(1.500, Ignore Condition);
		Skip If(Is Alive(Victim), 7);
		Wait(1.500, Ignore Condition);
		Skip If(Is Alive(Victim), 5);
		Wait(1.500, Ignore Condition);
		Skip If(Is Alive(Victim), 3);
		Wait(1.500, Ignore Condition);
		Skip If(Is Alive(Victim), 1);
		Wait(1.500, Ignore Condition);
		Abort If(Compare(Is Dead(Victim), ==, True));
		Teleport(Event Player, Nearest Walkable Position(World Vector Of(Vector(0, 0, 2), Victim, Rotation And Translation)));
		Set Status(Victim, Event Player, Stunned, 1);
		Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Victim)), To World);
		Skip If(Compare(Random Integer(1, 4), !=, 4), 1);
		Small Message(Victim, Custom String("stop pressing spacebar", Null, Null, Null));
	}
}

rule("roadhog 2")
{
	event
	{
		Player Dealt Final Blow;
		All;
		Roadhog;
	}

	actions
	{
		Modify Player Score(Event Player, -1.000);
		Modify Player Score(Victim, 1);
	}
}

rule("old mercy fix")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) != Hero(Mercy);
	}

	actions
	{
		Set Ability 2 Enabled(Event Player, True);
	}
}

rule("widow sparkles 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Widowmaker;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Widowmaker);
		Is Communicating Any Emote(Event Player) == True;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Set Damage Received(Event Player, 25);
		Set Player Variable(Event Player, WidowEmoteDetector, 1);
		Skip If(Compare(Global Variable(RNGvar), <, 5), 1);
		Create Effect(All Players(All Teams), Sparkles, Aqua, Event Player, 1, Position and Radius);
		Skip If(Compare(Global Variable(RNGvar), !=, 4), 1);
		Create Effect(All Players(All Teams), Sparkles, Orange, Event Player, 1, Position and Radius);
		Skip If(Compare(Global Variable(RNGvar), !=, 3), 1);
		Create Effect(All Players(All Teams), Sparkles, Purple, Event Player, 1, Position and Radius);
		Skip If(Compare(Global Variable(RNGvar), !=, 2), 1);
		Create Effect(All Players(All Teams), Sparkles, Red, Event Player, 1, Position and Radius);
		Skip If(Compare(Global Variable(RNGvar), !=, 1), 1);
		Create Effect(All Players(All Teams), Sparkles, Green, Event Player, 1, Position and Radius);
		Set Player Variable(Event Player, widowsparklesthingy, Last Created Entity);
	}
}

rule("widow sparkles 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Widowmaker;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Widowmaker);
		Is Communicating Any Emote(Event Player) == False;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Destroy Effect(Player Variable(Event Player, widowsparklesthingy));
		Set Damage Received(Event Player, 100);
		Set Player Variable(Event Player, WidowEmoteDetector, 0);
	}
}

rule("genji 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Genji);
		Ultimate Charge Percent(Event Player) == 100;
		Has Status(Event Player, Frozen) == True;
		Is Button Held(Event Player, Ultimate) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Heal(Event Player, Event Player, 1000);
		Clear Status(Event Player, Frozen);
		Set Player Variable(Event Player, Genji2ndUlt, 1);
		Wait(0.100, Ignore Condition);
		Press Button(Event Player, Ultimate);
		Wait(8, Ignore Condition);
		Set Player Variable(Event Player, Genji2ndUlt, 0);
	}
}

rule("ana 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Ana);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Set Damage Dealt(Event Player, Add(75, Player Variable(Event Player, AnaDamage)));
		Set Damage Received(Event Player, Subtract(100, Player Variable(Event Player, AnaHealth)));
		Wait(2.500, Ignore Condition);
		Loop If Condition Is True;
		Set Player Variable(Event Player, AnaDamage, 0);
		Set Player Variable(Event Player, AnaHealth, 0);
		Set Damage Dealt(Event Player, 100);
		Set Damage Received(Event Player, 100);
	}
}

rule("brig 2")
{
	event
	{
		Player Took Damage;
		All;
		Brigitte;
	}

	conditions
	{
		Player Variable(Event Player, BrigIsDown) == 1;
		Hero Of(Event Player) == Hero(Brigitte);
	}

	actions
	{
		Damage(Attacker, Event Player, Event Damage);
	}
}

rule("invis cancel (moira)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Moira);
		Is Crouching(Event Player) == False;
	}

	actions
	{
		Set Invisible(Event Player, None);
	}
}

rule("hammond 2 (score stuff)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Wrecking Ball;
	}

	conditions
	{
		Player Variable(Event Player, HammondDamageCharge) >= 300;
		Hero Of(Event Player) == Hero(Wrecking Ball);
	}

	actions
	{
		Modify Player Score(Event Player, 1);
		Set Player Variable(Event Player, HammondDamageCharge, 1);
	}
}

rule("hammond 3 (hud text)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Wrecking Ball;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Wrecking Ball);
	}

	actions
	{
		Create HUD Text(Event Player, Player Variable(Event Player, HammondDamageCharge), Null, Null, Left, 0, White, White, White,
			Visible To and String, Default Visibility);
	}
}

rule("hammond 4 (effect when still on)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Wrecking Ball;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Wrecking Ball);
		Speed Of(Event Player) < 3;
	}

	actions
	{
		Set Damage Received(Event Player, 50);
		Start Heal Over Time(Event Player, Event Player, 10, Divide(Subtract(Max Health(Event Player), Health(Event Player)), 10));
	}
}

rule("hammond 5 (effect when still off)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Wrecking Ball;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Wrecking Ball);
		Speed Of(Event Player) > 3;
	}

	actions
	{
		Set Damage Received(Event Player, 100);
	}
}

rule("lucio thing")
{
	event
	{
		Ongoing - Each Player;
		All;
		Lúcio;
	}

	conditions
	{
		Is Communicating Any Emote(Event Player) == True;
		Hero Of(Event Player) == Hero(Lúcio);
	}

	actions
	{
		Set Status(Event Player, Null, Phased Out, 60);
		Play Effect(All Players(All Teams), Bad Explosion, Turquoise, Event Player, 1);
	}
}

rule("lucio thing 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Lúcio;
	}

	conditions
	{
		Is Communicating Any Emote(Event Player) == False;
		Hero Of(Event Player) == Hero(Lúcio);
	}

	actions
	{
		Clear Status(Event Player, Phased Out);
		Play Effect(All Players(All Teams), Bad Explosion, Turquoise, Event Player, 1);
	}
}

rule("bonus lucio again")
{
	event
	{
		Player Dealt Damage;
		All;
		Lúcio;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Lúcio);
		Event Damage == 25;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Apply Impulse(Victim, Down, 60, To World, Incorporate Contrary Motion);
	}
}

disabled rule("spawning in bots, for testing stuff")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player == Host Player;
		Is Button Held(Event Player, Interact) == True;
		Is Button Held(Event Player, Ultimate) == True;
		Is Button Held(Event Player, Jump) == True;
		Global Variable(BotFramework) == 1;
	}

	actions
	{
		Create Dummy Bot(Random Value In Array(All Heroes), All Teams, -1.000, Event Player, Up);
	}
}

disabled rule("kill all bots")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player == Host Player;
		Is Button Held(Event Player, Interact) == True;
		Is Button Held(Event Player, Ultimate) == True;
		Is Button Held(Event Player, Crouch) == True;
	}

	actions
	{
		Destroy All Dummy Bots;
	}
}

disabled rule("bot framework activate with host + slot 11 + interact + voice line")
{
	event
	{
		Ongoing - Each Player;
		All;
		Slot 11;
	}

	conditions
	{
		Event Player == Host Player;
		Is Communicating Any Voice line(Event Player) == True;
		Is Button Held(Event Player, Interact) == True;
	}

	actions
	{
		Set Global Variable(BotFramework, 1);
	}
}

disabled rule("bot controls primary fire")
{
	event
	{
		Ongoing - Each Player;
		All;
		Slot 11;
	}

	conditions
	{
		Event Player == Host Player;
		Global Variable(BotFramework) == 1;
		Is Button Held(Event Player, Interact) == True;
		Is Button Held(Event Player, Primary Fire) == True;
	}

	actions
	{
		Start Holding Button(Closest Player To(Event Player, All Teams), Primary Fire);
	}
}

disabled rule("bot controls cancel primary")
{
	event
	{
		Ongoing - Each Player;
		All;
		Slot 11;
	}

	conditions
	{
		Event Player == Host Player;
		Global Variable(BotFramework) == 1;
		Is Button Held(Event Player, Interact) == True;
		Is Button Held(Event Player, Primary Fire) == False;
	}

	actions
	{
		Stop Holding Button(Closest Player To(Event Player, All Teams), Primary Fire);
	}
}

disabled rule("bot controls secondary fire")
{
	event
	{
		Ongoing - Each Player;
		All;
		Slot 11;
	}

	conditions
	{
		Event Player == Host Player;
		Global Variable(BotFramework) == 1;
		Is Button Held(Event Player, Interact) == True;
		Is Button Held(Event Player, Secondary Fire) == True;
	}

	actions
	{
		Start Holding Button(Closest Player To(Event Player, All Teams), Secondary Fire);
	}
}

disabled rule("bot controls cancel secondary")
{
	event
	{
		Ongoing - Each Player;
		All;
		Slot 11;
	}

	conditions
	{
		Event Player == Host Player;
		Global Variable(BotFramework) == 1;
		Is Button Held(Event Player, Interact) == True;
		Is Button Held(Event Player, Secondary Fire) == False;
	}

	actions
	{
		Stop Holding Button(Closest Player To(Event Player, All Teams), Secondary Fire);
	}
}

disabled rule("bot controls ability 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Slot 11;
	}

	conditions
	{
		Event Player == Host Player;
		Global Variable(BotFramework) == 1;
		Is Button Held(Event Player, Interact) == True;
		Is Button Held(Event Player, Ability 1) == True;
	}

	actions
	{
		Press Button(Closest Player To(Event Player, All Teams), Ability 1);
	}
}

disabled rule("bot controls ability 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Slot 11;
	}

	conditions
	{
		Event Player == Host Player;
		Global Variable(BotFramework) == 1;
		Is Button Held(Event Player, Interact) == True;
		Is Button Held(Event Player, Ability 2) == True;
	}

	actions
	{
		Press Button(Closest Player To(Event Player, All Teams), Ability 2);
	}
}

disabled rule("bot controls ultimate")
{
	event
	{
		Ongoing - Each Player;
		All;
		Slot 11;
	}

	conditions
	{
		Event Player == Host Player;
		Global Variable(BotFramework) == 1;
		Is Button Held(Event Player, Interact) == True;
		Is Button Held(Event Player, Ultimate) == True;
	}

	actions
	{
		Press Button(Closest Player To(Event Player, All Teams), Ultimate);
	}
}

disabled rule("bot controls jump")
{
	event
	{
		Ongoing - Each Player;
		All;
		Slot 11;
	}

	conditions
	{
		Event Player == Host Player;
		Global Variable(BotFramework) == 1;
		Is Button Held(Event Player, Interact) == True;
		Is Button Held(Event Player, Jump) == True;
	}

	actions
	{
		Press Button(Closest Player To(Event Player, All Teams), Jump);
	}
}

disabled rule("bot controls crouch")
{
	event
	{
		Ongoing - Each Player;
		All;
		Slot 11;
	}

	conditions
	{
		Event Player == Host Player;
		Global Variable(BotFramework) == 1;
		Is Button Held(Event Player, Interact) == True;
		Is Button Held(Event Player, Crouch) == True;
	}

	actions
	{
		Start Holding Button(Closest Player To(Event Player, All Teams), Crouch);
	}
}

disabled rule("bot controls cancel crouch")
{
	event
	{
		Ongoing - Each Player;
		All;
		Slot 11;
	}

	conditions
	{
		Event Player == Host Player;
		Global Variable(BotFramework) == 1;
		Is Button Held(Event Player, Interact) == True;
		Is Button Held(Event Player, Crouch) == False;
	}

	actions
	{
		Stop Holding Button(Closest Player To(Event Player, All Teams), Crouch);
	}
}

rule("super hanzo effects")
{
	event
	{
		Ongoing - Each Player;
		All;
		Hanzo;
	}

	conditions
	{
		Player Variable(Event Player, HanzoGodmode) == 1;
	}

	actions
	{
		Resurrect(Event Player);
		Set Damage Received(Event Player, 10);
		Set Damage Dealt(Event Player, 200);
		Small Message(All Players(All Teams), Custom String("super hanzo has arrived", Null, Null, Null));
		Create Icon(Remove From Array(All Players(All Teams), Event Player), World Vector Of(Vector(0, 2, 0), Event Player,
			Rotation And Translation), Exclamation Mark, Visible To and Position, Red, True);
		Set Player Variable(Event Player, hanzo_icon, Last Created Entity);
		Wait(60, Ignore Condition);
		Preload Hero(Event Player, Global Variable(HeroBeforeHanzo));
		Wait(1, Ignore Condition);
		Set Player Variable(Event Player, HanzoGodmode, 0);
		Set Damage Dealt(Event Player, 100);
		Set Damage Received(Event Player, 100);
		Destroy Icon(Player Variable(Event Player, hanzo_icon));
		Set Player Allowed Heroes(Event Player, Remove From Array(All Heroes, Hero(Hanzo)));
		Wait(0.250, Ignore Condition);
		Reset Player Hero Availability(Event Player);
		Small Message(All Players(All Teams), Custom String("super hanzo is gone", Null, Null, Null));
	}
}

rule("super hanzo trigger")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Global Variable(HanzoGodmodeChecker) == 0;
		Total Time Elapsed > 150;
		Total Time Elapsed < 480;
		Score Of(Event Player) > 1;
		Score Of(Event Player) < 15;
		Hero Of(Event Player) != Hero(Brigitte);
	}

	actions
	{
		Set Player Variable(Event Player, HanzoGodmodeRNG, Random Integer(1, 30));
		Abort If(Compare(Player Variable(Event Player, HanzoGodmodeRNG), !=, 30));
		Set Player Variable(Event Player, HanzoGodmode, 1);
		Set Global Variable(HanzoGodmodeChecker, 1);
		Set Global Variable(HeroBeforeHanzo, Hero Of(Event Player));
		Preload Hero(Event Player, Hero(Hanzo));
		Wait(0.250, Ignore Condition);
		Set Player Allowed Heroes(Event Player, Hero(Hanzo));
	}
}

rule("[baptiste] (hidden) <weak> {teleport people to you if they use ANY voice comms}")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating Any(Event Player) == True;
		Hero Of(Event Player) != Hero(Baptiste);
	}

	actions
	{
		Set Global Variable(newbaptargeter, Event Player);
	}
}

rule("bap hud icon")
{
	event
	{
		Ongoing - Each Player;
		All;
		Baptiste;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Baptiste);
	}

	actions
	{
		Create HUD Text(Event Player, String("{0}: {1}", Hero Icon String(Hero Of(Global Variable(newbaptargeter))), Custom String(
			"target:", Null, Null, Null), Null), Null, Custom String("secondary fire to teleport them", Null, Null, Null), Top, 4, Yellow,
			White, White, Visible To and String, Default Visibility);
		Set Player Variable(Event Player, bap_hud_icon, Last Text ID);
	}
}

rule("bap teleport")
{
	event
	{
		Ongoing - Each Player;
		All;
		Baptiste;
	}

	conditions
	{
		Global Variable(newbaptargeter) != 0;
		Hero Of(Event Player) == Hero(Baptiste);
		Is Button Held(Event Player, Secondary Fire) == True;
		Player Variable(Event Player, IsInHouse) == 0;
	}

	actions
	{
		Teleport(Global Variable(newbaptargeter), Nearest Walkable Position(World Vector Of(Vector(0, 0, 2), Event Player,
			Rotation And Translation)));
		Big Message(Global Variable(newbaptargeter), Custom String("{0} teleported {0}", Hero Icon String(Hero(Baptiste)), Null, Null));
		Set Global Variable(newbaptargeter, 0);
	}
}

rule("sym teleports self and friends to kill room")
{
	event
	{
		Ongoing - Each Player;
		All;
		Symmetra;
	}

	conditions
	{
		Is Crouching(Event Player) == True;
		Hero Of(Event Player) == Hero(Symmetra);
		Is Button Held(Event Player, Interact) == False;
	}

	actions
	{
		Play Effect(All Players(All Teams), Ring Explosion, Blue, Event Player, 3);
		Big Message(Players Within Radius(Event Player, 3, All Teams, Surfaces), Custom String("{0} teleported {0}", Hero Icon String(Hero(
			Symmetra)), Null, Null));
		Set Status(Remove From Array(Players Within Radius(Event Player, 3, All Teams, Off), Event Player), Event Player, Stunned, 2);
		Teleport(Remove From Array(Players Within Radius(Event Player, 3, All Teams, Off), Event Player), Vector(204, 2.400, 95));
		Teleport(Event Player, Vector(206, 1, 93));
		Wait(1, Ignore Condition);
	}
}

rule("mei gun is actually explosions")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mei;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Mei);
		Is Button Held(Event Player, Secondary Fire) == True;
		Is Alive(Event Player) == True;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Stunned) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
	}

	actions
	{
		Set Player Variable(Event Player, MeiBlastTargeter, Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(
			Event Player), Multiply(Facing Direction Of(Event Player), 40)), All Players(All Teams), Event Player, True));
		Play Effect(All Players(All Teams), Ring Explosion, Yellow, Player Variable(Event Player, MeiBlastTargeter), 3);
		Wait(0.500, Ignore Condition);
		Play Effect(All Players(All Teams), Bad Explosion, Red, Player Variable(Event Player, MeiBlastTargeter), 5);
		Play Effect(All Players(All Teams), Explosion Sound, White, Player Variable(Event Player, MeiBlastTargeter), 5);
		Damage(Players Within Radius(Player Variable(Event Player, MeiBlastTargeter), 3, All Teams, Surfaces And Enemy Barriers),
			Event Player, 55);
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("mei block explodes thing")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mei;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) == Hero(Mei);
	}

	actions
	{
		Damage(Players Within Radius(Event Player, 8, All Teams, Off), Event Player, 15);
		Play Effect(All Players(All Teams), Ring Explosion, Orange, Event Player, 8);
		Play Effect(All Players(All Teams), Explosion Sound, White, Event Player, 8);
		Wait(0.400, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("mercy \"healing juice\" go down")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mercy;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Mercy);
		Is Firing Primary(Event Player) == True;
	}

	actions
	{
		Chase Player Variable At Rate(Event Player, MercyJuice, 0, 1.500, Destination and Rate);
	}
}

rule("mercy juice up")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mercy;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Mercy);
		Is Firing Primary(Event Player) == False;
	}

	actions
	{
		Chase Player Variable At Rate(Event Player, MercyJuice, 10, 1, Destination and Rate);
	}
}

rule("mercy juice visual indicator")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mercy;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Mercy);
	}

	actions
	{
		Create HUD Text(Event Player, Custom String("mercy juice: {0}", Player Variable(Event Player, MercyJuice), Null, Null), Null,
			Custom String("drains 1.5 per second", Null, Null, Null), Right, 5, Orange, White, White, Visible To and String,
			Default Visibility);
	}
}

rule("cancel mercy juice indicator")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) != Hero(Mercy);
	}

	actions
	{
		Destroy HUD Text(Last Text ID);
	}
}

rule("hammond cancel resist on switch and also now cancel portals")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) != Hero(Wrecking Ball);
	}

	actions
	{
		Set Damage Received(Event Player, 100);
		Set Player Variable(Event Player, portal_gun_blue, 0);
		Set Player Variable(Event Player, portal_gun_orange, 0);
		Destroy Effect(Player Variable(Event Player, blueportalring));
		Destroy Effect(Player Variable(Event Player, orangeportalring));
	}
}

rule("new tracer idea brainstorming YOSHIKAGE KIRA DAISAN NO BAKUDAN")
{
	event
	{
		Player Dealt Damage;
		All;
		Tracer;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Tracer);
		Event Damage > 20;
		Event Damage < 35;
		Event Was Critical Hit == False;
	}

	actions
	{
		Small Message(Event Player, Custom String("marked", Null, Null, Null));
		Small Message(Victim, Custom String("marked", Null, Null, Null));
		Set Player Variable(Victim, MarkedForTracerExplosion, Event Player);
	}
}

rule("tracer kira 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Player Variable(Event Player, MarkedForTracerExplosion)) == Hero(Tracer);
		Is Using Ability 2(Player Variable(Event Player, MarkedForTracerExplosion)) == True;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Play Effect(All Players(All Teams), Bad Explosion, Turquoise, Event Player, 5);
		Damage(Players Within Radius(Event Player, 5, All Teams, Surfaces And Enemy Barriers), Player Variable(Event Player,
			MarkedForTracerExplosion), Subtract(Multiply(Max Health(Event Player), 1.500), 175));
		Set Player Variable(Event Player, MarkedForTracerExplosion, 0);
	}
}

rule("more stuff for genji crouch in mid air (*teleports behind u* nothin personnel, kid)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Genji);
		Is In Air(Event Player) == True;
		Is Button Held(Event Player, Crouch) == True;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Stunned) == False;
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Interact) == False;
		Player Variable(Player Closest To Reticle(Event Player, All Teams), IsInHouse) == 0;
		Global Variable(genji_ult_detect_for_fix) == 0;
	}

	actions
	{
		Play Effect(All Players(All Teams), Good Explosion, Lime Green, Event Player, 2);
		Big Message(Player Closest To Reticle(Event Player, All Teams), Custom String("*teleprots behind u*", Null, Null, Null));
		Teleport(Event Player, World Vector Of(Vector(0, 0.300, -2.000), Player Closest To Reticle(Event Player, All Teams),
			Rotation And Translation));
		Play Effect(All Players(All Teams), Good Explosion, Lime Green, Event Player, 2);
		Set Facing(Event Player, Backward, To Player);
		Wait(4, Ignore Condition);
	}
}

rule("new sombra camera thing press f on hacked people to use")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sombra;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Sombra);
		Is Button Held(Event Player, Interact) == True;
		Player Variable(Event Player, SombraSpyTarget) != 0;
		Has Status(Player Variable(Event Player, SombraSpyTarget), Hacked) == True;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Start Forcing Player To Be Hero(Event Player, Hero(Sombra));
		Play Effect(All Players(All Teams), Bad Explosion, Purple, Event Player, 2);
		Start Camera(Event Player, World Vector Of(Vector(0, 1, -1.000), Player Variable(Event Player, SombraSpyTarget),
			Rotation And Translation), Add(Player Variable(Event Player, SombraSpyTarget), Vector(0, 1, 0)), 100);
		Set Status(Event Player, Null, Phased Out, 245);
		Set Status(Event Player, Null, Stunned, 245);
		Set Invisible(Event Player, Enemies);
		Create Effect(All Players(All Teams), Sphere, Purple, World Vector Of(Vector(0, 1, -1.500), Player Variable(Event Player,
			SombraSpyTarget), Rotation And Translation), 0.200, Position and Radius);
		Set Player Variable(Event Player, SombraCameraOrb, Last Created Entity);
		Set Player Variable(Event Player, SombraTimeInSpy, 60);
		Chase Player Variable At Rate(Event Player, SombraTimeInSpy, 0, 1, Destination and Rate);
		Create HUD Text(Event Player, String("{0}: {1}", String("Time", Null, Null, Null), Player Variable(Event Player, SombraTimeInSpy),
			Null), Null, Null, Left, 5, Purple, White, White, Visible To and String, Default Visibility);
		Wait(0.250, Ignore Condition);
		Small Message(Player Variable(Event Player, SombraSpyTarget), Hero Icon String(Hero(Sombra)));
		Wait(60, Ignore Condition);
		Stop Camera(Event Player);
		Clear Status(Event Player, Stunned);
		Destroy Effect(Player Variable(Event Player, SombraCameraOrb));
		Destroy HUD Text(Last Text ID);
		Teleport(Event Player, Nearest Walkable Position(World Vector Of(Vector(0, 1, -3.000), Player Variable(Event Player,
			SombraSpyTarget), Rotation And Translation)));
		Wait(1, Ignore Condition);
		Set Invisible(Event Player, None);
		Clear Status(Event Player, Phased Out);
		Wait(1, Ignore Condition);
		Stop Forcing Player To Be Hero(Event Player);
	}
}

rule("sombra select target for camera")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sombra;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Sombra);
		Is Button Held(Event Player, Interact) == True;
		Has Status(Player Closest To Reticle(Event Player, All Teams), Hacked) == True;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Set Player Variable(Event Player, SombraSpyTarget, Player Closest To Reticle(Event Player, All Teams));
		Small Message(Event Player, Custom String("marked {0}", Player Variable(Event Player, SombraSpyTarget), Null, Null));
		Set Player Variable(Player Closest To Reticle(Event Player, All Teams), SombraSpying, Event Player);
	}
}

rule("sombra spy target shares points")
{
	event
	{
		Player Dealt Final Blow;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, SombraSpying) != 0;
		Player Variable(Player Variable(Event Player, SombraSpying), SombraSpyTarget) == Event Player;
		Has Status(Player Variable(Event Player, SombraSpying), Phased Out) == True;
		Hero Of(Victim) != Hero(Tracer);
	}

	actions
	{
		Modify Player Score(Player Variable(Event Player, SombraSpying), 1);
	}
}

rule("sombra mark turns off if sombra select new person")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, SombraSpying) != 0;
		Player Variable(Player Variable(Event Player, SombraSpying), SombraSpyTarget) != Event Player;
	}

	actions
	{
		Wait(0.200, Ignore Condition);
		Set Player Variable(Event Player, SombraSpying, 0);
	}
}

rule("new sombra superpower stuff HACK WAVE")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sombra;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Sombra);
		Has Status(Event Player, Phased Out) == True;
		Is Button Held(Event Player, Primary Fire) == True;
	}

	actions
	{
		Damage(Remove From Array(Players Within Radius(Player Variable(Event Player, SombraSpyTarget), 10, All Teams, Off),
			Player Variable(Event Player, SombraSpyTarget)), Event Player, 25);
		Set Status(Remove From Array(Players Within Radius(Player Variable(Event Player, SombraSpyTarget), 10, All Teams, Off),
			Player Variable(Event Player, SombraSpyTarget)), Event Player, Hacked, 6);
		Play Effect(All Players(All Teams), Ring Explosion, Purple, World Vector Of(Vector(0, 1, -1.000), Player Variable(Event Player,
			SombraSpyTarget), Rotation And Translation), 10);
		Play Effect(All Players(All Teams), Good Explosion, Purple, World Vector Of(Vector(0, 1, -1.500), Player Variable(Event Player,
			SombraSpyTarget), Rotation And Translation), 1);
		Wait(7, Ignore Condition);
	}
}

rule("new sombra superpower stuff MAGIC SHIELD")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sombra;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Sombra);
		Has Status(Event Player, Phased Out) == True;
		Is Button Held(Event Player, Secondary Fire) == True;
	}

	actions
	{
		Set Status(Player Variable(Event Player, SombraSpyTarget), Event Player, Phased Out, 3);
		Play Effect(All Players(All Teams), Good Explosion, Purple, World Vector Of(Vector(0, 1, -1.500), Player Variable(Event Player,
			SombraSpyTarget), Rotation And Translation), 1);
		Start Heal Over Time(Player Variable(Event Player, SombraSpyTarget), Event Player, 3, 40);
		Play Effect(All Players(All Teams), Buff Impact Sound, White, Player Variable(Event Player, SombraSpyTarget), 2);
		Create Effect(All Players(All Teams), Sphere, Purple, Player Variable(Event Player, SombraSpyTarget), 1.600, Position and Radius);
		Set Player Variable(Event Player, another_sombra_bubble, Last Created Entity);
		Wait(3, Ignore Condition);
		Destroy Effect(Player Variable(Event Player, another_sombra_bubble));
		Wait(7, Ignore Condition);
	}
}

rule("orisa checks your vibe")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Orisa);
		Is Using Ability 1(Event Player) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Small Message(Players Within Radius(Event Player, 10, All Teams, Off), Custom String("vibe check", Null, Null, Null));
		Set Status(Players Within Radius(Event Player, 10, All Teams, Off), Event Player, Rooted, 3.250);
		Play Effect(All Players(All Teams), Ring Explosion, White, Event Player, 10);
		Wait(3, Abort When False);
		Skip If(Compare(Random Integer(1, 2), ==, 1), 5);
		Small Message(Players Within Radius(Event Player, 10, All Teams, Off), Custom String("you failed the vibe check", Null, Null,
			Null));
		Wait(0.250, Ignore Condition);
		Play Effect(All Players(All Teams), Bad Explosion, Sky Blue, Event Player, 10);
		Damage(Remove From Array(Players Within Radius(Event Player, 15, All Teams, Off), Event Player), Event Player, 10000);
		Abort;
		Small Message(Players Within Radius(Event Player, 10, All Teams, Off), Custom String("you passed the vibe check", Null, Null,
			Null));
		Wait(0.250, Ignore Condition);
		Kill(Event Player, Null);
	}
}

rule("walmart doomfist walmart doomfist (he does the big buff selling for points)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Doomfist;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Doomfist);
		Is Button Held(Event Player, Interact) == True;
		Player Variable(Event Player, DoomfistIsInWalmartMode) == 0;
		Is Alive(Event Player) == True;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Stunned) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
	}

	actions
	{
		Wait(1, Abort When False);
		Small Message(Event Player, Custom String("(you ARE the shop, try to advertise in chat)", Null, Null, Null));
		Set Player Variable(Event Player, DoomfistIsInWalmartMode, 1);
		Set Player Variable(Event Player, DoomfistWalmartCircleBlue, World Vector Of(Vector(-4.000, 0, 0), Event Player,
			Rotation And Translation));
		Set Player Variable(Event Player, DoomfistWalmartCircleRed, World Vector Of(Vector(4, 0, 0), Event Player,
			Rotation And Translation));
		Create Effect(All Players(All Teams), Ring, Red, Player Variable(Event Player, DoomfistWalmartCircleBlue), 2, Visible To);
		Set Player Variable(Event Player, DFredcirclevisual, Last Created Entity);
		Create Effect(All Players(All Teams), Ring, Blue, Player Variable(Event Player, DoomfistWalmartCircleRed), 2, Visible To);
		Set Player Variable(Event Player, DFbluecirclevisual, Last Created Entity);
		Create In-World Text(All Players(All Teams), Custom String("double hp for 60 seconds. 1 score cost (f = buy)", Null, Null, Null),
			Player Variable(Event Player, DoomfistWalmartCircleRed), 1, Clip Against Surfaces, Visible To and String, Red,
			Default Visibility);
		Set Player Variable(Event Player, DFredtext, Last Text ID);
		Create In-World Text(All Players(All Teams), Custom String("instant ultimate to 100% 2 score cost (f = buy)", Null, Null, Null),
			Player Variable(Event Player, DoomfistWalmartCircleBlue), 1, Clip Against Surfaces, Visible To and String, Blue,
			Default Visibility);
		Set Player Variable(Event Player, DFbluetext, Last Text ID);
		Set Status(Event Player, Null, Phased Out, 9999);
		Set Status(Event Player, Null, Stunned, 9999);
		Teleport(Event Player, Nearest Walkable Position(World Vector Of(Vector(0, 0, -5.000), Event Player, Rotation And Translation)));
		Start Camera(Event Player, World Vector Of(Vector(0, 7, 0), Event Player, Rotation And Translation), World Vector Of(Vector(0, 1,
			5), Event Player, Rotation And Translation), 0);
		Set Invisible(Event Player, Enemies);
	}
}

rule("doomfist walmart mode turns off")
{
	event
	{
		Ongoing - Each Player;
		All;
		Doomfist;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Doomfist);
		Is Button Held(Event Player, Interact) == True;
		Player Variable(Event Player, DoomfistIsInWalmartMode) == 1;
	}

	actions
	{
		Wait(1.250, Abort When False);
		Set Player Variable(Event Player, DoomfistIsInWalmartMode, 0);
		Set Player Variable(Event Player, DoomfistWalmartCircleBlue, 0);
		Set Player Variable(Event Player, DoomfistWalmartCircleRed, 0);
		Destroy Effect(Player Variable(Event Player, DFredcirclevisual));
		Destroy Effect(Player Variable(Event Player, DFbluecirclevisual));
		Destroy In-World Text(Player Variable(Event Player, DFredtext));
		Destroy In-World Text(Player Variable(Event Player, DFbluetext));
		Set Status(Event Player, Null, Knocked Down, 2.500);
		Wait(0.750, Ignore Condition);
		Stop Camera(Event Player);
		Clear Status(Event Player, Phased Out);
		Clear Status(Event Player, Stunned);
		Set Invisible(Event Player, None);
	}
}

rule("red circle")
{
	event
	{
		Ongoing - Each Player;
		All;
		Doomfist;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Doomfist);
		Player Variable(Event Player, DoomfistIsInWalmartMode) == True;
		Distance Between(Player Variable(Event Player, DoomfistWalmartCircleRed), Closest Player To(Player Variable(Event Player,
			DoomfistWalmartCircleRed), All Teams)) < 2;
		Is Button Held(Closest Player To(Player Variable(Event Player, DoomfistWalmartCircleRed), All Teams), Interact) == True;
		Player Variable(Closest Player To(Player Variable(Event Player, DoomfistWalmartCircleRed), All Teams), DoomfistDoubleHPBuff) == 0;
		Closest Player To(Player Variable(Event Player, DoomfistWalmartCircleRed), All Teams) != Event Player;
		Score Of(Closest Player To(Player Variable(Event Player, DoomfistWalmartCircleRed), All Teams)) > 0;
	}

	actions
	{
		Modify Player Score(Event Player, 1);
		Modify Player Score(Closest Player To(Player Variable(Event Player, DoomfistWalmartCircleRed), All Teams), -1.000);
		Set Player Variable(Closest Player To(Player Variable(Event Player, DoomfistWalmartCircleRed), All Teams), DoomfistDoubleHPBuff,
			1);
	}
}

rule("red buff effects (double hp)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, DoomfistDoubleHPBuff) == 1;
	}

	actions
	{
		Set Max Health(Event Player, 200);
		Wait(60, Ignore Condition);
		Set Player Variable(Event Player, DoomfistDoubleHPBuff, 0);
		Set Max Health(Event Player, 100);
	}
}

rule("blue circle")
{
	event
	{
		Ongoing - Each Player;
		All;
		Doomfist;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Doomfist);
		Player Variable(Event Player, DoomfistIsInWalmartMode) == True;
		Distance Between(Player Variable(Event Player, DoomfistWalmartCircleBlue), Closest Player To(Player Variable(Event Player,
			DoomfistWalmartCircleBlue), All Teams)) < 2;
		Is Button Held(Closest Player To(Player Variable(Event Player, DoomfistWalmartCircleBlue), All Teams), Interact) == True;
		Player Variable(Closest Player To(Player Variable(Event Player, DoomfistWalmartCircleBlue), All Teams), DoomfistBuffStunOnFirstHit)
			== 0;
		Closest Player To(Player Variable(Event Player, DoomfistWalmartCircleBlue), All Teams) != Event Player;
		Score Of(Closest Player To(Player Variable(Event Player, DoomfistWalmartCircleRed), All Teams)) > 1;
	}

	actions
	{
		Modify Player Score(Event Player, 2);
		Modify Player Score(Closest Player To(Player Variable(Event Player, DoomfistWalmartCircleBlue), All Teams), -2.000);
		Set Ultimate Charge(Closest Player To(Player Variable(Event Player, DoomfistWalmartCircleBlue), All Teams), 100);
		Wait(60, Ignore Condition);
	}
}

rule("new widow thing")
{
	event
	{
		Ongoing - Each Player;
		All;
		Widowmaker;
	}

	conditions
	{
		Is Communicating Any(Event Player) == True;
		Hero Of(Event Player) == Hero(Widowmaker);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Set Player Variable(Filtered Array(Remove From Array(Players Within Radius(Event Player, 15, All Teams,
			Surfaces And Enemy Barriers), Event Player), Compare(Is In View Angle(Event Player, Current Array Element, 90), ==, False)),
			lennyface, Event Player);
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("new widow thing 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, lennyface) != 0;
	}

	actions
	{
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), World Vector Of(Vector(0, 1, 0), Player Variable(
			Event Player, lennyface), Rotation And Translation)), 360, To World, Direction and Turn Rate);
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
		Stop Facing(Event Player);
		Set Player Variable(Event Player, lennyface, 0);
	}
}

rule("new widow thing cancel")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, lennyface) != 0;
		Is In View Angle(Player Variable(Event Player, lennyface), Event Player, 90) == True;
	}

	actions
	{
		Set Player Variable(Event Player, lennyface, 0);
	}
}

rule("new widow thing cancel 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, lennyface) != 0;
		Array Contains(Players Within Radius(Player Variable(Event Player, lennyface), 15, All Teams, Surfaces And Enemy Barriers),
			Event Player) == False;
	}

	actions
	{
		Set Player Variable(Event Player, lennyface, 0);
	}
}

rule("odm gear left side activate (hanzo gets the ODM gear)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Primary Fire) == True;
		Hero Of(Event Player) == Hero(Hanzo);
		Player Variable(Event Player, HanzoGodmode) == 0;
	}

	actions
	{
		Set Player Variable(Event Player, odm1targeter, Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player),
			Multiply(World Vector Of(Vector(0.600, Multiply(Vertical Facing Angle Of(Event Player), -0.020), 1), Event Player, Rotation),
			32)), All Players(All Teams), Event Player, True));
		Abort If(Compare(Distance Between(Event Player, Player Variable(Event Player, odm1targeter)), >, 30));
		Set Player Variable(Event Player, IsUsingLeftODM, 1);
		Create Beam Effect(All Players(All Teams), Grapple Beam, Event Player, Player Variable(Event Player, odm1targeter), White,
			Position and Radius);
		Set Player Variable(Event Player, odm1beam, Last Created Entity);
	}
}

rule("odm gear left side deactivate")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Primary Fire) == False;
		Hero Of(Event Player) == Hero(Hanzo);
		Player Variable(Event Player, HanzoGodmode) == 0;
	}

	actions
	{
		Set Player Variable(Event Player, odm1targeter, 0);
		Destroy Effect(Player Variable(Event Player, odm1beam));
		Set Player Variable(Event Player, IsUsingLeftODM, 0);
	}
}

rule("odm gear left side movement")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, IsUsingLeftODM) == 1;
		Speed Of(Event Player) < 30;
		Player Variable(Event Player, odm1targeter) != 0;
		Hero Of(Event Player) == Hero(Hanzo);
		Player Variable(Event Player, HanzoGodmode) == 0;
		Distance Between(Event Player, Player Variable(Event Player, odm1targeter)) > 5;
	}

	actions
	{
		Apply Impulse(Event Player, Direction Towards(Event Player, Player Variable(Event Player, odm1targeter)), 4, To World,
			Incorporate Contrary Motion);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("odm gear right side activate")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Secondary Fire) == True;
		Hero Of(Event Player) == Hero(Hanzo);
		Player Variable(Event Player, HanzoGodmode) == 0;
	}

	actions
	{
		Set Player Variable(Event Player, odm2targeter, Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player),
			Multiply(World Vector Of(Vector(-0.600, Multiply(Vertical Facing Angle Of(Event Player), -0.020), 1), Event Player, Rotation),
			32)), All Players(All Teams), Event Player, True));
		Abort If(Compare(Distance Between(Event Player, Player Variable(Event Player, odm2targeter)), >, 30));
		Set Player Variable(Event Player, IsUsingRightODM, 1);
		Create Beam Effect(All Players(All Teams), Grapple Beam, Event Player, Player Variable(Event Player, odm2targeter), White,
			Position and Radius);
		Set Player Variable(Event Player, odm2beam, Last Created Entity);
	}
}

rule("odm gear right side deactivate")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Secondary Fire) == False;
		Hero Of(Event Player) == Hero(Hanzo);
		Player Variable(Event Player, HanzoGodmode) == 0;
	}

	actions
	{
		Set Player Variable(Event Player, odm2targeter, 0);
		Destroy Effect(Player Variable(Event Player, odm2beam));
		Set Player Variable(Event Player, IsUsingRightODM, 0);
	}
}

rule("odm gear right side movement")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, IsUsingRightODM) == 1;
		Speed Of(Event Player) < 30;
		Player Variable(Event Player, odm2targeter) != 0;
		Hero Of(Event Player) == Hero(Hanzo);
		Player Variable(Event Player, HanzoGodmode) == 0;
		Distance Between(Event Player, Player Variable(Event Player, odm2targeter)) > 5;
	}

	actions
	{
		Apply Impulse(Event Player, Direction Towards(Event Player, Player Variable(Event Player, odm2targeter)), 4, To World,
			Incorporate Contrary Motion);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("kore ga requiem da (tracer)")
{
	event
	{
		Player Died;
		All;
		Tracer;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Tracer);
		Add(Score Of(Attacker), 6) == Score Of(Event Player);
		Is Game In Progress == True;
		Attacker != Event Player;
		Hero Of(Attacker) != Hero(Roadhog);
	}

	actions
	{
		Small Message(Event Player, Custom String("this is... requiem", Null, Null, Null));
		Small Message(Attacker, Custom String("this is... requiem", Null, Null, Null));
	}
}

rule("old dance party, but its a virus that spreads across the entire map lmao")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, DANCE_PARTY) == 1;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Skip If(Compare(Is Communicating Any Emote(Event Player), ==, True), 5);
		Set Status(Event Player, Null, Knocked Down, 0.001);
		Apply Impulse(Event Player, Down, 1, To World, Cancel Contrary Motion);
		Teleport(Event Player, Nearest Walkable Position(Event Player));
		Wait(0.100, Ignore Condition);
		Communicate(Event Player, Emote Up);
		Wait(0.500, Ignore Condition);
		Set Player Variable(Event Player, DANCE_PARTY, 0);
		Abort If(Compare(Is Communicating Any Emote(Event Player), ==, False));
		Play Effect(All Players(All Teams), Ring Explosion, Yellow, Event Player, 20);
		Damage(Filtered Array(Remove From Array(Players Within Radius(Event Player, 20, All Teams, Off), Event Player), Compare(Is Alive(
			Event Player), ==, True)), Event Player, 1);
		Set Player Variable(Remove From Array(Filtered Array(Players Within Radius(Event Player, 20, All Teams, Off), Compare(Is Alive(
			Current Array Element), ==, True)), Event Player), DANCE_PARTY, 1);
		Wait(1, Ignore Condition);
	}
}

rule("trigger dance party (moira)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Moira);
		Is Communicating Any Emote(Event Player) == True;
	}

	actions
	{
		Wait(0.500, Abort When False);
		Set Player Variable(Event Player, DANCE_PARTY, 1);
	}
}

rule("brig 3 (3 and 4 turn knocked down on or off with variable)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Brigitte;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Brigitte);
		Player Variable(Event Player, BrigIsDown) == 1;
	}

	actions
	{
		Set Status(Event Player, Null, Knocked Down, 999);
	}
}

rule("brig 4")
{
	event
	{
		Ongoing - Each Player;
		All;
		Brigitte;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Brigitte);
		Player Variable(Event Player, BrigIsDown) != 1;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Clear Status(Event Player, Knocked Down);
	}
}

disabled rule("scrapped dead effect turn on")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reaper);
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Secondary Fire) == True;
		Player Variable(Event Player, reaper_new) == 0;
	}

	actions
	{
		Set Player Variable(Event Player, reaper_new, 1);
		Disable Built-In Game Mode Respawning(Event Player);
		Kill(Event Player, Null);
		Wait(5, Ignore Condition);
	}
}

disabled rule("scrapped dead effect turn off")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reaper);
		Is Button Held(Event Player, Secondary Fire) == False;
		Player Variable(Event Player, reaper_new) == 1;
	}

	actions
	{
		Set Player Variable(Event Player, reaper_new, 0);
		Resurrect(Event Player);
		Enable Built-In Game Mode Respawning(Event Player);
		Wait(5, Ignore Condition);
	}
}

disabled rule("scrapped dead effect effect")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reaper);
		Player Variable(Event Player, reaper_new) == 1;
		Is Dead(Event Player) == True;
	}

	actions
	{
		Wait(2, Abort When False);
		Teleport(Event Player, Eye Position(Event Player));
		Loop If Condition Is True;
	}
}

rule("ashe to brig exception")
{
	event
	{
		Player Died;
		All;
		Brigitte;
	}

	conditions
	{
		Hero Of(Attacker) == Hero(Ashe);
		Has Status(Event Player, Unkillable) == False;
	}

	actions
	{
		Skip If(Compare(Is Alive(Event Player), ==, True), 5);
		Wait(2.500, Ignore Condition);
		Respawn(Event Player);
		Wait(0.100, Ignore Condition);
		Damage(Event Player, Null, 240);
		Teleport(Attacker, Nearest Walkable Position(World Vector Of(Vector(0, 0, 2), Event Player, Rotation And Translation)));
		Set Status(Event Player, Null, Unkillable, 2.500);
		Start Heal Over Time(Event Player, Event Player, 2.500, 50);
		Set Player Variable(Event Player, BrigIsDown, 1);
		Wait(2.500, Ignore Condition);
		Skip If(Compare(Is Dead(Event Player), ==, True), 1);
		Loop If(Compare(Health(Event Player), <, 240));
		Set Player Variable(Event Player, BrigIsDown, 0);
		Set Player Variable(Event Player, brig_ashe_exception, Attacker);
	}
}

rule("brig 5 (ashe exception)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Brigitte;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Brigitte);
		Player Variable(Event Player, brig_ashe_exception) != 0;
	}

	actions
	{
		Set Status(Event Player, Player Variable(Event Player, brig_ashe_exception), Stunned, 3);
		Start Damage Modification(Event Player, Remove From Array(All Players(All Teams), Player Variable(Event Player,
			brig_ashe_exception)), 0, None);
		Wait(3, Ignore Condition);
		Stop Damage Modification(Last Damage Modification ID);
		Set Player Variable(Event Player, brig_ashe_exception, 0);
	}
}

rule("teleport to sniper place")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(180.500, 9.170, 64)) < 3;
		Is Button Held(Event Player, Jump) == True;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Play Effect(All Players(All Teams), Good Explosion, White, Event Player, 1);
		Teleport(Event Player, Vector(174.500, 31.300, 72.200));
		Set Status(Event Player, Null, Rooted, 2);
		Big Message(Remove From Array(Players Within Radius(Event Player, 8, All Teams, Off), Event Player), Custom String(
			"{0} someone entered the tower {0}", Hero Icon String(Hero Of(Event Player)), Null, Null));
	}
}

rule("cellar door teleport")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(200.500, 9.300, 90)) < 3;
		Is Button Held(Event Player, Jump) == True;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Play Effect(All Players(All Teams), Good Explosion, White, Event Player, 1);
		Teleport(Event Player, Vector(204, 2.400, 95));
		Abort If(Compare(Hero Of(Event Player), ==, Hero(Symmetra)));
		Big Message(Players On Hero(Hero(Symmetra), All Teams), Custom String("{0} backdoor intruder {0}", Hero Icon String(Hero Of(
			Event Player)), Null, Null));
	}
}

rule("zen gun thing but for rngvar 5-8")
{
	event
	{
		Player Dealt Damage;
		All;
		Zenyatta;
	}

	conditions
	{
		Global Variable(RNGvar) >= 5;
	}

	actions
	{
		Set Aim Speed(Victim, Random Integer(200, 1000));
		Wait(1, Ignore Condition);
		Set Aim Speed(Victim, 100);
	}
}

rule("zen gun 1-4")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, pretend_gtav) == 0;
		Is Button Held(Event Player, Primary Fire) == True;
		Is Button Held(Event Player, Secondary Fire) == False;
		Is Button Held(Event Player, Interact) == True;
		Is Button Held(Event Player, Ability 1) == False;
		Is Button Held(Event Player, Ability 2) == True;
		Is Button Held(Event Player, Jump) == True;
		Is Button Held(Event Player, Crouch) == False;
		Is Button Held(Event Player, Ultimate) == False;
		Global Variable(tester_var) == 0;
		Is Game In Progress == True;
		Event Player != Host Player;
	}

	actions
	{
		Wait(1, Abort When False);
		Set Player Variable(Event Player, pretend_gtav, 1);
	}
}

rule("zen gun fix")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, pretend_gtav) == 1;
		Is Button Held(Event Player, Primary Fire) == False;
		Is Button Held(Event Player, Secondary Fire) == False;
		Is Button Held(Event Player, Interact) == False;
		Is Button Held(Event Player, Ability 1) == True;
		Is Button Held(Event Player, Ability 2) == True;
		Is Button Held(Event Player, Jump) == False;
		Is Button Held(Event Player, Crouch) == True;
		Is Button Held(Event Player, Ultimate) == True;
		Global Variable(tester_var) == 0;
	}

	actions
	{
		Wait(1, Abort When False);
		Set Player Variable(Event Player, pretend_gtav, 2);
	}
}

rule("bap fix 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, pretend_gtav) == 2;
		Is Button Held(Event Player, Primary Fire) == True;
		Is Button Held(Event Player, Secondary Fire) == True;
		Is Button Held(Event Player, Interact) == False;
		Is Button Held(Event Player, Ability 1) == False;
		Is Button Held(Event Player, Ability 2) == False;
		Is Button Held(Event Player, Jump) == True;
		Is Button Held(Event Player, Crouch) == True;
		Is Button Held(Event Player, Ultimate) == False;
		Global Variable(tester_var) == 0;
	}

	actions
	{
		Wait(1, Abort When False);
		Set Player Variable(Event Player, pretend_gtav, 3);
	}
}

rule("bap fix 3")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, pretend_gtav) == 3;
		Is Button Held(Event Player, Primary Fire) == False;
		Is Button Held(Event Player, Secondary Fire) == True;
		Is Button Held(Event Player, Interact) == True;
		Is Button Held(Event Player, Ability 1) == True;
		Is Button Held(Event Player, Ability 2) == False;
		Is Button Held(Event Player, Jump) == False;
		Is Button Held(Event Player, Crouch) == False;
		Is Button Held(Event Player, Ultimate) == True;
		Global Variable(tester_var) == 0;
	}

	actions
	{
		Wait(1, Abort When False);
		Set Player Variable(Event Player, pretend_gtav, 5);
		Set Global Variable(tester_var, Event Player);
		Small Message(Event Player, Custom String("cheats activated", Null, Null, Null));
		Create Effect(All Players(All Teams), Cloud, White, Event Player, 2, Visible To);
		Create Effect(All Players(All Teams), Sparkles, White, Event Player, 2, Visible To);
		Create Effect(All Players(All Teams), Good Aura, White, Event Player, 2, Visible To);
		Set Status(Event Player, Null, Invincible, 9999);
		Set Player Score(Event Player, 11);
	}
}

rule("testvar = 1")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(tester_var) != 0;
		Vertical Facing Angle Of(Global Variable(tester_var)) >= 85;
		Is Button Held(Global Variable(tester_var), Crouch) == True;
		Is Button Held(Global Variable(tester_var), Interact) == True;
		Is Alive(Global Variable(tester_var)) == True;
	}

	actions
	{
		Wait(2, Abort When False);
		Teleport(Host Player, Vector(10000, 1000, 10000));
		Set Status(Host Player, Null, Knocked Down, 9999);
		Set Gravity(Host Player, 0);
		Apply Impulse(Host Player, Up, 0.500, To World, Cancel Contrary Motion);
		Big Message(All Players(All Teams), Custom String("the host has been yeeted", Null, Null, Null));
		Set Player Variable(Host Player, the_host_has_been_yeeted, 1);
	}
}

rule("wacky junkrat do uncharacteristic thing 1!")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junkrat;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Junkrat);
		Is Crouching(Event Player) == True;
		Player Variable(Event Player, junkrat_being_wacky) == 0;
		Is Button Held(Event Player, Interact) == False;
	}

	actions
	{
		Wait(1, Abort When False);
		Set Status(Event Player, Null, Frozen, 9999);
		Set Player Variable(Event Player, junkrat_being_wacky, 1);
	}
}

rule("wacky junkrat do uncharacteristic thing 2!")
{
	event
	{
		Player Took Damage;
		All;
		Junkrat;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Junkrat);
		Player Variable(Event Player, junkrat_being_wacky) == 1;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Clear Status(Event Player, Frozen);
		Set Player Variable(Event Player, junkrat_being_wacky, 0);
		Wait(0.100, Ignore Condition);
		Abort If(Compare(Is Alive(Event Player), ==, False));
		Heal(Event Player, Null, 1000);
		Set Status(Attacker, Event Player, Stunned, 1);
		Set Status(Event Player, Null, Invincible, 1);
		Start Damage Modification(Attacker, Event Player, 1000, None);
		Create In-World Text(Attacker, Custom String("nae-nae'd", Null, Null, Null), Position Of(Event Player), 1, Clip Against Surfaces,
			String, Orange, Default Visibility);
		Wait(0.100, Ignore Condition);
		Teleport(Event Player, World Vector Of(Vector(0, 0, -2.000), Attacker, Rotation And Translation));
		Set Facing(Event Player, Direction Towards(Event Player, Attacker), To World);
		Play Effect(All Players(All Teams), Bad Explosion, Red, Event Player, 2);
		Wait(0.100, Ignore Condition);
		Press Button(Event Player, Primary Fire);
		Play Effect(All Players(All Teams), Bad Explosion, Orange, Event Player, 2);
		Wait(0.100, Ignore Condition);
		Play Effect(All Players(All Teams), Bad Explosion, Yellow, Event Player, 2);
		Wait(0.100, Ignore Condition);
		Play Effect(All Players(All Teams), Bad Explosion, Lime Green, Event Player, 2);
		Wait(0.100, Ignore Condition);
		Play Effect(All Players(All Teams), Bad Explosion, Green, Event Player, 2);
		Wait(0.100, Ignore Condition);
		Play Effect(All Players(All Teams), Bad Explosion, Turquoise, Event Player, 2);
		Wait(0.100, Ignore Condition);
		Play Effect(All Players(All Teams), Bad Explosion, Blue, Event Player, 2);
		Wait(0.100, Ignore Condition);
		Wait(1, Ignore Condition);
		Stop Damage Modification(Last Damage Modification ID);
	}
}

rule("stop being wacky")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junkrat;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Junkrat);
		Player Variable(Event Player, junkrat_being_wacky) == 1;
		Is Button Held(Event Player, Crouch) == True;
		Has Status(Event Player, Invincible) == False;
	}

	actions
	{
		Wait(2, Abort When False);
		Clear Status(Event Player, Frozen);
		Set Player Variable(Event Player, junkrat_being_wacky, 0);
	}
}

rule("new pharah (reverse gravity)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Pharah);
	}

	actions
	{
		Set Gravity(Event Player, 0);
	}
}

rule("new pharah grav cancel on switch")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) != Hero(Pharah);
	}

	actions
	{
		Set Gravity(Event Player, 100);
		Stop Accelerating(Event Player);
		Wait(10, Abort When False);
		Stop Accelerating(Event Player);
		Set Gravity(Event Player, 100);
	}
}

rule("new pharah reversed ability 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Pharah);
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Apply Impulse(Event Player, Down, 30, To World, Cancel Contrary Motion);
		Wait(4, Ignore Condition);
	}
}

rule("new pharah reversed boosters")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Pharah);
		Is Button Held(Event Player, Secondary Fire) == True;
	}

	actions
	{
		Stop Accelerating(Event Player);
		Start Accelerating(Event Player, Down, 16, 8, To World, None);
	}
}

rule("new pharah reversed boosters cancel")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Pharah);
		Is Button Held(Event Player, Secondary Fire) == False;
	}

	actions
	{
		Stop Accelerating(Event Player);
		Start Accelerating(Event Player, Up, 10, 20, To World, None);
	}
}

rule("reinhardt very fast")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reinhardt);
		Is In Air(Event Player) == True;
		Is Button Held(Event Player, Jump) == True;
	}

	actions
	{
		Apply Impulse(Event Player, Forward, 15, To Player, Cancel Contrary Motion);
	}
}

rule("brute-force respawn")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dead(Event Player) == True;
	}

	actions
	{
		Wait(20, Abort When False);
		Enable Built-In Game Mode Respawning(Event Player);
		Teleport(Event Player, Vector(200, 40, 80));
		Kill(Event Player, Null);
		Wait(3, Abort When False);
		Respawn(Event Player);
		Wait(3, Abort When False);
		Resurrect(Event Player);
	}
}

rule("workaround for doomfist stun turning off")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, DoomfistIsInWalmartMode) == 1;
		Has Status(Event Player, Knocked Down) == False;
	}

	actions
	{
		Wait(3, Abort When False);
		Set Status(Event Player, Null, Knocked Down, 9999);
	}
}

rule("workaround for doomfist stun turning on")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, DoomfistIsInWalmartMode) == 0;
	}

	actions
	{
		Wait(3, Abort When False);
		Clear Status(Event Player, Knocked Down);
	}
}

rule("new hint script ------------------------------------<<<<<<<<<<<<<<<<<< very important keep updated or people will be confused")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Group Up) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Set Player Variable(Event Player, HeroDetectorForHintCircle, Hero Of(Event Player));
		Wait(0.250, Ignore Condition);
		Skip If(Compare(Player Variable(Event Player, HeroDetectorForHintCircle), !=, Hero(Lúcio)), 3);
		Small Message(Event Player, Custom String("very fast wallride, obviously {0}", Hero Icon String(Hero(Lúcio)), Null, Null));
		Wait(2.500, Ignore Condition);
		Small Message(Event Player, Custom String("but also, your boops spike people after a second, and emoting dodges things {0}",
			Hero Icon String(Hero(Lúcio)), Null, Null));
		Skip If(Compare(Player Variable(Event Player, HeroDetectorForHintCircle), !=, Hero(Ana)), 1);
		Small Message(Event Player, Custom String("your stats increases (25%/7% damage/resist) with each kill, but reset when you die {0}",
			Hero Icon String(Hero(Ana)), Null, Null));
		Skip If(Compare(Player Variable(Event Player, HeroDetectorForHintCircle), !=, Hero(Ashe)), 1);
		Small Message(Event Player, Custom String(
			"you teleport to anyone you kill if they manually (spacebar) respawn, and it stuns them. {0}", Hero Icon String(Hero(Ashe)),
			Null, Null));
		Skip If(Compare(Player Variable(Event Player, HeroDetectorForHintCircle), !=, Hero(Baptiste)), 3);
		Small Message(Event Player, Custom String("when people use any comms, you can rightclick to teleport them to you {0}",
			Hero Icon String(Hero(Baptiste)), Null, Null));
		Wait(2.500, Ignore Condition);
		Small Message(Event Player, Custom String("also, if you have the highest score, the match ends super fast {0}", Hero Icon String(
			Hero(Baptiste)), Null, Null));
		Skip If(Compare(Player Variable(Event Player, HeroDetectorForHintCircle), !=, Hero(Brigitte)), 1);
		Small Message(Event Player, Custom String("when you die you just land on the ground and reflect damage until you heal {0}",
			Hero Icon String(Hero(Brigitte)), Null, Null));
		Skip If(Compare(Player Variable(Event Player, HeroDetectorForHintCircle), !=, Hero(D.Va)), 1);
		Small Message(Event Player, Custom String("voice line to sleep people, crouch on sleeping people to steal their points {0}",
			Hero Icon String(Hero(D.Va)), Null, Null));
		Skip If(Compare(Player Variable(Event Player, HeroDetectorForHintCircle), !=, Hero(McCree)), 1);
		Small Message(Event Player, Custom String("if you hit below 40 hp, time slows down so you can aim {0}", Hero Icon String(Hero(
			McCree)), Null, Null));
		Skip If(Compare(Player Variable(Event Player, HeroDetectorForHintCircle), !=, Hero(Doomfist)), 1);
		Small Message(Event Player, Custom String(
			"hold F (/interact) to enter/exit shop mode. you get the score players spend on buffs {0}", Hero Icon String(Hero(Doomfist)),
			Null, Null));
		Skip If(Compare(Player Variable(Event Player, HeroDetectorForHintCircle), !=, Hero(Genji)), 1);
		Small Message(Event Player, Custom String(
			"your ult freezes everything (except ulting genjis) crouch in midair to teleport behind people {0}", Hero Icon String(Hero(
			Genji)), Null, Null));
		Skip If(Compare(Player Variable(Event Player, HeroDetectorForHintCircle), !=, Hero(Hanzo)), 1);
		Small Message(Event Player, Custom String("left and right click shoot grapples out that you can move with {0}", Hero Icon String(
			Hero(Hanzo)), Null, Null));
		Skip If(Compare(Player Variable(Event Player, HeroDetectorForHintCircle), !=, Hero(Junkrat)), 3);
		Small Message(Event Player, Custom String("when you die people nearby teleport into your bombs {0}", Hero Icon String(Hero(
			Junkrat)), Null, Null));
		Wait(2.500, Ignore Condition);
		Small Message(Event Player, Custom String("also, holding crouch activates wacky attack (a counter attack) {0}", Hero Icon String(
			Hero(Junkrat)), Null, Null));
		Skip If(Compare(Player Variable(Event Player, HeroDetectorForHintCircle), !=, Hero(Mei)), 1);
		Small Message(Event Player, Custom String("your rightclick is explosions and your ice block shoots waves of death {0}",
			Hero Icon String(Hero(Mei)), Null, Null));
		Skip If(Compare(Player Variable(Event Player, HeroDetectorForHintCircle), !=, Hero(Mercy)), 3);
		Small Message(Event Player, Custom String(
			"mercy has two abilities: the first lets her rez dead people and leave them knocked down {0}", Hero Icon String(Hero(Mercy)),
			Null, Null));
		Wait(2.500, Ignore Condition);
		Small Message(Event Player, Custom String("the second ability keeps people stunned if you heal beam them. {0}", Hero Icon String(
			Hero(Mercy)), Null, Null));
		Skip If(Compare(Player Variable(Event Player, HeroDetectorForHintCircle), !=, Hero(Moira)), 1);
		Small Message(Event Player, Custom String("emote party virus, emote to start it. crouch to go invis {0}", Hero Icon String(Hero(
			Moira)), Null, Null));
		Skip If(Compare(Player Variable(Event Player, HeroDetectorForHintCircle), !=, Hero(Orisa)), 1);
		Small Message(Event Player, Custom String("fortify to check everyone's vibe and potentially explode {0}", Hero Icon String(Hero(
			Orisa)), Null, Null));
		Skip If(Compare(Player Variable(Event Player, HeroDetectorForHintCircle), !=, Hero(Pharah)), 1);
		Small Message(Event Player, Custom String("your gravity and jets are reversed and kills teleport you to your victim {0}",
			Hero Icon String(Hero(Pharah)), Null, Null));
		Skip If(Compare(Player Variable(Event Player, HeroDetectorForHintCircle), !=, Hero(Reaper)), 1);
		Small Message(Event Player, Custom String(
			"rightclick poisons people nearby, if they fall (like after jumping) they take damage {0}", Hero Icon String(Hero(Reaper)),
			Null, Null));
		Skip If(Compare(Player Variable(Event Player, HeroDetectorForHintCircle), !=, Hero(Reinhardt)), 1);
		Small Message(Event Player, Custom String("any damage you deal starts a skybox duel. jump in the air to go faster {0}",
			Hero Icon String(Hero(Reinhardt)), Null, Null));
		Skip If(Compare(Player Variable(Event Player, HeroDetectorForHintCircle), !=, Hero(Roadhog)), 1);
		Small Message(Event Player, Custom String(
			"kills and deaths have reversed effects on your score. also, you reflect damage under 50 {0}", Hero Icon String(Hero(Roadhog)),
			Null, Null));
		Skip If(Compare(Player Variable(Event Player, HeroDetectorForHintCircle), !=, Hero(Sigma)), 1);
		Small Message(Event Player, Custom String("Lshift is also psychokinesis, flick your camera to and from your target {0}",
			Hero Icon String(Hero(Sigma)), Null, Null));
		Skip If(Compare(Player Variable(Event Player, HeroDetectorForHintCircle), !=, Hero(Soldier: 76)), 1);
		Small Message(Event Player, Custom String(
			"soldier switches hero instead of dying or killing. he thinks hes playing infection. {0}", Hero Icon String(Hero(Soldier: 76)),
			Null, Null));
		Skip If(Compare(Player Variable(Event Player, HeroDetectorForHintCircle), !=, Hero(Sombra)), 3);
		Small Message(Event Player, Custom String(
			"hold f to hide inside hacked players. if the person youre watching gets a kill you get one too {0}", Hero Icon String(Hero(
			Sombra)), Null, Null));
		Wait(2.500, Ignore Condition);
		Small Message(Event Player, Custom String(
			"also, you can press leftclick during this to send a hack wave, and rightclick to shield them  {0}", Hero Icon String(Hero(
			Sombra)), Null, Null));
		Skip If(Compare(Player Variable(Event Player, HeroDetectorForHintCircle), !=, Hero(Symmetra)), 1);
		Small Message(Event Player, Custom String("you can crouch to teleport yourself and anyone close to the barred cellar {0}",
			Hero Icon String(Hero(Symmetra)), Null, Null));
		Skip If(Compare(Player Variable(Event Player, HeroDetectorForHintCircle), !=, Hero(Torbjörn)), 1);
		Small Message(Event Player, Custom String("wouldnt you like to know, dwarfy boy? {0}", Hero Icon String(Hero(Torbjörn)), Null,
			Null));
		Skip If(Compare(Player Variable(Event Player, HeroDetectorForHintCircle), !=, Hero(Tracer)), 3);
		Small Message(Event Player, Custom String("melee marks people for explosion, recall triggers it. {0}", Hero Icon String(Hero(
			Tracer)), Null, Null));
		Wait(2.500, Ignore Condition);
		Small Message(Event Player, Custom String(
			"also, you will die a lot of times if the person who kills you has a lower score than you {0}", Hero Icon String(Hero(Tracer)),
			Null, Null));
		Skip If(Compare(Player Variable(Event Player, HeroDetectorForHintCircle), !=, Hero(Widowmaker)), 3);
		Small Message(Event Player, Custom String("emoting makes you resist damage, and stun attackers, and reflect damage {0}",
			Hero Icon String(Hero(Widowmaker)), Null, Null));
		Wait(2.500, Ignore Condition);
		Small Message(Event Player, Custom String("also, any comms (including emote) force anyone behind you to look at you {0}",
			Hero Icon String(Hero(Widowmaker)), Null, Null));
		Skip If(Compare(Player Variable(Event Player, HeroDetectorForHintCircle), !=, Hero(Winston)), 1);
		Small Message(Event Player, Custom String(
			"winston talks about his passion for fire trucks and moster trucks in his ultimate. walter. {0}", Hero Icon String(Hero(
			Winston)), Null, Null));
		Skip If(Compare(Player Variable(Event Player, HeroDetectorForHintCircle), !=, Hero(Wrecking Ball)), 3);
		Small Message(Event Player, Custom String(
			"if you arent moving, the damage you take converts into points. you also get heals when stop {0}", Hero Icon String(Hero(
			Wrecking Ball)), Null, Null));
		Wait(2.500, Ignore Condition);
		Small Message(Event Player, Custom String("also leftclick is now a portal gun. colors alternate automatically {0}",
			Hero Icon String(Hero(Wrecking Ball)), Null, Null));
		Skip If(Compare(Player Variable(Event Player, HeroDetectorForHintCircle), !=, Hero(Zarya)), 1);
		Small Message(Event Player, Custom String("projected barrier works on enemies, it stuns them and makes them invincible {0}",
			Hero Icon String(Hero(Zarya)), Null, Null));
		Skip If(Compare(Player Variable(Event Player, HeroDetectorForHintCircle), !=, Hero(Zenyatta)), 1);
		Small Message(Event Player, Custom String(
			"ult teleports everyone to you and roots them, then kills them. also any damage messes up peoples' aim {0}", Hero Icon String(
			Hero(Zenyatta)), Null, Null));
		Skip If(Compare(Player Variable(Event Player, HeroDetectorForHintCircle), !=, Hero(Bastion)), 1);
		Small Message(Event Player, Custom String(
			"emote to use the torture dance, friends can join in the kill. also you have huge recoil {0}", Hero Icon String(Hero(Bastion)),
			Null, Null));
		Wait(2, Ignore Condition);
	}
}

rule("afk detector")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == False;
		Entity Exists(Event Player) == True;
	}

	actions
	{
		Wait(90, Abort When False);
		Create In-World Text(All Players(All Teams), Custom String("{0} is afk", Event Player, Null, Null), Vector(200, Random Integer(2,
			30), 80), 1, Do Not Clip, Visible To and String, Sky Blue, Default Visibility);
	}
}

rule("why do you want to reset the world, baptiste?")
{
	event
	{
		Ongoing - Each Player;
		All;
		Baptiste;
	}

	conditions
	{
		Score Of(Event Player) > 10;
		Score Of(Event Player) > Score Of(Last Of(Sorted Array(Remove From Array(All Players(All Teams), Event Player), Score Of(
			Current Array Element))));
		Is Game In Progress == True;
		Total Time Elapsed > 60;
		Global Variable(worldendingplayer) == 0;
		Hero Of(Event Player) == Hero(Baptiste);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Wait(5, Abort When False);
		Big Message(All Players(All Teams), Custom String("baptiste is going to end the world!", Null, Null, Null));
		Create Icon(All Players(All Teams), World Vector Of(Vector(0, 5, 0), Event Player, Rotation And Translation), Warning,
			Visible To and Position, Orange, True);
		Set Player Variable(Event Player, bap_ending_icon, Last Created Entity);
		Wait(25, Abort When False);
		Set Global Variable(worldendingplayer, Event Player);
		Set Global Variable(closestplayerto, Closest Player To(Event Player, All Teams));
	}
}

rule("fortnite.")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(worldendingplayer) != 0;
	}

	actions
	{
		Resurrect(All Dead Players(All Teams));
		Wait(0.100, Ignore Condition);
		Set Status(All Players(All Teams), Null, Stunned, 20);
		Start Camera(All Living Players(All Teams), Global Variable(camerapos), Global Variable(cameratarget), 0);
		Set Global Variable(camerapos, Ray Cast Hit Position(Global Variable(closestplayerto), World Vector Of(Vector(0, 1.500, 2),
			Global Variable(closestplayerto), Rotation And Translation), All Players(All Teams), Global Variable(closestplayerto), True));
		Set Global Variable(cameratarget, Eye Position(Global Variable(closestplayerto)));
		Communicate(Global Variable(closestplayerto), Voice Line Up);
		Set Global Variable(AnsweringQuestion, 1);
		Create In-World Text(All Players(All Teams), Custom String("{0}: why do you want to reset the world?", Hero Icon String(Hero Of(
			Global Variable(closestplayerto))), Null, Null), Global Variable(closestplayerto), 3, Do Not Clip, Visible To and String,
			White, Default Visibility);
		Set Global Variable(thetextidforthatquestion, Last Text ID);
		Wait(5, Ignore Condition);
		Destroy In-World Text(Last Text ID);
		Chase Global Variable Over Time(cameratarget, Eye Position(Global Variable(worldendingplayer)), 1, None);
		Set Global Variable(camerapos, Ray Cast Hit Position(Global Variable(worldendingplayer), World Vector Of(Vector(0, 1.500, 2),
			Global Variable(worldendingplayer), Rotation And Translation), All Players(All Teams), Global Variable(worldendingplayer),
			True));
		Wait(1, Ignore Condition);
		Skip If(Compare(Global Variable(telltale_answer), !=, 1), 1);
		Create In-World Text(All Players(All Teams), Custom String("{0}: fortnite", Hero Icon String(Hero Of(Global Variable(
			worldendingplayer))), Null, Null), Global Variable(worldendingplayer), 3, Do Not Clip, Visible To and String, White,
			Default Visibility);
		Skip If(Compare(Global Variable(telltale_answer), !=, 2), 1);
		Create In-World Text(All Players(All Teams), Custom String("{0}: because im in the lead, duh", Hero Icon String(Hero Of(
			Global Variable(worldendingplayer))), Null, Null), Global Variable(worldendingplayer), 3, Do Not Clip, Visible To and String,
			White, Default Visibility);
		Skip If(Compare(Global Variable(telltale_answer), !=, 3), 1);
		Create In-World Text(All Players(All Teams), Custom String("{0}: we need to make a new world without anime", Hero Icon String(
			Hero Of(Global Variable(worldendingplayer))), Null, Null), Global Variable(worldendingplayer), 3, Do Not Clip,
			Visible To and String, White, Default Visibility);
		Skip If(Compare(Global Variable(telltale_answer), !=, 4), 1);
		Create In-World Text(All Players(All Teams), Custom String("{0}: ...", Hero Icon String(Hero Of(Global Variable(
			worldendingplayer))), Null, Null), Global Variable(worldendingplayer), 3, Do Not Clip, Visible To and String, White,
			Default Visibility);
		Wait(5, Ignore Condition);
		Destroy In-World Text(Global Variable(thetextidforthatquestion));
		Clear Status(All Players(All Teams), Stunned);
		Stop Camera(All Players(All Teams));
		Set Global Variable(WORLDisENDING, 1);
		Create HUD Text(All Players(All Teams), Custom String("{0} this world is ending {0}", Icon String(Arrow: Down), Null, Null), Null,
			Null, Top, -1.000, White, White, White, Visible To and String, Default Visibility);
	}
}

rule("telltale games simulator")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(AnsweringQuestion) == 1;
	}

	actions
	{
		Small Message(Global Variable(worldendingplayer), Custom String("hold W, A, or D", Null, Null, Null));
		Create HUD Text(Global Variable(worldendingplayer), Custom String("HOLD ONLY ONE", Null, Null, Null), Null, Custom String(
			"{0}: fortnite {1}: im winning {2}: to remove anime", Icon String(Arrow: Left), Icon String(Arrow: Up), Icon String(
			Arrow: Right)), Top, 5, Red, White, Red, Visible To and String, Default Visibility);
		Set Global Variable(telltale_answer, 4);
		Wait(5.500, Ignore Condition);
		Clear Status(Global Variable(worldendingplayer), Stunned);
		Wait(0.100, Ignore Condition);
		Set Status(Global Variable(worldendingplayer), Null, Stunned, 10);
		Skip If(Compare(Throttle Of(Global Variable(worldendingplayer)), !=, Vector(1, 0, 0)), 1);
		Set Global Variable(telltale_answer, 1);
		Skip If(Compare(Throttle Of(Global Variable(worldendingplayer)), !=, Vector(0, 0, 1)), 1);
		Set Global Variable(telltale_answer, 2);
		Skip If(Compare(Throttle Of(Global Variable(worldendingplayer)), !=, Vector(-1.000, 0, 0)), 1);
		Set Global Variable(telltale_answer, 3);
		Destroy HUD Text(Last Text ID);
	}
}

rule("the thing where the world RESETS")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(WORLDisENDING) == 1;
	}

	actions
	{
		Set Match Time(Subtract(Match Time, 1));
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("soldier unkillable")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Soldier: 76);
	}

	actions
	{
		Set Status(Event Player, Null, Unkillable, 9999);
		Set Player Variable(Event Player, AnaDamage, 0);
		Set Player Variable(Event Player, AnaHealth, 0);
		Set Damage Dealt(Event Player, 100);
		Set Damage Received(Event Player, 100);
	}
}

rule("not soldier unkillable")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) != Hero(Soldier: 76);
	}

	actions
	{
		Clear Status(Event Player, Unkillable);
	}
}

rule("soldier 2 (infection other way around)")
{
	event
	{
		Player Dealt Final Blow;
		All;
		Soldier: 76;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Soldier: 76);
		Is Alive(Event Player) == True;
		Hero Of(Victim) != Hero(Soldier: 76);
	}

	actions
	{
		Start Forcing Player To Be Hero(Victim, Hero Of(Event Player));
		Wait(1, Ignore Condition);
		Resurrect(Victim);
		Stop Forcing Player To Be Hero(Victim);
	}
}

rule("genji 3 (super focus on the fun part)")
{
	event
	{
		Player Took Damage;
		All;
		Genji;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Genji);
		Is Using Ultimate(Attacker) == True;
		Hero Of(Attacker) == Hero(Genji);
		Has Status(Event Player, Frozen) == True;
	}

	actions
	{
		Set Ultimate Charge(Event Player, 100);
		Set Slow Motion(10);
		Press Button(Event Player, Ultimate);
		Wait(0.500, Ignore Condition);
		Set Slow Motion(100);
		Wait(6, Ignore Condition);
	}
}

rule("(winston) i like fire trucks and moster trucks.")
{
	event
	{
		Ongoing - Each Player;
		All;
		Winston;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Winston);
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Player Variable(Event Player, walter, Players Within Radius(Event Player, 15, All Teams, Surfaces));
		Set Status(Player Variable(Event Player, walter), Null, Rooted, 10);
		Set Status(Player Variable(Event Player, walter), Null, Phased Out, 4);
		Start Camera(Player Variable(Event Player, walter), Ray Cast Hit Position(Eye Position(Event Player), World Vector Of(Vector(0, 2,
			2), Event Player, Rotation And Translation), All Players(All Teams), Event Player, True), Eye Position(Event Player), 1);
		Small Message(Player Variable(Event Player, walter), Custom String("i like fire trucks and moster trucks", Null, Null, Null));
		Wait(2, Ignore Condition);
		Small Message(Player Variable(Event Player, walter), Custom String("winston", Null, Null, Null));
		Wait(2, Ignore Condition);
		Skip If(Compare(Random Integer(1, 3), ==, 3), 3);
		Stop Camera(Player Variable(Event Player, walter));
		Set Player Variable(Event Player, walter, 0);
		Abort;
		Wait(1.100, Ignore Condition);
		Set Status(Player Variable(Event Player, walter), Null, Stunned, 13);
		Set Status(Player Variable(Event Player, walter), Null, Phased Out, 13);
		Start Camera(Player Variable(Event Player, walter), Ray Cast Hit Position(Eye Position(Event Player), World Vector Of(Vector(0, 2,
			2), Event Player, Rotation And Translation), All Players(All Teams), Event Player, True), Eye Position(Value In Array(
			Player Variable(Event Player, walter), 0)), 0);
		Small Message(Player Variable(Event Player, walter), Custom String(
			"What the **** did you just ****ing say about me, you little *****?", Null, Null, Null));
		Small Message(Player Variable(Event Player, walter), Custom String(
			"I'll have you know I graduated top of my class in the Navy Seals,", Null, Null, Null));
		Small Message(Player Variable(Event Player, walter), Custom String(
			"and I've been involved in numerous secret raids on Al-Quaeda, and I have over 300 confirmed kills.", Null, Null, Null));
		Small Message(Player Variable(Event Player, walter), Custom String(
			"I am trained in gorilla warfare and I'm the top sniper in the entire US armed forces.", Null, Null, Null));
		Small Message(Player Variable(Event Player, walter), Custom String("You are nothing to me but just another target.", Null, Null,
			Null));
		Small Message(Player Variable(Event Player, walter), Custom String(
			"I will wipe you the **** out with precision the likes of which has never been seen before on this Earth", Null, Null, Null));
		Small Message(Player Variable(Event Player, walter), Custom String("mark my ****ing words.", Null, Null, Null));
		Small Message(Player Variable(Event Player, walter), Custom String(
			"You think you can get away with saying that **** to me over the Internet?", Null, Null, Null));
		Small Message(Player Variable(Event Player, walter), Custom String("Think again, ****er.", Null, Null, Null));
		Small Message(Player Variable(Event Player, walter), Custom String(
			"As we speak I am contacting my secret network of spies across the USA", Null, Null, Null));
		Small Message(Player Variable(Event Player, walter), Custom String(
			"and your IP is being traced right now so you better prepare for the storm, maggot.", Null, Null, Null));
		Small Message(Player Variable(Event Player, walter), Custom String(
			"The storm that wipes out the pathetic little thing you call your life.", Null, Null, Null));
		Small Message(Player Variable(Event Player, walter), Custom String(
			"I can be anywhere, anytime, and I can kill you in over seven hundred ways, and that's just with my bare hands.", Null, Null,
			Null));
		Small Message(Player Variable(Event Player, walter), Custom String(
			"Not only am I extensively trained in unarmed combat, but I have access to the entire arsenal of the United States Marine Corps",
			Null, Null, Null));
		Small Message(Player Variable(Event Player, walter), Custom String(
			"and I will use it to its full extent to wipe your miserable *** off the face of the continent, you little ****.", Null, Null,
			Null));
		Small Message(Player Variable(Event Player, walter), Custom String(
			"If only you could have known what unholy retribution your little \"clever\" comment was about to bring down upon you", Null,
			Null, Null));
		Small Message(Player Variable(Event Player, walter), Custom String(" maybe you would have held your ****ing tongue.", Null, Null,
			Null));
		Small Message(Player Variable(Event Player, walter), Custom String(
			"But you couldn't, you didn't, and now you're paying the price, you ******* idiot.", Null, Null, Null));
		Small Message(Player Variable(Event Player, walter), Custom String("I will **** fury all over you and you will drown in it.", Null,
			Null, Null));
		Small Message(Player Variable(Event Player, walter), Custom String("You're ****ing dead, kiddo.", Null, Null, Null));
		Wait(13, Ignore Condition);
		Stop Camera(Player Variable(Event Player, walter));
		Set Player Variable(Event Player, walter, 0);
		Kill(Event Player, Null);
	}
}

rule("sans SIGMA UNDERTALE KINESIS")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Sigma);
		Is Alive(Event Player) == True;
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Set Player Variable(Filtered Array(Players in View Angle(Event Player, All Teams, 45), Compare(Is In Line of Sight(Eye Position(
			Event Player), Current Array Element, Barriers Do Not Block LOS), ==, True)), SIGMA_UNDERTALE, Event Player);
		Wait(4, Ignore Condition);
	}
}

rule("sans kinesis variable push")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, SIGMA_UNDERTALE) != 0;
		Is Alive(Event Player) == True;
		Is In View Angle(Player Variable(Event Player, SIGMA_UNDERTALE), Event Player, 25) == False;
	}

	actions
	{
		Apply Impulse(Event Player, Direction Towards(Event Player, Add(Multiply(Facing Direction Of(Player Variable(Event Player,
			SIGMA_UNDERTALE)), 15), Eye Position(Player Variable(Event Player, SIGMA_UNDERTALE)))), Multiply(Distance Between(Event Player,
			Add(Multiply(Facing Direction Of(Player Variable(Event Player, SIGMA_UNDERTALE)), 15), Eye Position(Player Variable(
			Event Player, SIGMA_UNDERTALE)))), 2), To World, Cancel Contrary Motion);
		Damage(Event Player, Player Variable(Event Player, SIGMA_UNDERTALE), 25);
		Wait(0.400, Ignore Condition);
	}
}

rule("sans variable turns off automatically")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, SIGMA_UNDERTALE) != 0;
	}

	actions
	{
		Create Effect(All Players(All Teams), Sparkles, Blue, Event Player, 1.500, Position and Radius);
		Set Player Variable(Event Player, sigmasparkles, Last Created Entity);
		Wait(3.250, Ignore Condition);
		Destroy Effect(Player Variable(Event Player, sigmasparkles));
		Set Player Variable(Event Player, SIGMA_UNDERTALE, 0);
	}
}

rule("the host has been yeeted")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, the_host_has_been_yeeted) == 1;
	}

	actions
	{
		Create HUD Text(Event Player, Custom String("press Q to call for help!", Null, Null, Null), Null, Null, Left, 0, Red, White, White,
			String, Default Visibility);
		Create HUD Text(Event Player, Custom String("press Q to call for help!", Null, Null, Null), Null, Null, Top, 0, Red, White, White,
			String, Default Visibility);
		Create HUD Text(Event Player, Custom String("press Q to call for help!", Null, Null, Null), Null, Null, Right, 0, Red, White,
			White, String, Default Visibility);
	}
}

rule("the host has been yeeted")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Ultimate) == True;
		Player Variable(Event Player, the_host_has_been_yeeted) == 1;
	}

	actions
	{
		Skip If(Compare(Random Integer(1, 20), ==, 20), 3);
		Small Message(Event Player, Custom String("but nobody came.", Null, Null, Null));
		Wait(2, Ignore Condition);
		Loop If Condition Is True;
		Small Message(Event Player, Custom String("{0} came in you, and gave you AIDS.", Closest Player To(Vector(0, 0, 0), All Teams),
			Null, Null));
		Wait(2.500, Ignore Condition);
		Set Player Variable(Event Player, the_host_has_been_yeeted, 0);
		Set Gravity(Event Player, 100);
		Clear Status(Event Player, Knocked Down);
		Kill(Event Player, Closest Player To(Vector(0, 0, 0), All Teams));
	}
}

rule("NEW ZARYA turn bubble on")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Zarya);
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Ability 2) == True;
	}

	actions
	{
		Set Player Variable(Player Closest To Reticle(Event Player, All Teams), ZaryaBubble, Event Player);
		Set Ability 2 Enabled(Event Player, False);
		Wait(10, Ignore Condition);
		Set Ability 2 Enabled(Event Player, True);
	}
}

rule("bubble stuff")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, ZaryaBubble) != 0;
	}

	actions
	{
		Set Status(Event Player, Null, Stunned, 5);
		Set Status(Event Player, Null, Invincible, 5);
		Create Effect(All Players(All Teams), Sphere, Red, Event Player, 1.750, Position and Radius);
		Set Player Variable(Event Player, zarya_bubble_VISUALS, Last Created Entity);
		Wait(4, Ignore Condition);
		Clear Status(Event Player, Stunned);
		Destroy Effect(Player Variable(Event Player, zarya_bubble_VISUALS));
		Set Player Variable(Event Player, ZaryaBubble, 0);
		Clear Status(Event Player, Invincible);
	}
}

rule("cancel altitude")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Has Spawned(Event Player) == True;
		Altitude Of(Event Player) > 1000;
	}

	actions
	{
		Wait(15, Abort When False);
		Teleport(Event Player, Nearest Walkable Position(Event Player));
		Stop Accelerating(Event Player);
	}
}

rule("junkrat turns off after switching")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) != Hero(Junkrat);
	}

	actions
	{
		Clear Status(Event Player, Frozen);
		Set Player Variable(Event Player, junkrat_being_wacky, 0);
	}
}

rule("dva sit steal points")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	conditions
	{
		Is Crouching(Event Player) == True;
		Hero Of(Event Player) == Hero(D.Va);
		Has Status(Closest Player To(Event Player, All Teams), Asleep) == True;
		Distance Between(Event Player, Closest Player To(Event Player, All Teams)) < 2;
		Player Variable(Event Player, IsInHouse) == 0;
	}

	actions
	{
		Small Message(Event Player, Custom String("hold for 5s", Null, Null, Null));
		Wait(2, Abort When False);
		Small Message(Event Player, Custom String("3s", Null, Null, Null));
		Wait(2, Abort When False);
		Small Message(Event Player, Custom String("1s", Null, Null, Null));
		Wait(1, Abort When False);
		Skip If(Compare(Score Of(Closest Player To(Event Player, All Teams)), >=, 1), 3);
		Small Message(Append To Array(Append To Array(Empty Array, Event Player), Closest Player To(Event Player, All Teams)),
			Custom String("no score to steal", Null, Null, Null));
		Set Status(Closest Player To(Event Player, All Teams), Event Player, Stunned, 1);
		Abort;
		Modify Player Score(Event Player, 1);
		Modify Player Score(Closest Player To(Event Player, All Teams), -1.000);
		Small Message(Append To Array(Append To Array(Empty Array, Event Player), Closest Player To(Event Player, All Teams)),
			Custom String("{0} point stolen {1}", Hero Icon String(Hero(D.Va)), Icon String(Heart), Null));
	}
}

rule("dva house var")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		Hero Of(Event Player) == Hero(D.Va);
		Has Status(Closest Player To(Event Player, All Teams), Asleep) == True;
		Distance Between(Event Player, Closest Player To(Event Player, All Teams)) < 2;
		Player Variable(Event Player, IsInHouse) == 1;
	}

	actions
	{
		Small Message(Event Player, Custom String("hold for 5s", Null, Null, Null));
		Wait(2, Abort When False);
		Small Message(Event Player, Custom String("3s", Null, Null, Null));
		Wait(2, Abort When False);
		Small Message(Event Player, Custom String("1s", Null, Null, Null));
		Wait(1, Abort When False);
		Skip If(Compare(Score Of(Closest Player To(Event Player, All Teams)), >=, 1), 3);
		Small Message(Append To Array(Append To Array(Empty Array, Event Player), Closest Player To(Event Player, All Teams)),
			Custom String("no score to steal", Null, Null, Null));
		Set Status(Closest Player To(Event Player, All Teams), Event Player, Stunned, 1);
		Abort;
		Modify Player Score(Event Player, 1);
		Modify Player Score(Closest Player To(Event Player, All Teams), -1.000);
		Small Message(Append To Array(Append To Array(Empty Array, Event Player), Closest Player To(Event Player, All Teams)),
			Custom String("{0} point stolen {1}", Hero Icon String(Hero(D.Va)), Icon String(Heart), Null));
	}
}

rule("bap die destroy icon")
{
	event
	{
		Player Died;
		All;
		Baptiste;
	}

	actions
	{
		Destroy Icon(Player Variable(Event Player, bap_ending_icon));
	}
}

disabled rule("teleport for host")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Host Player == Event Player;
		Is Button Held(Event Player, Interact) == True;
		Is Button Held(Event Player, Jump) == True;
	}

	actions
	{
		Teleport(Event Player, World Vector Of(Vector(0, 20, 0), Event Player, Rotation And Translation));
		Set Gravity(Event Player, 5);
		Wait(5, Ignore Condition);
		Set Gravity(Event Player, 100);
	}
}

rule("house teleport")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(209.500, 9, 69)) < 3;
		Is Button Held(Event Player, Jump) == True;
		Global Variable(BuyableHouseOWNER) == Event Player;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Play Effect(All Players(All Teams), Good Explosion, White, Event Player, 1);
		Teleport(Event Player, Vector(191, 25, 78));
		Set Player Variable(Event Player, IsInHouse, 1);
	}
}

rule("house friends teleport")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(209.500, 9, 69)) < 3;
		Is Button Held(Event Player, Jump) == True;
		Global Variable(BuyableHouseOWNER) != Event Player;
		Global Variable(house_setting_friends_mode) == 1;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Play Effect(All Players(All Teams), Good Explosion, White, Event Player, 1);
		Teleport(Event Player, Vector(191, 25, 78));
		Set Player Variable(Event Player, IsInHouse, 1);
	}
}

rule("buy house")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(209.500, 9, 69)) < 3;
		Global Variable(BuyableHouseOWNER) == 0;
		Is Button Held(Event Player, Jump) == True;
		Score Of(Event Player) >= 10;
	}

	actions
	{
		Small Message(Event Player, Custom String("hold for 3 sec to buy", Null, Null, Null));
		Wait(3, Abort When False);
		Modify Player Score(Event Player, -10.000);
		Set Global Variable(BuyableHouseOWNER, Event Player);
		Small Message(Event Player, Custom String("you own this now", Null, Null, Null));
		Destroy In-World Text(Global Variable(house_text_before_purchase));
	}
}

rule("house defaults on owner of house leaving")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Entity Exists(Global Variable(BuyableHouseOWNER)) == False;
		Global Variable(BuyableHouseOWNER) != 0;
	}

	actions
	{
		Wait(1, Abort When False);
		Set Global Variable(BuyableHouseOWNER, 0);
		Create In-World Text(Players Within Radius(Vector(209.500, 9, 69), 5, All Teams, Off), Custom String("10 points to buy (jump)",
			Global Variable(BuyableHouseOWNER), Compare(Global Variable(house_setting_friends_mode), ==, 0), Null), Vector(209.500, 10.500,
			69), 2, Do Not Clip, Visible To and String, White, Visible Always);
		Set Global Variable(house_text_before_purchase, Last Text ID);
	}
}

rule("set friends mode on")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Interact) == True;
		Global Variable(BuyableHouseOWNER) == Event Player;
		Player Variable(Event Player, IsInHouse) == 1;
		Global Variable(house_setting_friends_mode) == 0;
	}

	actions
	{
		Wait(1, Abort When False);
		Set Global Variable(house_setting_friends_mode, 1);
		Small Message(Event Player, Custom String("door unlocked", Null, Null, Null));
	}
}

rule("set friends mode off")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Interact) == True;
		Global Variable(BuyableHouseOWNER) == Event Player;
		Global Variable(house_setting_friends_mode) == 1;
		Player Variable(Event Player, IsInHouse) == 1;
	}

	actions
	{
		Wait(1, Abort When False);
		Set Global Variable(house_setting_friends_mode, 0);
		Small Message(Event Player, Custom String("door locked", Null, Null, Null));
	}
}

rule("out of house remove variable for being in house")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Vector(191, 25, 78), Event Player) > 13;
		Player Variable(Event Player, IsInHouse) == 1;
	}

	actions
	{
		Wait(0.250, Abort When False);
		Set Player Variable(Event Player, IsInHouse, 0);
	}
}

rule("house teleport thingy")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Interact) == True;
		Is Crouching(Event Player) == True;
		Global Variable(BuyableHouseOWNER) == Event Player;
	}

	actions
	{
		Play Effect(All Players(All Teams), Ring Explosion, White, Event Player, 3);
		Big Message(Players Within Radius(Event Player, 3, All Teams, Surfaces), Custom String("{0} teleported {0}", Icon String(Diamond),
			Null, Null));
		Set Status(Remove From Array(Players Within Radius(Event Player, 3, All Teams, Off), Event Player), Event Player, Stunned, 2);
		Set Player Variable(Players Within Radius(Event Player, 3, All Teams, Off), IsInHouse, 1);
		Teleport(Players Within Radius(Event Player, 3, All Teams, Off), Vector(191, 25, 78));
		Wait(1, Ignore Condition);
	}
}

rule("poor people cant buy houses")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(209.500, 9, 69)) < 3;
		Global Variable(BuyableHouseOWNER) == 0;
		Is Button Held(Event Player, Jump) == True;
		Score Of(Event Player) < 10;
	}

	actions
	{
		Small Message(Event Player, Custom String("need 10 score from killing people", Null, Null, Null));
		Wait(2, Ignore Condition);
	}
}

rule("junkrat turns off after death")
{
	event
	{
		Player Died;
		All;
		Junkrat;
	}

	actions
	{
		Clear Status(Event Player, Frozen);
		Set Player Variable(Event Player, junkrat_being_wacky, 0);
	}
}

rule("green day turn on")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reaper;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reaper);
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Secondary Fire) == True;
	}

	actions
	{
		Set Player Variable(Remove From Array(Players Within Radius(Event Player, 15, All Teams, Surfaces), Event Player), greenday_toggle,
			Event Player);
		Play Effect(All Players(All Teams), Ring Explosion, Green, Position Of(Event Player), 5);
		Wait(3.600, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("green day turns off on timer")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, greenday_toggle) != 0;
	}

	actions
	{
		Create Effect(All Players(All Teams), Cloud, Green, Event Player, 2, Visible To Position and Radius);
		Set Player Variable(Event Player, greenday_cloud, Last Created Entity);
		Wait(7.100, Ignore Condition);
		Set Player Variable(Event Player, greenday_toggle, 0);
		Destroy Effect(Player Variable(Event Player, greenday_cloud));
	}
}

rule("green day altitude detect")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, greenday_toggle) != 0;
		Altitude Of(Event Player) > Player Variable(Event Player, altitude_detector_for_greenday);
	}

	actions
	{
		Set Player Variable(Event Player, altitude_detector_for_greenday, Altitude Of(Event Player));
		Wait(0.050, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("green day damage on drop")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, greenday_toggle) != 0;
		Altitude Of(Event Player) < Player Variable(Event Player, altitude_detector_for_greenday);
	}

	actions
	{
		Wait(0.050, Abort When False);
		Damage(Event Player, Player Variable(Event Player, greenday_toggle), Add(Multiply(Subtract(Player Variable(Event Player,
			altitude_detector_for_greenday), Altitude Of(Event Player)), 8), 4));
		Set Player Variable(Event Player, altitude_detector_for_greenday, Altitude Of(Event Player));
		Wait(0.050, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("recently used portal lasts 1 seconds")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, Recently_Used_Portal) == 1;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Set Player Variable(Event Player, Recently_Used_Portal, 0);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("create portal blue")
{
	event
	{
		Ongoing - Each Player;
		All;
		Wrecking Ball;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Primary Fire) == True;
		Hero Of(Event Player) == Hero(Wrecking Ball);
		Player Variable(Event Player, portal_alternater) == 0;
		Player Variable(Event Player, IsInHouse) == 0;
	}

	actions
	{
		Destroy Effect(Player Variable(Event Player, blueportalring));
		Set Player Variable(Event Player, portal_gun_blue, Nearest Walkable Position(Ray Cast Hit Position(Eye Position(Event Player), Add(
			Multiply(Facing Direction Of(Event Player), 100), Eye Position(Event Player)), All Players(All Teams), Event Player, True)));
		Create Effect(All Players(All Teams), Ring, Blue, Player Variable(Event Player, portal_gun_blue), 2, Visible To);
		Set Player Variable(Event Player, blueportalring, Last Created Entity);
		Wait(0.500, Ignore Condition);
		Set Player Variable(Event Player, portal_alternater, 1);
	}
}

rule("at blue portal teleport")
{
	event
	{
		Ongoing - Each Player;
		All;
		Wrecking Ball;
	}

	conditions
	{
		Player Variable(Closest Player To(Player Variable(Event Player, portal_gun_blue), All Teams), Recently_Used_Portal) == 0;
		Distance Between(Closest Player To(Player Variable(Event Player, portal_gun_blue), All Teams), Player Variable(Event Player,
			portal_gun_blue)) < 2;
		Hero Of(Event Player) == Hero(Wrecking Ball);
		Player Variable(Event Player, portal_gun_orange) != 0;
		Player Variable(Event Player, portal_gun_blue) != 0;
	}

	actions
	{
		Wait(0.050, Abort When False);
		Set Player Variable(Closest Player To(Player Variable(Event Player, portal_gun_blue), All Teams), Recently_Used_Portal, 1);
		Teleport(Closest Player To(Player Variable(Event Player, portal_gun_blue), All Teams), Player Variable(Event Player,
			portal_gun_orange));
	}
}

rule("create portal orange")
{
	event
	{
		Ongoing - Each Player;
		All;
		Wrecking Ball;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Primary Fire) == True;
		Hero Of(Event Player) == Hero(Wrecking Ball);
		Player Variable(Event Player, portal_alternater) == 1;
		Player Variable(Event Player, IsInHouse) == 0;
	}

	actions
	{
		Destroy Effect(Player Variable(Event Player, orangeportalring));
		Set Player Variable(Event Player, portal_gun_orange, Nearest Walkable Position(Ray Cast Hit Position(Eye Position(Event Player),
			Add(Multiply(Facing Direction Of(Event Player), 100), Eye Position(Event Player)), All Players(All Teams), Event Player,
			True)));
		Create Effect(All Players(All Teams), Ring, Orange, Player Variable(Event Player, portal_gun_orange), 2, Visible To);
		Set Player Variable(Event Player, orangeportalring, Last Created Entity);
		Wait(0.500, Ignore Condition);
		Set Player Variable(Event Player, portal_alternater, 0);
	}
}

rule("at orange portal teleport")
{
	event
	{
		Ongoing - Each Player;
		All;
		Wrecking Ball;
	}

	conditions
	{
		Player Variable(Closest Player To(Player Variable(Event Player, portal_gun_orange), All Teams), Recently_Used_Portal) == 0;
		Distance Between(Closest Player To(Player Variable(Event Player, portal_gun_orange), All Teams), Player Variable(Event Player,
			portal_gun_orange)) < 2;
		Hero Of(Event Player) == Hero(Wrecking Ball);
		Player Variable(Event Player, portal_gun_orange) != 0;
		Player Variable(Event Player, portal_gun_blue) != 0;
	}

	actions
	{
		Wait(0.050, Abort When False);
		Set Player Variable(Closest Player To(Player Variable(Event Player, portal_gun_orange), All Teams), Recently_Used_Portal, 1);
		Teleport(Closest Player To(Player Variable(Event Player, portal_gun_orange), All Teams), Player Variable(Event Player,
			portal_gun_blue));
	}
}

rule("bap switch remove hud icon")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) != Hero(Baptiste);
	}

	actions
	{
		Destroy HUD Text(Player Variable(Event Player, bap_hud_icon));
	}
}

rule("emotes break in the air")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Air(Event Player) == True;
		Is Communicating Any Emote(Event Player) == True;
	}

	actions
	{
		Wait(0.250, Abort When False);
		Set Status(Event Player, Null, Knocked Down, 0.001);
	}
}

rule("genji ult fixes if he leaves")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(genji_ult_detect_for_fix) == 1;
	}

	actions
	{
		Wait(10, Abort When False);
		Stop Camera(Remove From Array(All Players(All Teams), Players On Hero(Hero(Sombra), All Teams)));
		Set Global Variable(genji_ult_detect_for_fix, 0);
	}
}

rule("sombra orb fixes if she leaves (probably)")
{
	event
	{
		Player Left Match;
		All;
		Sombra;
	}

	actions
	{
		Destroy Effect(Last Created Entity);
		Destroy Effect(Player Variable(Event Player, SombraCameraOrb));
	}
}

rule("soldier wincon")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Number of Heroes(Hero(Soldier: 76), All Teams) == Number of Players(All Teams);
		Is Game In Progress == True;
		Total Time Elapsed > 45;
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("{0} gg, i guess? {0}", Hero Icon String(Hero(Soldier: 76)), Null, Null));
		Wait(4, Ignore Condition);
		Start Forcing Player To Be Hero(All Players(All Teams), Random Value In Array(All Heroes));
		Wait(1, Ignore Condition);
		Stop Forcing Player To Be Hero(All Players(All Teams));
	}
}

rule("angelo moment")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(202, 8.500, 46.500)) < 1;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) != Hero(Sombra);
		Speed Of(Event Player) < 10;
		Player Variable(Event Player, has_seen_angelo) == 0;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Wait(0.050, Abort When False);
		Set Player Variable(Event Player, has_seen_angelo, 1);
		Apply Impulse(Event Player, Down, 1, To World, Cancel Contrary Motion);
		Set Status(Event Player, Null, Stunned, 3);
		Set Status(Event Player, Null, Phased Out, 3);
		Start Camera(Event Player, Vector(197.840, 10.279, 43.230), Vector(202.081, 8.262, 45.708), 0);
		Create In-World Text(Event Player, Custom String("{0}: yo, angelo", Hero Icon String(Hero Of(Event Player)), Null, Null),
			World Vector Of(Vector(0, 0, 2), Event Player, Rotation And Translation), 4, Do Not Clip, String, White, Default Visibility);
		Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(203.322, 5.808, 42.227)), To World);
		Wait(3, Ignore Condition);
		Stop Camera(Event Player);
		Destroy In-World Text(Last Text ID);
	}
}

rule("LENIN DID NOTHING WRONG pick zarya if you agree")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Total Time Elapsed > 360;
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("{0} pick zarya if lenin did nothing wrong {0}", Hero Icon String(Hero(Zarya)),
			Null, Null));
		Wait(30, Ignore Condition);
		Big Message(All Players(All Teams), Custom String("{0} comrads glow red now {0}", Hero Icon String(Hero(Zarya)), Null, Null));
		Set Player Variable(Players On Hero(Hero(Zarya), All Teams), COMMUNISM_GLOW_V2, 1);
	}
}

rule("the Red Glow tm")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, COMMUNISM_GLOW_V2) == 1;
	}

	actions
	{
		Create Effect(All Players(All Teams), Bad Aura, Red, Event Player, 2, Visible To Position and Radius);
		Set Objective Description(Event Player, Custom String("kill capitalists", Null, Null, Null), String);
		Set Ultimate Charge(Event Player, 100);
	}
}

rule("heaven's door teleport")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(223.500, 8, 98)) < 3;
		Is Button Held(Event Player, Jump) == True;
		Global Variable(over_heaven_active) == 0;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Teleport(Event Player, Vector(215.500, 25.700, 102));
		Set Player Variable(Event Player, OverHeaven, 1);
		Set Global Variable(over_heaven_active, 1);
		Small Message(Event Player, Custom String("rightclick to select target", Null, Null, Null));
		Start Accelerating(Event Player, Direction Towards(Event Player, Vector(200, 0, 80)), 15, 15, To World, None);
		Start Camera(Event Player, World Vector Of(Vector(0, 2, -4.000), Global Variable(OVER_HEAVEN_CAMERA), Rotation And Translation),
			World Vector Of(Vector(0, 0, 3), Global Variable(OVER_HEAVEN_CAMERA), Rotation And Translation), 15);
		Set Status(Event Player, Null, Stunned, 9999);
		Set Global Variable(OVER_HEAVEN_CAMERA, Random Value In Array(Remove From Array(All Players(All Teams), Event Player)));
	}
}

rule("heaven's door out of zone")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, OverHeaven) == 1;
		Distance Between(Event Player, Vector(215.500, 25.700, 102)) > 4;
	}

	actions
	{
		Wait(0.100, Abort When False);
		Set Global Variable(over_heaven_active, 0);
		Set Player Variable(Event Player, OverHeaven, 0);
		Stop Accelerating(Event Player);
		Clear Status(Event Player, Stunned);
		Stop Camera(Event Player);
	}
}

rule("target selector heaven's door rightclick")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, OverHeaven) == 1;
		Is Button Held(Event Player, Secondary Fire) == True;
	}

	actions
	{
		Set Global Variable(OVER_HEAVEN_CAMERA, Random Value In Array(Remove From Array(All Players(All Teams), Event Player)));
		Small Message(Event Player, Custom String("leftclick to teleport", Null, Null, Null));
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("teleport to target for heaven's door")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, OverHeaven) == 1;
		Is Button Held(Event Player, Primary Fire) == True;
	}

	actions
	{
		Teleport(Event Player, World Vector Of(Vector(0, 2, -4.000), Global Variable(OVER_HEAVEN_CAMERA), Rotation And Translation));
		Wait(0.050, Ignore Condition);
		Set Facing(Event Player, Direction Towards(Event Player, Global Variable(OVER_HEAVEN_CAMERA)), To World);
	}
}

rule("mccree dies his thing turns on again")
{
	event
	{
		Player Died;
		All;
		McCree;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(McCree);
	}

	actions
	{
		Set Player Variable(Event Player, mccree_once_per_life, 0);
	}
}

rule("bastion set var")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Standing(Event Player) == True;
		Is Communicating Any Emote(Event Player) == True;
		Player Variable(Event Player, VA_MTT) == 0;
		Hero Of(Event Player) == Hero(Bastion);
		Distance Between(Event Player, Closest Player To(Event Player, All Teams)) < 15;
	}

	actions
	{
		Set Player Variable(Event Player, VA_MTT, Closest Player To(Event Player, All Teams));
		Set Status(Event Player, Null, Knocked Down, 0.001);
		Big Message(Append To Array(Append To Array(Empty Array, Event Player), Closest Player To(Event Player, All Teams)), Custom String(
			"{0}{1}{2} the torture dance has begun {2}{1}{0}", Hero Icon String(Hero(Bastion)), Icon String(Fire), Icon String(Skull)));
		Wait(60, Ignore Condition);
		Abort If(Compare(Hero Of(Event Player), !=, Hero(Bastion)));
		Small Message(Event Player, Custom String("torture dance is ready again", Null, Null, Null));
	}
}

rule("var starts the torture dance")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Player Variable(Event Player, VA_MTT) != 0;
		Player Variable(Event Player, VA_dance_stages) == 0;
		Hero Of(Event Player) == Hero(Bastion);
	}

	actions
	{
		Set Status(Player Variable(Event Player, VA_MTT), Null, Knocked Down, 15);
		Set Status(Player Variable(Event Player, VA_MTT), Null, Phased Out, 15);
		Teleport(Event Player, Nearest Walkable Position(World Vector Of(Vector(0, 0, 4), Player Variable(Event Player, VA_MTT),
			Rotation And Translation)));
		Modify Player Variable(Event Player, VA_the_entire_dance_gang, Append To Array, Event Player);
		Set Player Variable(Event Player, VA_dance_stages, 1);
		Create In-World Text(All Players(All Teams), Custom String("come near bastion to join dance", Null, Null, Null), World Vector Of(
			Vector(0, 3, 0), Event Player, Rotation And Translation), 2, Clip Against Surfaces, Visible To Position and String, Red,
			Default Visibility);
		Set Player Variable(Event Player, VA_dance_instructions, Last Text ID);
	}
}

rule("dance stage 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Player Variable(Event Player, VA_dance_stages) == 1;
		Hero Of(Event Player) == Hero(Bastion);
	}

	actions
	{
		Teleport(Player Variable(Event Player, VA_the_entire_dance_gang), Nearest Walkable Position(World Vector Of(Vector(Random Integer(
			-2.000, 2), 0, 4), Player Variable(Event Player, VA_MTT), Rotation And Translation)));
		Start Camera(Player Variable(Event Player, VA_the_entire_dance_gang), World Vector Of(Vector(-2.000, 4, 3), Player Variable(
			Event Player, VA_MTT), Rotation And Translation), World Vector Of(Vector(2, 1, 1), Event Player, Rotation And Translation), 0);
		Set Status(Player Variable(Event Player, VA_the_entire_dance_gang), Null, Phased Out, 5);
		Set Status(Player Variable(Event Player, VA_the_entire_dance_gang), Null, Rooted, 5);
		Start Facing(Player Variable(Event Player, VA_the_entire_dance_gang), Left, 140, To Player, Direction and Turn Rate);
		Wait(5, Ignore Condition);
		Set Player Variable(Event Player, VA_dance_stages, 2);
	}
}

rule("dance stage 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Player Variable(Event Player, VA_dance_stages) == 2;
		Hero Of(Event Player) == Hero(Bastion);
	}

	actions
	{
		Teleport(Player Variable(Event Player, VA_the_entire_dance_gang), Nearest Walkable Position(World Vector Of(Vector(Random Integer(
			-2.000, 2), 0, 4), Player Variable(Event Player, VA_MTT), Rotation And Translation)));
		Start Camera(Player Variable(Event Player, VA_the_entire_dance_gang), World Vector Of(Vector(2, 3, -1.000), Event Player,
			Rotation And Translation), Player Variable(Event Player, VA_MTT), 0);
		Set Status(Player Variable(Event Player, VA_the_entire_dance_gang), Null, Rooted, 5);
		Set Status(Player Variable(Event Player, VA_the_entire_dance_gang), Null, Phased Out, 5);
		Start Facing(Player Variable(Event Player, VA_the_entire_dance_gang), Right, 140, To Player, Direction and Turn Rate);
		Wait(5, Ignore Condition);
		Set Player Variable(Event Player, VA_dance_stages, 3);
	}
}

rule("dance stage 3")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Player Variable(Event Player, VA_dance_stages) == 3;
		Hero Of(Event Player) == Hero(Bastion);
	}

	actions
	{
		Teleport(Player Variable(Event Player, VA_the_entire_dance_gang), Nearest Walkable Position(World Vector Of(Vector(Random Integer(
			-2.000, 2), 0, 4), Player Variable(Event Player, VA_MTT), Rotation And Translation)));
		Start Camera(Player Variable(Event Player, VA_the_entire_dance_gang), World Vector Of(Vector(0, 1, -3.000), Player Variable(
			Event Player, VA_MTT), Rotation And Translation), Eye Position(Event Player), 0);
		Set Status(Player Variable(Event Player, VA_the_entire_dance_gang), Null, Phased Out, 5);
		Set Status(Player Variable(Event Player, VA_the_entire_dance_gang), Null, Rooted, 5);
		Start Facing(Player Variable(Event Player, VA_the_entire_dance_gang), Vector(Random Real(0, 1), Random Real(0, 1), Random Real(0,
			1)), 10000, To World, Direction and Turn Rate);
		Wait(5, Ignore Condition);
		Set Player Variable(Event Player, VA_dance_stages, 4);
	}
}

rule("stage 4 of dance ends everything")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Player Variable(Event Player, VA_dance_stages) == 4;
		Hero Of(Event Player) == Hero(Bastion);
	}

	actions
	{
		Stop Facing(Player Variable(Event Player, VA_the_entire_dance_gang));
		Stop Camera(Player Variable(Event Player, VA_the_entire_dance_gang));
		Modify Player Score(Player Variable(Event Player, VA_the_entire_dance_gang), 1);
		Modify Player Score(Event Player, -1.000);
		Kill(Player Variable(Event Player, VA_MTT), Event Player);
		Set Player Variable(Event Player, VA_MTT, 0);
		Set Player Variable(Event Player, VA_dance_stages, 0);
		Set Player Variable(Event Player, VA_the_entire_dance_gang, 0);
		Destroy In-World Text(Player Variable(Event Player, VA_dance_instructions));
		Small Message(Event Player, Custom String("45 seconds until torture dance is back", Null, Null, Null));
	}
}

rule("add players to torture dance")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Bastion);
		Closest Player To(Event Player, All Teams) != Player Variable(Event Player, VA_MTT);
		Distance Between(Event Player, Closest Player To(Event Player, All Teams)) < 3;
		Player Variable(Event Player, VA_dance_stages) != 0;
		Array Contains(Player Variable(Event Player, VA_the_entire_dance_gang), Closest Player To(Event Player, All Teams)) == False;
		Is Alive(Closest Player To(Event Player, All Teams)) == True;
	}

	actions
	{
		Modify Player Variable(Event Player, VA_the_entire_dance_gang, Append To Array, Closest Player To(Event Player, All Teams));
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("burn the fence down")
{
	event
	{
		Ongoing - Global;
	}
}

rule("pharah teleports to victim of being killed")
{
	event
	{
		Player Dealt Final Blow;
		All;
		Pharah;
	}

	actions
	{
		Teleport(Attacker, Victim);
	}
}

rule("pharahs teleports attacker when killed")
{
	event
	{
		Player Died;
		All;
		Pharah;
	}

	actions
	{
		Teleport(Attacker, Victim);
	}
}

rule("mercy damage dealt cancels the heal")
{
	event
	{
		Player Dealt Damage;
		All;
		Mercy;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Mercy);
		Event Damage > 2;
	}

	actions
	{
		Set Player Variable(Event Player, MercyAttackCancel, 1);
		Wait(2, Restart When True);
		Set Player Variable(Event Player, MercyAttackCancel, 0);
	}
}

rule("mercy beam on")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mercy;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Mercy);
		Is Firing Primary(Event Player) == True;
		Distance Between(Ray Cast Hit Position(Eye Position(Event Player), Add(Multiply(Facing Direction Of(Event Player), 8),
			Eye Position(Event Player)), All Players(All Teams), Event Player, True), Closest Player To(Ray Cast Hit Position(Eye Position(
			Event Player), Add(Multiply(Facing Direction Of(Event Player), 8), Eye Position(Event Player)), All Players(All Teams),
			Event Player, True), All Teams)) < 8;
		Closest Player To(Ray Cast Hit Position(Eye Position(Event Player), Add(Multiply(Facing Direction Of(Event Player), 8),
			Eye Position(Event Player)), All Players(All Teams), Event Player, True), All Teams) != Event Player;
		Player Variable(Event Player, MercyAttackCancel) == 0;
		Player Variable(Event Player, MercyJuice) > 1;
	}

	actions
	{
		Wait(0.050, Abort When False);
		Set Player Variable(Event Player, MercySlotTargeter, Closest Player To(Ray Cast Hit Position(Eye Position(Event Player), Add(
			Multiply(Facing Direction Of(Event Player), 8), Eye Position(Event Player)), All Players(All Teams), Event Player, True),
			All Teams));
		Destroy Effect(Player Variable(Event Player, MercyBeamVisualAlso69Nice));
		Create Beam Effect(All Players(All Teams), Good Beam, Event Player, Player Variable(Event Player, MercySlotTargeter), Yellow,
			Position and Radius);
		Set Player Variable(Event Player, MercyBeamVisualAlso69Nice, Last Created Entity);
		Set Status(Player Variable(Event Player, MercySlotTargeter), Event Player, Stunned, 9999);
		Start Heal Over Time(Player Variable(Event Player, MercySlotTargeter), Event Player, 9999, 60);
		Set Player Variable(Player Variable(Event Player, MercySlotTargeter), mercy_backup_if_leave, Event Player);
	}
}

rule("mercy beam off")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mercy;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Mercy);
		Or(Compare(Distance Between(Event Player, Player Variable(Event Player, MercySlotTargeter)), >, 16), Or(Not(Is Firing Primary(
			Event Player)), Or(Compare(Player Variable(Event Player, MercyJuice), <, 1), Compare(Player Variable(Event Player,
			MercyAttackCancel), ==, 1)))) == True;
		Player Variable(Event Player, MercySlotTargeter) != 0;
	}

	actions
	{
		Destroy Effect(Player Variable(Event Player, MercyBeamVisualAlso69Nice));
		Clear Status(Player Variable(Event Player, MercySlotTargeter), Stunned);
		Stop All Heal Over Time(Player Variable(Event Player, MercySlotTargeter));
		Set Player Variable(Player Variable(Event Player, MercySlotTargeter), mercy_backup_if_leave, 0);
		Set Player Variable(Event Player, MercySlotTargeter, 0);
	}
}

rule("mercy beam off backup if the mercy dissapears")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Player Variable(Event Player, mercy_backup_if_leave)) != Hero(Mercy);
	}

	actions
	{
		Wait(0.250, Abort When False);
		Clear Status(Event Player, Stunned);
		Stop All Heal Over Time(Event Player);
		Set Player Variable(Event Player, mercy_backup_if_leave, 0);
	}
}

rule("new healing call thingy")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Need Healing) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) != Hero(Mercy);
	}

	actions
	{
		Small Message(Players On Hero(Hero(Mercy), All Teams), Custom String("{0} i need healing {0}", Hero Icon String(Hero Of(
			Event Player)), Null, Null));
		Damage(Event Player, Last Of(Sorted Array(Players On Hero(Hero(Mercy), All Teams), Distance Between(Event Player,
			Current Array Element))), 1);
	}
}

rule("flashbang + FTH is cringe")
{
	event
	{
		Player Dealt Damage;
		All;
		McCree;
	}

	conditions
	{
		Has Status(Victim, Stunned) == True;
		Is Alive(Event Player) == True;
		Is Alive(Victim) == True;
		Is Firing Secondary(Event Player) == True;
	}

	actions
	{
		Heal(Victim, Null, 100);
		Clear Status(Victim, Stunned);
		Set Status(Event Player, Victim, Stunned, 1);
		Big Message(Append To Array(Append To Array(Empty Array, Event Player), Victim), Custom String(
			"{1} flashbang + FTH is cringe bro {0}{0}", Icon String(Dizzy), Hero Icon String(Hero(McCree)), Null));
		Set Facing(Victim, Direction Towards(Eye Position(Victim), Eye Position(Event Player)), To World);
	}
}