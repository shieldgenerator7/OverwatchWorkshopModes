variables
{
	global:
		0: HEROES_REQUIRE_FIRE_ABILITY1
		1: HEROES_REQUIRE_FIRE_ABILITY2

	player:
		0: hostPlayer
		1: bot1
}

rule("Game Setup")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Dummy Bot(Random Value In Array(All Heroes), Team 2, -1, Vector(0, 0, 0), Vector(0, 0, 0));
		Global.HEROES_REQUIRE_FIRE_ABILITY2 = Empty Array;
		Modify Global Variable(HEROES_REQUIRE_FIRE_ABILITY2, Append To Array, Hero(Mei));
		Modify Global Variable(HEROES_REQUIRE_FIRE_ABILITY2, Append To Array, Hero(Moira));
	}
}

rule("Player spawn in - Spawn AI dummy bodies")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	conditions
	{
		disabled Event Player.hostPlayer == Null;
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		Create Dummy Bot(Random Value In Array(All Heroes), Team Of(Event Player), -1, Position Of(Event Player), Facing Direction Of(
			Event Player));
		Event Player.bot1 = Players In Slot(Slot Of(Event Player) + 1, Team Of(Event Player));
		Event Player.bot1.hostPlayer = Event Player;
		Set Invisible(Event Player.bot1, All);
		Start Facing(Event Player.bot1, Facing Direction Of(Event Player), 100, To World, Direction and Turn Rate);
		Attach Players(Event Player.bot1, Event Player, Vector(0, 0, 0));
		Disallow Button(Event Player, Ability 1);
		Disallow Button(Event Player, Ability 2);
		Set Status(Event Player.bot1, Event Player, Unkillable, 9999);
		Wait(0.250, Ignore Condition);
		Set Status(Event Player.bot1, Event Player, Phased Out, 9999);
	}
}

rule("Player uses Ability 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.hostPlayer == Null;
		Is Button Held(Event Player, Ability 1) == True;
	}

	actions
	{
		Press Button(Event Player.bot1, Ability 1);
	}
}

rule("Player uses Ability 1 (Primary Fire)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.hostPlayer == Null;
		Array Contains(Global.HEROES_REQUIRE_FIRE_ABILITY1, Hero Of(Event Player.bot1)) == True;
		Is Using Ability 1(Event Player.bot1) == True;
		Is Button Held(Event Player, Primary Fire) == True;
	}

	actions
	{
		Press Button(Event Player.bot1, Primary Fire);
	}
}

rule("Player uses Ability 1 (Secondary Fire)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.hostPlayer == Null;
		Array Contains(Global.HEROES_REQUIRE_FIRE_ABILITY1, Hero Of(Event Player.bot1)) == True;
		Is Using Ability 1(Event Player.bot1) == True;
		Is Button Held(Event Player, Secondary Fire) == True;
	}

	actions
	{
		Press Button(Event Player.bot1, Secondary Fire);
	}
}

rule("Player uses Ability 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.hostPlayer == Null;
		Is Button Held(Event Player, Ability 2) == True;
	}

	actions
	{
		Press Button(Event Player.bot1, Ability 2);
	}
}

rule("Player uses Ability 2 (Primary Fire)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.hostPlayer == Null;
		Array Contains(Global.HEROES_REQUIRE_FIRE_ABILITY2, Hero Of(Event Player.bot1)) == True;
		Is Using Ability 2(Event Player.bot1) == True;
		Is Button Held(Event Player, Primary Fire) == True;
	}

	actions
	{
		Press Button(Event Player.bot1, Primary Fire);
	}
}

rule("Player uses Ability 2 (Secondary Fire)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.hostPlayer == Null;
		Array Contains(Global.HEROES_REQUIRE_FIRE_ABILITY2, Hero Of(Event Player.bot1)) == True;
		Is Using Ability 2(Event Player.bot1) == True;
		Is Button Held(Event Player, Secondary Fire) == True;
	}

	actions
	{
		Press Button(Event Player.bot1, Secondary Fire);
	}
}

rule("Bot uses Torbjorn's E")
{
	event
	{
		Ongoing - Each Player;
		All;
		TorbjÃ¶rn;
	}

	conditions
	{
		Event Player.hostPlayer != Null;
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Set Damage Dealt(Event Player.hostPlayer, 150);
		Wait(5, Ignore Condition);
		Set Damage Dealt(Event Player.hostPlayer, 100);
	}
}

rule("Bot heals itself")
{
	event
	{
		Player Dealt Healing;
		All;
		All;
	}

	conditions
	{
		Healee != Event Player.hostPlayer;
		Event Player.hostPlayer != Null;
	}

	actions
	{
		Heal(Event Player.hostPlayer, Null, Event Healing);
	}
}

rule("==TEST== Damage player")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Interact) == True;
	}

	actions
	{
		Damage(Event Player, Null, 100);
	}
}

rule("Bot Ability 1 Cooldown")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.hostPlayer != Null;
		Ability Cooldown(Event Player, Button(Ability 1)) > 0;
	}

	actions
	{
		Set Ability Cooldown(Event Player.hostPlayer, Button(Ability 1), Ability Cooldown(Event Player, Button(Ability 1)));
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		Set Ability Cooldown(Event Player.hostPlayer, Button(Ability 1), Ability Cooldown(Event Player, Button(Ability 1)));
	}
}

rule("Bot Ability 2 Cooldown")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.hostPlayer != Null;
		Ability Cooldown(Event Player, Button(Ability 2)) > 0;
	}

	actions
	{
		Set Ability Cooldown(Event Player.hostPlayer, Button(Ability 2), Ability Cooldown(Event Player, Button(Ability 2)));
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		Set Ability Cooldown(Event Player.hostPlayer, Button(Ability 2), Ability Cooldown(Event Player, Button(Ability 2)));
	}
}

rule("Bot ult charge goes to Player")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.hostPlayer != Null;
		Ultimate Charge Percent(Event Player) > 1;
	}

	actions
	{
		Set Ultimate Charge(Event Player.hostPlayer, Ultimate Charge Percent(Event Player.hostPlayer) + 1);
		Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) - 1);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Bot has full HP -> damage it")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.hostPlayer != Null;
		Health(Event Player) >= Max Health(Event Player);
	}

	actions
	{
		Clear Status(Event Player, Phased Out);
		Wait(0.100, Ignore Condition);
		Damage(Event Player, Null, Max Health(Event Player));
		Set Status(Event Player, Event Player.hostPlayer, Phased Out, 9999);
	}
}

rule("==TEST== Dummy Bot Spawn without hostPlayer")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Holding Button(Event Player, Primary Fire);
	}
}

rule("If Bot phased bc of ability, make Player phased")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.hostPlayer != Null;
		Is Using Ability 1(Event Player) == True;
		(Hero Of(Event Player) == Hero(Reaper) || Hero Of(Event Player) == Hero(Moira)) == True;
	}

	actions
	{
		disabled If(Has Status(Event Player.hostPlayer, Phased Out) == False);
		Set Status(Event Player.hostPlayer, Event Player, Phased Out, 9999);
		disabled End;
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
		Clear Status(Event Player.hostPlayer, Phased Out);
	}
}