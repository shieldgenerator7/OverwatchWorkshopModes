variables
{
	global:
		0: HEROES_REQUIRE_FIRE_ABILITY1
		1: HEROES_REQUIRE_FIRE_ABILITY2
		2: HEROES_REQUIRE_FIRE_ULT
		3: HEROES_MOVE_ABILITY1
		4: HEROES_MOVE_ABILITY2
		5: HEROES_MOVE_ULT
		6: HEROES_PHASE_ABILITY1
		7: _TEST_BOT_

	player:
		0: hostPlayer
		1: bot1
		2: hasControl
}

subroutines
{
	0: GiveControlToBot1
	2: GiveControlToPlayer
}

rule("Game Setup")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Dummy Bot(Random Value In Array(All Heroes), Team 2, -1, Vector(0, 0, 0), Vector(0, 0, 0));
		Global.HEROES_REQUIRE_FIRE_ABILITY1 = Array(Hero(Junkrat));
		Global.HEROES_REQUIRE_FIRE_ABILITY2 = Array(Hero(Mei), Hero(Moira));
		Global.HEROES_REQUIRE_FIRE_ULT = Array(Hero(Symmetra), Hero(Baptiste));
		Global.HEROES_MOVE_ABILITY1 = Array(Hero(Ashe), Hero(Bastion), Hero(D.Va), Hero(Doomfist), Hero(Echo), Hero(Genji), Hero(Junkrat),
			Hero(McCree), Hero(Mei), Hero(Mercy), Hero(Moira), Hero(Orisa), Hero(Pharah), Hero(Reaper), Hero(Reinhardt), Hero(Soldier: 76),
			Hero(Sombra), Hero(Tracer), Hero(Widowmaker), Hero(Winston), Hero(Wrecking Ball));
		Global.HEROES_MOVE_ABILITY2 = Array(Hero(Doomfist), Hero(Pharah), Hero(Reaper), Hero(Sombra), Hero(Tracer));
		Global.HEROES_MOVE_ULT = Array(Hero(Pharah), Hero(Sigma));
		Global.HEROES_PHASE_ABILITY1 = Array(Hero(Mei), Hero(Moira), Hero(Reaper));
	}
}

rule("Player spawn in - Spawn AI dummy bodies")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	conditions
	{
		disabled Event Player.hostPlayer == Null;
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		Event Player.hasControl = True;
		Create Dummy Bot(Random Value In Array(Global.HEROES_MOVE_ABILITY1), Team Of(Event Player), -1, Position Of(Event Player),
			Facing Direction Of(Event Player));
		Event Player.bot1 = Players In Slot(Slot Of(Event Player) + 1, Team Of(Event Player));
		Event Player.bot1.hostPlayer = Event Player;
		Set Invisible(Event Player.bot1, All);
		Start Facing(Event Player.bot1, Facing Direction Of(Event Player), 100, To World, Direction and Turn Rate);
		Attach Players(Event Player.bot1, Event Player, Vector(0, 0, 0));
		Disallow Button(Event Player, Ability 1);
		Disallow Button(Event Player, Ability 2);
		Set Status(Event Player.bot1, Event Player, Unkillable, 9999);
		Wait(0.250, Ignore Condition);
		Set Status(Event Player.bot1, Event Player, Phased Out, 9999);
	}
}

rule("Player uses Ability 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.hostPlayer == Null;
		Is Button Held(Event Player, Ability 1) == True;
	}

	actions
	{
		Press Button(Event Player.bot1, Ability 1);
	}
}

rule("Player uses Ability 1 (Primary Fire)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.hostPlayer == Null;
		Array Contains(Global.HEROES_REQUIRE_FIRE_ABILITY1, Hero Of(Event Player.bot1)) == True;
		Is Using Ability 1(Event Player.bot1) == True;
		Is Button Held(Event Player, Primary Fire) == True;
	}

	actions
	{
		Press Button(Event Player.bot1, Primary Fire);
	}
}

rule("Player uses Ability 1 (Secondary Fire)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.hostPlayer == Null;
		Array Contains(Global.HEROES_REQUIRE_FIRE_ABILITY1, Hero Of(Event Player.bot1)) == True;
		Is Using Ability 1(Event Player.bot1) == True;
		Is Button Held(Event Player, Secondary Fire) == True;
	}

	actions
	{
		Press Button(Event Player.bot1, Secondary Fire);
	}
}

rule("Player uses Ability 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.hostPlayer == Null;
		Is Button Held(Event Player, Ability 2) == True;
	}

	actions
	{
		Press Button(Event Player.bot1, Ability 2);
	}
}

rule("Player uses Ability 2 (Primary Fire)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.hostPlayer == Null;
		Array Contains(Global.HEROES_REQUIRE_FIRE_ABILITY2, Hero Of(Event Player.bot1)) == True;
		Is Using Ability 2(Event Player.bot1) == True;
		Is Button Held(Event Player, Primary Fire) == True;
	}

	actions
	{
		Press Button(Event Player.bot1, Primary Fire);
	}
}

rule("Player uses Ability 2 (Secondary Fire)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.hostPlayer == Null;
		Array Contains(Global.HEROES_REQUIRE_FIRE_ABILITY2, Hero Of(Event Player.bot1)) == True;
		Is Using Ability 2(Event Player.bot1) == True;
		Is Button Held(Event Player, Secondary Fire) == True;
	}

	actions
	{
		Press Button(Event Player.bot1, Secondary Fire);
	}
}

rule("Bot uses Torbjorn's E")
{
	event
	{
		Ongoing - Each Player;
		All;
		TorbjÃ¶rn;
	}

	conditions
	{
		Event Player.hostPlayer != Null;
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Set Damage Dealt(Event Player.hostPlayer, 150);
		Wait(5, Ignore Condition);
		Set Damage Dealt(Event Player.hostPlayer, 100);
	}
}

rule("Bot heals itself")
{
	event
	{
		Player Dealt Healing;
		All;
		All;
	}

	conditions
	{
		Healee != Event Player.hostPlayer;
		Event Player.hostPlayer != Null;
	}

	actions
	{
		Heal(Event Player.hostPlayer, Null, Event Healing);
	}
}

rule("==TEST== Damage player")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Interact) == True;
	}

	actions
	{
		Damage(Event Player, Null, 100);
	}
}

rule("Bot Ability 1 Cooldown")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.hostPlayer != Null;
		Ability Cooldown(Event Player, Button(Ability 1)) > 0;
	}

	actions
	{
		Set Ability Cooldown(Event Player.hostPlayer, Button(Ability 1), Ability Cooldown(Event Player, Button(Ability 1)));
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		Set Ability Cooldown(Event Player.hostPlayer, Button(Ability 1), Ability Cooldown(Event Player, Button(Ability 1)));
	}
}

rule("Bot Ability 2 Cooldown")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.hostPlayer != Null;
		Ability Cooldown(Event Player, Button(Ability 2)) > 0;
	}

	actions
	{
		Set Ability Cooldown(Event Player.hostPlayer, Button(Ability 2), Ability Cooldown(Event Player, Button(Ability 2)));
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		Set Ability Cooldown(Event Player.hostPlayer, Button(Ability 2), Ability Cooldown(Event Player, Button(Ability 2)));
	}
}

rule("Bot ult charge goes to Player")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.hostPlayer != Null;
		Ultimate Charge Percent(Event Player) > 1;
	}

	actions
	{
		Set Ultimate Charge(Event Player.hostPlayer, Ultimate Charge Percent(Event Player.hostPlayer) + 1);
		Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) - 1);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Bot has full HP -> damage it")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.hostPlayer != Null;
		Health(Event Player) >= Max Health(Event Player);
	}

	actions
	{
		Clear Status(Event Player, Phased Out);
		Wait(0.100, Ignore Condition);
		Damage(Event Player, Null, Max Health(Event Player));
		Set Status(Event Player, Event Player.hostPlayer, Phased Out, 9999);
	}
}

rule("==TEST== Dummy Bot Spawn without hostPlayer")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Holding Button(Event Player, Primary Fire);
	}
}

rule("If Bot phased bc of ability, make Player phased")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.hostPlayer != Null;
		Is Using Ability 1(Event Player) == True;
		(Hero Of(Event Player) == Hero(Reaper) || Hero Of(Event Player) == Hero(Moira)) == True;
	}

	actions
	{
		disabled If(Has Status(Event Player.hostPlayer, Phased Out) == False);
		Set Status(Event Player.hostPlayer, Event Player, Phased Out, 9999);
		disabled End;
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
		Clear Status(Event Player.hostPlayer, Phased Out);
	}
}

rule("Give Bot1 motion control")
{
	event
	{
		Subroutine;
		GiveControlToBot1;
	}

	actions
	{
		Detach Players(Event Player.bot1);
		Attach Players(Event Player, Event Player.bot1, Vector(0, 0, 0));
		disabled Start Forcing Throttle(Global._TEST_BOT_, Z Component Of(Throttle Of(Event Player)), Z Component Of(Throttle Of(Event Player)),
			Z Component Of(Throttle Of(Event Player)) * -1, Z Component Of(Throttle Of(Event Player)) * -1, X Component Of(Throttle Of(
			Event Player)) * -1, X Component Of(Throttle Of(Event Player)) * -1);
		Start Throttle In Direction(Event Player.bot1, Throttle Of(Event Player), 1, To Player, Replace existing throttle,
			Direction and Magnitude);
		disabled Wait(0.100, Ignore Condition);
		disabled Loop;
		Event Player.hasControl = False;
	}
}

rule("Player uses Ability 1 (give control to bot1)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.hostPlayer == Null;
		Array Contains(Global.HEROES_MOVE_ABILITY1, Hero Of(Event Player.bot1)) == True;
		Is Using Ability 1(Event Player.bot1) == True;
	}

	actions
	{
		If(Event Player.hasControl == True);
			Call Subroutine(GiveControlToBot1);
		End;
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
		Call Subroutine(GiveControlToPlayer);
	}
}

rule("Player stop moving")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Throttle Of(Event Player) == Vector(0, 0, 0);
		Event Player.hostPlayer == Null;
		Event Player.hasControl == False;
	}

	actions
	{
		Stop Throttle In Direction(Event Player.bot1);
	}
}

rule("Player start moving")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Throttle Of(Event Player) != Vector(0, 0, 0);
		Event Player.hostPlayer == Null;
		Event Player.hasControl == False;
	}

	actions
	{
		Start Throttle In Direction(Event Player.bot1, Throttle Of(Event Player), 1, To Player, Replace existing throttle,
			Direction and Magnitude);
	}
}

rule("Give Player motion control")
{
	event
	{
		Subroutine;
		GiveControlToPlayer;
	}

	actions
	{
		Stop Throttle In Direction(Event Player.bot1);
		Detach Players(Event Player);
		Attach Players(Event Player.bot1, Event Player, Vector(0, 0, 0));
		disabled Start Forcing Throttle(Global._TEST_BOT_, Z Component Of(Throttle Of(Event Player)), Z Component Of(Throttle Of(Event Player)),
			Z Component Of(Throttle Of(Event Player)) * -1, Z Component Of(Throttle Of(Event Player)) * -1, X Component Of(Throttle Of(
			Event Player)) * -1, X Component Of(Throttle Of(Event Player)) * -1);
		disabled Start Throttle In Direction(Event Player.bot1, Throttle Of(Event Player), 1, To Player, Replace existing throttle,
			Direction and Magnitude);
		disabled Wait(0.100, Ignore Condition);
		disabled Loop;
		Event Player.hasControl = True;
	}
}

rule("Player uses Ability 2 (give control to bot1)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.hostPlayer == Null;
		Array Contains(Global.HEROES_MOVE_ABILITY2, Hero Of(Event Player.bot1)) == True;
		Is Using Ability 2(Event Player.bot1) == True;
	}

	actions
	{
		If(Event Player.hasControl == True);
			Call Subroutine(GiveControlToBot1);
		End;
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
		Call Subroutine(GiveControlToPlayer);
	}
}