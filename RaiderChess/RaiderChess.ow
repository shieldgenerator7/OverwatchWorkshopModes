variables
{
	global:
		0: PIECE_MOVE_DURATION
		1: PIECE_MOVE_DELAY
		2: pieceMoveTimer
		3: CARDS_HEROES
		4: CARDS_TYPES

	player:
		0: PLAYER_FACING_DIR
		1: playerTargetPos
		2: playerTargetPosPrev
		3: playerTargetSquare
		4: playerTargetEffectId
		5: playerTargetSquareGrid
		6: playerTargetSquareLine
		7: pieceOwner
		8: playerCards
		9: playerCardEffectIds
		10: loopVar
		11: loopVar2
		12: playerHandPosList
		13: playerInputMode
		14: playerClickUsed
		15: playerSelectedCardIndex
		16: playerCardTypes
		17: pieceType
}

subroutines
{
	0: drawCard
	1: refreshHand
	2: refreshTargetEffect
	3: removeCard
}

rule("Game Setup")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Disable Built-In Game Mode Respawning(All Players(All Teams));
		Disable Built-In Game Mode Scoring;
		Set Global Variable(PIECE_MOVE_DURATION, 1);
		Set Global Variable(PIECE_MOVE_DELAY, -5.000);
		Set Global Variable(pieceMoveTimer, Global Variable(PIECE_MOVE_DURATION));
		Chase Global Variable At Rate(pieceMoveTimer, 0, 1, None);
	}
}

rule("Game Setup: Card Draw Deck")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Set Global Variable(CARDS_HEROES, Empty Array);
		"Card Types: 2=Raider, 3=Instant Heal, 5=Instant Util, 7=Instant Attack; Times the type by 100 to indicate it's an ultimate"
		Set Global Variable(CARDS_TYPES, Empty Array);
		"Solder - Raider"
		Modify Global Variable(CARDS_HEROES, Append To Array, Hero(Soldier: 76));
		Modify Global Variable(CARDS_TYPES, Append To Array, 2);
		"Reinhardt - Raider"
		Modify Global Variable(CARDS_HEROES, Append To Array, Hero(Reinhardt));
		Modify Global Variable(CARDS_TYPES, Append To Array, 2);
		"Mercy - Raider"
		Modify Global Variable(CARDS_HEROES, Append To Array, Hero(Mercy));
		Modify Global Variable(CARDS_TYPES, Append To Array, 2);
		"Genji - Raider"
		Modify Global Variable(CARDS_HEROES, Append To Array, Hero(Genji));
		Modify Global Variable(CARDS_TYPES, Append To Array, 2);
		"Soldier - Instant Heal"
		Modify Global Variable(CARDS_HEROES, Append To Array, Hero(Soldier: 76));
		Modify Global Variable(CARDS_TYPES, Append To Array, 3);
		"Doomfist - Instant Attack"
		Modify Global Variable(CARDS_HEROES, Append To Array, Hero(Doomfist));
		Modify Global Variable(CARDS_TYPES, Append To Array, 7);
	}
}

rule("Global Movement Timer")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Absolute Value(Global Variable(pieceMoveTimer)) <= 0.020;
	}

	actions
	{
		Stop Chasing Global Variable(pieceMoveTimer);
		"If it finished red light time,"
		If(Compare(Global Variable(pieceMoveTimer), <, 0));
			"Start green light time"
			Set Global Variable(pieceMoveTimer, Global Variable(PIECE_MOVE_DURATION));
		"If finished green light time"
		Else;
			"Start red light time"
			Set Global Variable(pieceMoveTimer, Global Variable(PIECE_MOVE_DELAY));
		End;
		Chase Global Variable At Rate(pieceMoveTimer, 0, 1, None);
	}
}

rule("==SKIP SETUP==")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Assembling Heroes == True;
	}

	actions
	{
		Set Match Time(0);
	}
}

rule("==TEST== Pharah Pointer ==")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	actions
	{
		Create HUD Text(Event Player, Custom String("Position: {0}", Position Of(Event Player), Null, Null), Null, Null, Left, 0, White,
			White, White, String, Default Visibility);
		Create HUD Text(Event Player, Custom String("Target Square: {0}", Player Variable(Event Player, playerTargetSquare), Null, Null),
			Null, Null, Left, 0, White, White, White, String, Default Visibility);
		Create HUD Text(Event Player, Custom String("Target Square Grid: {0}", Player Variable(Event Player, playerTargetSquareGrid), Null,
			Null), Null, Null, Left, 0, White, White, White, String, Default Visibility);
		Create HUD Text(Event Player, Custom String("Target Square Line: {0}", Player Variable(Event Player, playerTargetSquareLine), Null,
			Null), Null, Null, Left, 0, White, White, White, String, Default Visibility);
	}
}

rule("King Spawn In (Player)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Dummy Bot(Event Player) == False;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Set Gravity(Event Player, 0);
		Wait(0.250, Ignore Condition);
		Set Player Variable(Event Player, playerHandPosList, Empty Array);
		If(Compare(Team Of(Event Player), ==, Team 1));
			Teleport(Event Player, Vector(-25.000, 10, 0));
			Set Player Variable(Event Player, PLAYER_FACING_DIR, Left);
			For Player Variable(Event Player, loopVar, 0, 8, 1);
				Modify Player Variable(Event Player, playerHandPosList, Append To Array, Vector(Multiply(X Component Of(Player Variable(
					Event Player, PLAYER_FACING_DIR)), -18.000), 0, Add(Multiply(Player Variable(Event Player, loopVar), -4.000), 14)));
			End;
		Else;
			Teleport(Event Player, Vector(25, 10, 0));
			Set Player Variable(Event Player, PLAYER_FACING_DIR, Right);
			For Player Variable(Event Player, loopVar, 0, 8, 1);
				Modify Player Variable(Event Player, playerHandPosList, Append To Array, Vector(Multiply(X Component Of(Player Variable(
					Event Player, PLAYER_FACING_DIR)), -18.000), 0, Add(Multiply(Player Variable(Event Player, loopVar), 4), -14.000)));
			End;
		End;
		Set Facing(Event Player, Add(Player Variable(Event Player, PLAYER_FACING_DIR), Down), To World);
		Set Status(Event Player, Null, Rooted, 9999);
		Set Primary Fire Enabled(Event Player, False);
		Set Secondary Fire Enabled(Event Player, False);
		Set Ability 1 Enabled(Event Player, False);
		Set Ability 2 Enabled(Event Player, False);
		Set Ultimate Ability Enabled(Event Player, False);
		Disallow Button(Event Player, Jump);
		Set Player Variable(Event Player, playerTargetPos, Vector(0, -100.000, 0));
		Create Effect(All Players(All Teams), Sphere, White, Player Variable(Event Player, playerTargetSquare), 2, Position and Radius);
		Set Player Variable(Event Player, playerTargetEffectId, Last Created Entity);
		Set Player Variable(Event Player, playerCards, Empty Array);
		Set Player Variable(Event Player, playerCardTypes, Empty Array);
		Set Player Variable(Event Player, playerCardEffectIds, Empty Array);
		For Player Variable(Event Player, loopVar, 0, 8, 1);
			Call Subroutine(drawCard);
		End;
		Call Subroutine(refreshHand);
	}
}

rule("King looks at square")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, playerTargetPos) != Player Variable(Event Player, playerTargetPosPrev);
	}

	actions
	{
		Set Player Variable(Event Player, playerTargetPosPrev, Player Variable(Event Player, playerTargetPos));
		If(Compare(Y Component Of(Player Variable(Event Player, playerTargetPos)), ==, 0));
			Set Player Variable(Event Player, playerTargetSquare, Vector(Add(2, Multiply(4, Round To Integer(Divide(X Component Of(
				Player Variable(Event Player, playerTargetPos)), 4), Down))), 0, Add(2, Multiply(4, Round To Integer(Divide(Z Component Of(
				Player Variable(Event Player, playerTargetPos)), 4), Down)))));
			Set Player Variable(Event Player, playerTargetSquareGrid, Vector(Min(14, Max(-14.000, X Component Of(Player Variable(Event Player,
				playerTargetSquare)))), 0, Min(14, Max(-14.000, Z Component Of(Player Variable(Event Player, playerTargetSquare))))));
			Set Player Variable(Event Player, playerTargetSquareLine, Vector(Multiply(X Component Of(Player Variable(Event Player,
				PLAYER_FACING_DIR)), -14.000), 0, Z Component Of(Player Variable(Event Player, playerTargetSquareGrid))));
		End;
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("King looking around (ongoing)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		Set Player Variable(Event Player, playerTargetPos, Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(
			Event Player), Multiply(Facing Direction Of(Event Player), 100)), Event Player, All Players(All Teams), False));
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("King Select Card (Player Action Part 1)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Button Held(Event Player, Primary Fire) == True;
		Count Of(All Living Players(Team Of(Event Player))) < 6;
		"Player is clicking in the card row"
		Index Of Array Value(Player Variable(Event Player, playerHandPosList), Player Variable(Event Player, playerTargetSquare)) >= 0;
		"If input mode is \"Player select card to play\""
		disabled Player Variable(Event Player, playerInputMode) == 0;
		Player Variable(Event Player, playerClickUsed) == False;
		"There's actually a card at the given index"
		Count Of(Player Variable(Event Player, playerCards)) > Index Of Array Value(Player Variable(Event Player, playerHandPosList),
			Player Variable(Event Player, playerTargetSquare));
	}

	actions
	{
		Set Player Variable(Event Player, playerClickUsed, True);
		Set Player Variable(Event Player, playerSelectedCardIndex, Index Of Array Value(Player Variable(Event Player, playerHandPosList),
			Player Variable(Event Player, playerTargetSquare)));
		"Set input mode to \"Player select place to play card\""
		Set Player Variable(Event Player, playerInputMode, 1);
		Call Subroutine(refreshTargetEffect);
	}
}

rule("King plays card at position (Player Action Part 2)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Button Held(Event Player, Primary Fire) == True;
		Count Of(All Living Players(Team Of(Event Player))) < 6;
		"If input mode is \"Player select place to play card\""
		Player Variable(Event Player, playerInputMode) == 1;
		Player Variable(Event Player, playerClickUsed) == False;
	}

	actions
	{
		Set Player Variable(Event Player, playerClickUsed, True);
		If(Compare(Value In Array(Player Variable(Event Player, playerCardTypes), Player Variable(Event Player, playerSelectedCardIndex)),
			==, 2));
			Create Dummy Bot(Value In Array(Player Variable(Event Player, playerCards), Player Variable(Event Player,
				playerSelectedCardIndex)), Team Of(Event Player), -1.000, Player Variable(Event Player, playerTargetSquareLine),
				Player Variable(Event Player, PLAYER_FACING_DIR));
		Else;
			Create Dummy Bot(Value In Array(Player Variable(Event Player, playerCards), Player Variable(Event Player,
				playerSelectedCardIndex)), Team Of(Event Player), -1.000, Add(Player Variable(Event Player, playerTargetSquareGrid), Multiply(
				Up, 5)), Player Variable(Event Player, PLAYER_FACING_DIR));
		End;
		"Set input mode to \"Player select card to play\""
		Set Player Variable(Event Player, playerInputMode, 0);
		Call Subroutine(refreshTargetEffect);
		Wait(0.250, Ignore Condition);
		Call Subroutine(removeCard);
	}
}

rule("King mouse up (Player Action Part 1.5)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Button Held(Event Player, Primary Fire) == False;
	}

	actions
	{
		Set Player Variable(Event Player, playerClickUsed, False);
	}
}

rule("King RMB - cancel card select (Player Action Part 1.75)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Or(Is Button Held(Event Player, Secondary Fire), Is Button Held(Event Player, Crouch)) == True;
		"If input mode is \"Player select place to play card\""
		Player Variable(Event Player, playerInputMode) == 1;
	}

	actions
	{
		Set Player Variable(Event Player, playerClickUsed, False);
		"Set input mode to \"Player select card to play\""
		Set Player Variable(Event Player, playerInputMode, 0);
		Call Subroutine(refreshTargetEffect);
	}
}

rule("Piece Spawn In")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Set Player Variable(Event Player, pieceOwner, Value In Array(Filtered Array(All Players(Team Of(Event Player)), Compare(
			Is Dummy Bot(Current Array Element), ==, False)), 0));
		"Set piece type to the piece type in owner's selected index"
		Set Player Variable(Event Player, pieceType, Value In Array(Player Variable(Player Variable(Event Player, pieceOwner),
			playerCardTypes), Player Variable(Player Variable(Event Player, pieceOwner), playerSelectedCardIndex)));
	}
}

rule("Piece Dies")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Destroy Dummy Bot(Team Of(Event Player), Slot Of(Event Player));
	}
}

rule("Piece reaches enemy line")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
		Absolute Value(Subtract(X Component Of(Position Of(Event Player)), Multiply(X Component Of(Player Variable(Player Variable(
			Event Player, pieceOwner), PLAYER_FACING_DIR)), 17))) <= 1;
		Position Of(Event Player) != 0;
		Facing Direction Of(Event Player) != 0;
		Position Of(Event Player) != Vector(0, 0, 0);
		Facing Direction Of(Event Player) != Vector(0, 0, 0);
		Player Variable(Event Player, pieceType) == 2;
	}

	actions
	{
		Modify Team Score(Team Of(Event Player), 1);
		If(Compare(Hero Of(Event Player), ==, Hero(Mercy)));
			Start Forcing Throttle(Event Player, 1, 1, 0, 0, 0, 0);
		End;
	}
}

disabled rule("Piece Moves")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
		Global Variable(pieceMoveTimer) > 0;
	}

	actions
	{
		Start Forcing Throttle(Event Player, 1, 1, 0, 0, 0, 0);
		Stop Holding Button(Event Player, Primary Fire);
		Start Holding Button(Event Player, Secondary Fire);
	}
}

disabled rule("Piece Stops Moving")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
		Global Variable(pieceMoveTimer) < 0;
	}

	actions
	{
		Stop Forcing Throttle(Event Player);
		Stop Holding Button(Event Player, Secondary Fire);
		Start Holding Button(Event Player, Primary Fire);
	}
}

rule("King.drawCard()")
{
	event
	{
		Subroutine;
		drawCard;
	}

	actions
	{
		Abort If(Compare(Count Of(Player Variable(Event Player, playerCards)), >=, 8));
		Set Player Variable(Event Player, playerSelectedCardIndex, Random Integer(0, Subtract(Count Of(Global Variable(CARDS_HEROES)),
			1)));
		Modify Player Variable(Event Player, playerCards, Append To Array, Value In Array(Global Variable(CARDS_HEROES), Player Variable(
			Event Player, playerSelectedCardIndex)));
		Modify Player Variable(Event Player, playerCardTypes, Append To Array, Value In Array(Global Variable(CARDS_TYPES),
			Player Variable(Event Player, playerSelectedCardIndex)));
		Call Subroutine(refreshTargetEffect);
	}
}

rule("King.removeCard()")
{
	event
	{
		Subroutine;
		removeCard;
	}

	actions
	{
		Modify Player Variable(Event Player, playerCards, Remove From Array By Index, Player Variable(Event Player,
			playerSelectedCardIndex));
		Modify Player Variable(Event Player, playerCardTypes, Remove From Array By Index, Player Variable(Event Player,
			playerSelectedCardIndex));
		Set Player Variable(Event Player, playerSelectedCardIndex, -1.000);
		Call Subroutine(refreshHand);
	}
}

rule("King.refreshHand() (makes hand card visual effects)")
{
	event
	{
		Subroutine;
		refreshHand;
	}

	actions
	{
		If(Compare(Count Of(Player Variable(Event Player, playerCardEffectIds)), >, 0));
			"Remove old effects first"
			For Player Variable(Event Player, loopVar2, 0, Count Of(Player Variable(Event Player, playerCardEffectIds)), 1);
				Destroy Effect(Value In Array(Player Variable(Event Player, playerCardEffectIds), Player Variable(Event Player, loopVar2)));
				Destroy In-World Text(Value In Array(Player Variable(Event Player, playerCardEffectIds), Player Variable(Event Player, loopVar2)));
			End;
		End;
		Set Player Variable(Event Player, playerCardEffectIds, Empty Array);
		"Add an effect for each card"
		For Player Variable(Event Player, loopVar2, 0, Count Of(Player Variable(Event Player, playerCards)), 1);
			Create Effect(Event Player, Ring, White, Value In Array(Player Variable(Event Player, playerHandPosList), Player Variable(
				Event Player, loopVar2)), 1.500, None);
			Modify Player Variable(Event Player, playerCardEffectIds, Append To Array, Last Created Entity);
			"Soldier: 76"
			If(Compare(Value In Array(Player Variable(Event Player, playerCards), Player Variable(Event Player, loopVar2)), ==, Hero(
				Soldier: 76)));
				"Soldier: 76 - Raider"
				If(Compare(Value In Array(Player Variable(Event Player, playerCardTypes), Player Variable(Event Player, loopVar2)), ==, 2));
					Create In-World Text(Event Player, Custom String("{0} - RAIDER", Hero Icon String(Hero(Soldier: 76)), Null, Null), Value In Array(
						Player Variable(Event Player, playerHandPosList), Add(Player Variable(Event Player, loopVar2), -1.000)), 2, Do Not Clip,
						String, White, Default Visibility);
				"Soldier: 76 - Instant Heal"
				Else If(Compare(Value In Array(Player Variable(Event Player, playerCardTypes), Player Variable(Event Player, loopVar2)), ==, 3));
					Create In-World Text(Event Player, Custom String("{0} - Instant Heal", Hero Icon String(Hero(Soldier: 76)), Null, Null),
						Value In Array(Player Variable(Event Player, playerHandPosList), Add(Player Variable(Event Player, loopVar2), -1.000)), 2,
						Do Not Clip, String, Yellow, Default Visibility);
				End;
			"Reinhardt - Raider"
			Else If(Compare(Value In Array(Player Variable(Event Player, playerCards), Player Variable(Event Player, loopVar2)), ==, Hero(
					Reinhardt)));
				Create In-World Text(Event Player, Custom String("{0} - RAIDER", Hero Icon String(Hero(Reinhardt)), Null, Null), Value In Array(
					Player Variable(Event Player, playerHandPosList), Add(Player Variable(Event Player, loopVar2), -1.000)), 2, Do Not Clip,
					String, White, Default Visibility);
			"Mercy - Raider"
			Else If(Compare(Value In Array(Player Variable(Event Player, playerCards), Player Variable(Event Player, loopVar2)), ==, Hero(
					Mercy)));
				Create In-World Text(Event Player, Custom String("{0} - RAIDER", Hero Icon String(Hero(Mercy)), Null, Null), Value In Array(
					Player Variable(Event Player, playerHandPosList), Add(Player Variable(Event Player, loopVar2), -1.000)), 2, Do Not Clip,
					String, White, Default Visibility);
			"Genji - Raider"
			Else If(Compare(Value In Array(Player Variable(Event Player, playerCards), Player Variable(Event Player, loopVar2)), ==, Hero(
					Genji)));
				Create In-World Text(Event Player, Custom String("{0} - RAIDER", Hero Icon String(Hero(Genji)), Null, Null), Value In Array(
					Player Variable(Event Player, playerHandPosList), Add(Player Variable(Event Player, loopVar2), -1.000)), 2, Do Not Clip,
					String, White, Default Visibility);
			"Doomfist"
			Else If(Compare(Value In Array(Player Variable(Event Player, playerCards), Player Variable(Event Player, loopVar2)), ==, Hero(
					Doomfist)));
				"Doomfist - Instant Attack"
				Create In-World Text(Event Player, Custom String("{0} - INSTANT ATTACK", Hero Icon String(Hero(Doomfist)), Null, Null),
					Value In Array(Player Variable(Event Player, playerHandPosList), Add(Player Variable(Event Player, loopVar2), -1.000)), 2,
					Do Not Clip, String, Red, Default Visibility);
			End;
			Modify Player Variable(Event Player, playerCardEffectIds, Append To Array, Last Text ID);
		End;
	}
}

rule("King.refreshTargetEffect() (makes selector visual effects)")
{
	event
	{
		Subroutine;
		refreshTargetEffect;
	}

	actions
	{
		Destroy Effect(Player Variable(Event Player, playerTargetEffectId));
		If(Compare(Player Variable(Event Player, playerInputMode), ==, 0));
			Create Effect(All Players(All Teams), Sphere, White, Player Variable(Event Player, playerTargetSquare), 2, Position and Radius);
		Else;
			If(Compare(Value In Array(Player Variable(Event Player, playerCardTypes), Player Variable(Event Player, playerSelectedCardIndex)),
				==, 2));
				Create Effect(All Players(All Teams), Sphere, Green, Player Variable(Event Player, playerTargetSquareLine), 2,
					Position and Radius);
			Else If(Compare(Value In Array(Player Variable(Event Player, playerCardTypes), Player Variable(Event Player,
					playerSelectedCardIndex)), ==, 3));
				Create Effect(All Players(All Teams), Sphere, Yellow, Player Variable(Event Player, playerTargetSquareGrid), 2,
					Position and Radius);
			Else If(Compare(Value In Array(Player Variable(Event Player, playerCardTypes), Player Variable(Event Player,
					playerSelectedCardIndex)), ==, 5));
				Create Effect(All Players(All Teams), Sphere, Blue, Player Variable(Event Player, playerTargetSquareGrid), 2, Position and Radius);
			Else If(Compare(Value In Array(Player Variable(Event Player, playerCardTypes), Player Variable(Event Player,
					playerSelectedCardIndex)), ==, 7));
				Create Effect(All Players(All Teams), Sphere, Red, Player Variable(Event Player, playerTargetSquareGrid), 2, Position and Radius);
			End;
		End;
		Set Player Variable(Event Player, playerTargetEffectId, Last Created Entity);
	}
}

rule("King Draw Card (Melee)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Button Held(Event Player, Melee) == True;
	}

	actions
	{
		Call Subroutine(drawCard);
		Call Subroutine(refreshHand);
	}
}

rule("Soldier Run")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
		Global Variable(pieceMoveTimer) > 0;
		Player Variable(Event Player, pieceType) == 2;
	}

	actions
	{
		Stop Holding Button(Event Player, Primary Fire);
		Start Forcing Throttle(Event Player, 1, 1, 0, 0, 0, 0);
		Start Holding Button(Event Player, Ability 1);
	}
}

rule("Soldier Stand")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
		Global Variable(pieceMoveTimer) < 0;
		Player Variable(Event Player, pieceType) == 2;
	}

	actions
	{
		Stop Forcing Throttle(Event Player);
		Stop Holding Button(Event Player, Ability 1);
		Start Holding Button(Event Player, Primary Fire);
		Press Button(Event Player, Secondary Fire);
	}
}

rule("Reinhardt Run")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
		Global Variable(pieceMoveTimer) > 0;
		Player Variable(Event Player, pieceType) == 2;
	}

	actions
	{
		Start Forcing Throttle(Event Player, 1, 1, 0, 0, 0, 0);
		Stop Holding Button(Event Player, Secondary Fire);
		Start Holding Button(Event Player, Primary Fire);
	}
}

rule("Reinhardt Stand")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
		Global Variable(pieceMoveTimer) < 0;
		Player Variable(Event Player, pieceType) == 2;
	}

	actions
	{
		Stop Forcing Throttle(Event Player);
		Stop Holding Button(Event Player, Primary Fire);
		Start Holding Button(Event Player, Secondary Fire);
	}
}

rule("Mercy \"Run\"")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mercy;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
		Player Variable(Event Player, pieceType) == 2;
	}

	actions
	{
		Stop Holding Button(Event Player, Secondary Fire);
		Start Holding Button(Event Player, Primary Fire);
		Wait(2, Ignore Condition);
		Stop Holding Button(Event Player, Primary Fire);
		Start Holding Button(Event Player, Secondary Fire);
		Wait(2, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Mercy \"Stand\"")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mercy;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
		Global Variable(pieceMoveTimer) < 0;
		Player Variable(Event Player, pieceType) == 2;
	}

	actions
	{
		Start Holding Button(Event Player, Ability 1);
		Wait(1, Ignore Condition);
		Stop Holding Button(Event Player, Ability 1);
	}
}

rule("Genji \"Run\"")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
		Player Variable(Event Player, pieceType) == 2;
		Global Variable(pieceMoveTimer) > 0;
	}

	actions
	{
		Stop Holding Button(Event Player, Secondary Fire);
		Press Button(Event Player, Ability 1);
	}
}

rule("Genji Stand")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
		Global Variable(pieceMoveTimer) < 0;
		Player Variable(Event Player, pieceType) == 2;
	}

	actions
	{
		Start Holding Button(Event Player, Secondary Fire);
	}
}

rule("Soldier - Instant Heal")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Player Variable(Event Player, pieceType) == 3;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Start Holding Button(Event Player, Ability 2);
		Wait(5, Ignore Condition);
		Kill(Event Player, Null);
	}
}

rule("Doomfist - Instant Attack")
{
	event
	{
		Ongoing - Each Player;
		All;
		Doomfist;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Player Variable(Event Player, pieceType) == 7;
		disabled Is On Ground(Event Player) == True;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Wait(1.500, Ignore Condition);
		Start Holding Button(Event Player, Ability 2);
		Wait(0.250, Ignore Condition);
		Stop Holding Button(Event Player, Ability 2);
		Wait(0.250, Ignore Condition);
		Press Button(Event Player, Primary Fire);
		Wait(0.100, Ignore Condition);
		Press Button(Event Player, Primary Fire);
		Wait(0.250, Ignore Condition);
		Start Holding Button(Event Player, Ability 1);
		Wait(0.250, Ignore Condition);
		Stop Holding Button(Event Player, Ability 1);
		Wait(0.250, Ignore Condition);
		Press Button(Event Player, Primary Fire);
		Wait(0.100, Ignore Condition);
		Press Button(Event Player, Primary Fire);
		Wait(0.250, Ignore Condition);
		Start Holding Button(Event Player, Secondary Fire);
		Wait(2.500, Ignore Condition);
		Kill(Event Player, Null);
	}
}