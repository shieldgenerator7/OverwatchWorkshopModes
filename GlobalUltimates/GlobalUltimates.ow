variables
{
	global:
		0: GLOBAL_ULT_DURATION
		1: ULTIMATE_DATA
		2: ultimateTimeLeftEntries
		4: _targetPlayerList
		5: TRACER_ULT_BLINK_DISTANCE
		6: roadhogUltTimeLeft
		7: REAPER_ULT_DAMAGE_PER_SECOND
		8: mercyUltTimeLeft
		9: widowmakerUltTimeLeft
		10: ZENYATTA_ULT_HEAL_PER_SECOND
		11: echoUltTimeLeft
		12: _i_
		13: _targetPlayer
		14: ECHO_ULT_CHARGE_PER_SECOND
		15: pharahUltTimeLeft
		16: PHARAH_ULT_JUMP_HEIGHT
		17: genjiUltTimeLeft
		18: brigitteUltTimeLeft
		19: BRIGITTE_ULT_ARMOR_PER_SECOND
		20: dvaUltTimeLeft
		21: DVA_ULT_FORCE_SPEED
		22: sigmaUltTimeLeft
		28: ASHE_ULT_DURATION
		29: asheUltTimeLeft
		30: _targetEntry
		31: tracerUltTimeLeft

	player:
		0: _targetPlayer
		1: _targetPlayerList
		2: _i_
		3: reaperUltTimeLeft
		4: zenyattaUltTimeLeft
		5: ultimateDataEntry
		6: ultimateTimeLeftEntry
		7: ultimateTimeLeftIndex
}

rule("Game Setup")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.GLOBAL_ULT_DURATION = Workshop Setting Real(Custom String("All heroes"), Custom String("Ult Duration"), 10, 1, 60, 0);
		Global.ULTIMATE_DATA = Array(Array(Hero(Ana), Custom String("NAP TIME... {0}", Ability Icon String(Hero(Ana), Button(Ability 1))),
			Custom String("EVERYONE PUT TO SLEEP"), False), Array(Hero(Ashe), Custom String("HANDSOME FOR 8 SECONDS {0}",
			Ability Icon String(Hero(Ashe), Button(Ultimate))), Custom String("EVERYONE FORCED TO EMOTE"), True));
		Global.ultimateTimeLeftEntries = Array();
		Global.ASHE_ULT_DURATION = Workshop Setting Real(Custom String("Hero Settings"), Custom String("Ashe Ult Duration"), 8, 1, 60, 0);
		Global.BRIGITTE_ULT_ARMOR_PER_SECOND = Workshop Setting Real(Custom String("Hero Settings"), Custom String(
			"Brigitte Ult Armor Per Second"), 100, 10, 1000, 0);
		Global.DVA_ULT_FORCE_SPEED = Workshop Setting Real(Custom String("Hero Settings"), Custom String("D.Va Ult Force Speed"), 30, 10,
			100, 0);
			"Doomfist Ult Max Camera Distance"), 20, 1, 50, 0);
		Global.ECHO_ULT_CHARGE_PER_SECOND = Workshop Setting Real(Custom String("Hero Settings"), Custom String(
			"Echo Ult Charge Per Second"), 10, 1, 60, 0);
		Global.PHARAH_ULT_JUMP_HEIGHT = Workshop Setting Real(Custom String("Hero Settings"), Custom String("Pharah Ult Jump Height"), 5,
			1, 100, 0);
		Global.REAPER_ULT_DAMAGE_PER_SECOND = Workshop Setting Real(Custom String("Hero Settings"), Custom String(
			"Reaper Ult Damage Per Second"), 100, 10, 1000, 0);
		Global.TRACER_ULT_BLINK_DISTANCE = Workshop Setting Real(Custom String("Hero Settings"), Custom String(
			"Tracer Ult Blink Distance"), 5, 1, 20, 0);
		Global.ZENYATTA_ULT_HEAL_PER_SECOND = Workshop Setting Real(Custom String("Hero Settings"), Custom String(
			"Zenyatta Ult Heal Per Second"), 100, 10, 1000, 0);
	}
}

rule("Skip setup")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is In Setup == True;
	}

	actions
	{
		Set Match Time(0);
	}
}

rule("Skip assembly")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Assembling Heroes == True;
	}

	actions
	{
		Set Match Time(0);
	}
}

rule("==TEST== Teleport to objective ==")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player == Host Player;
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		Teleport(All Players(All Teams), Objective Position(0));
		Set Ultimate Charge(All Players(All Teams), 100);
	}
}

rule("Player Setup - Disable normal ultimate")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Disallow Button(Event Player, Button(Ultimate));
	}
}

rule("Player presses ultimate button")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
	}

	actions
	{
		Set Ultimate Charge(Event Player, 0);
		Event Player.ultimateDataEntry = Filtered Array(Global.ULTIMATE_DATA, Hero Of(Event Player) == Current Array Element[0])[0];
		Big Message(All Players(All Teams), Custom String("{0} {1}", Hero Icon String(Event Player.ultimateDataEntry[0]),
			Event Player.ultimateDataEntry[1]));
		Event Player.ultimateTimeLeftIndex = Count Of(Global.ultimateTimeLeftEntries);
		Create HUD Text(All Players(All Teams), Custom String("ASHE ULT: {0}",
			Global.ultimateTimeLeftEntries[Event Player.ultimateTimeLeftIndex][1]), Null, Null, Left, 0, Color(White), Color(White), Color(
			White), Visible To and String, Default Visibility);
		Event Player.ultimateTimeLeftEntry = Array(Event Player.ultimateDataEntry[0], Global.GLOBAL_ULT_DURATION, Last Text ID,
			Event Player);
		Modify Global Variable(ultimateTimeLeftEntries, Append To Array, 0);
		Global.ultimateTimeLeftEntries[Event Player.ultimateTimeLeftIndex] = Event Player.ultimateTimeLeftEntry;
		If(Event Player.ultimateDataEntry[3] == True);
			Set Ultimate Ability Enabled(Event Player, False);
			Wait(Global.GLOBAL_ULT_DURATION, Ignore Condition);
			Set Ultimate Ability Enabled(Event Player, True);
		End;
	}
}

rule("Decrement ultimate time left")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Count Of(Global.ultimateTimeLeftEntries) >= 1;
	}

	actions
	{
		For Global Variable(_i_, 0, Count Of(Global.ultimateTimeLeftEntries), 1);
			"Take the entry to modify out of the array"
			Global._targetEntry = Global.ultimateTimeLeftEntries[Global._i_];
			Global._targetPlayer = Global._targetEntry[3];
			Global._targetPlayer.ultimateTimeLeftIndex = Global._i_;
			"Modify the time left in the entry"
			Global._targetEntry[1] -= 0.100;
			If(Global._targetEntry[1] > 0);
				"Put modified entry back into the array"
				Global.ultimateTimeLeftEntries[Global._i_] = Global._targetEntry;
			Else;
				"Remove HUD"
				Destroy HUD Text(Global._targetEntry[2]);
				"Remove entry from array"
				Modify Global Variable(ultimateTimeLeftEntries, Remove From Array By Index, Global._i_);
			End;
		End;
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("ULT: Ana")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Ana);
	}

	actions
	{
		Set Status(Filtered Array(All Players(All Teams), Hero Of(Current Array Element) != Hero(Ana)), Event Player, Asleep,
			Global.GLOBAL_ULT_DURATION);
	}
}

rule("ULT: Ashe")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ashe;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Ashe);
	}

	actions
	{
		Global.asheUltTimeLeft = Global.ASHE_ULT_DURATION;
		Chase Global Variable Over Time(asheUltTimeLeft, 0, Global.ASHE_ULT_DURATION, None);
		Set Ultimate Ability Enabled(Event Player, False);
		Wait(Global.ASHE_ULT_DURATION, Ignore Condition);
		Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("ULT: Ashe effect")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is True For Any(Global.ultimateTimeLeftEntries, Current Array Element[0] == Hero(Ashe)) == True;
	}

	actions
	{
		Communicate(Filtered Array(All Players(All Teams), Is Communicating Any Emote(Current Array Element) == False && Hero Of(
			Current Array Element) != Hero(Ashe)), Emote Up);
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
		Big Message(All Players(All Teams), Custom String("{0} OK BACK TO CASUAL", Hero Icon String(Hero(Ashe))));
	}
}

rule("ULT: Baptiste")
{
	event
	{
		Ongoing - Each Player;
		All;
		Baptiste;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Baptiste);
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("{0} NO DYING ON MY WATCH! {1}", Hero Icon String(Hero(Baptiste)),
			Ability Icon String(Hero(Baptiste), Button(Ability 2))));
		Set Status(All Players(All Teams), Event Player, Unkillable, Global.GLOBAL_ULT_DURATION);
		disabled Set Ultimate Ability Enabled(Event Player, False);
		disabled Wait(Global.GLOBAL_ULT_DURATION, Ignore Condition);
		disabled Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("ULT: Bastion")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Bastion);
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("{0} COME OUT COME OUT WHERE EVER YOU ARE {1}", Hero Icon String(Hero(Bastion)),
			Icon String(Arrow: Up)));
		Start Forcing Throttle(All Players(All Teams), 1, 1, 0, 1, 0, 1);
		disabled Set Ultimate Ability Enabled(Event Player, False);
		Wait(Global.GLOBAL_ULT_DURATION, Ignore Condition);
		disabled Set Ultimate Ability Enabled(Event Player, True);
		Stop Forcing Throttle(All Players(All Teams));
	}
}

rule("ULT: Brigitte")
{
	event
	{
		Ongoing - Each Player;
		All;
		Brigitte;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Brigitte);
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("{0} ALLA TILL MIG! {1}", Hero Icon String(Hero(Brigitte)), Ability Icon String(
			Hero(Brigitte), Button(Ultimate))));
		Global.brigitteUltTimeLeft = Global.GLOBAL_ULT_DURATION;
		Chase Global Variable Over Time(brigitteUltTimeLeft, 0, Global.GLOBAL_ULT_DURATION, None);
		disabled Set Ultimate Ability Enabled(Event Player, False);
		disabled Wait(Global.GLOBAL_ULT_DURATION, Ignore Condition);
		disabled Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("ULT: Brigitte effect")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.brigitteUltTimeLeft > 0;
	}

	actions
	{
		Add Health Pool To Player(Event Player, Armor, Global.BRIGITTE_ULT_ARMOR_PER_SECOND / 10, False, False);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("ULT: D.Va")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(D.Va);
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("{0} BUNNY HOP! {1}", Hero Icon String(Hero(D.Va)), Ability Icon String(Hero(
			D.Va), Button(Ability 1))));
		Global.dvaUltTimeLeft = Global.GLOBAL_ULT_DURATION;
		Chase Global Variable Over Time(dvaUltTimeLeft, 0, Global.GLOBAL_ULT_DURATION, None);
		disabled Set Ultimate Ability Enabled(Event Player, False);
		disabled Wait(Global.GLOBAL_ULT_DURATION, Ignore Condition);
		disabled Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("ULT: D.Va effect")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.dvaUltTimeLeft > 0;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
	}

	actions
	{
		Set Gravity(Event Player, 0);
		Apply Impulse(Event Player, Facing Direction Of(Event Player), Global.DVA_ULT_FORCE_SPEED, To World, Cancel Contrary Motion);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
		Set Gravity(Event Player, 100);
	}
}

rule("ULT: Doomfist (with help from TrueNeutral#11414 and the original author of 2D OVERWATCH)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Doomfist;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Doomfist);
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("{0} COMBO BREAKER! {1}", Hero Icon String(Hero(Doomfist)), Ability Icon String(
			Hero(Doomfist), Button(Ultimate))));
		Global._targetPlayerList = All Players(All Teams);
		For Global Variable(_i_, 0, Count Of(Global._targetPlayerList), 1);
			Global._targetPlayer = Global._targetPlayerList[Global._i_];
			Stop Facing(Global._targetPlayer);
			Set Facing(Global._targetPlayer, Vector(X Component Of(Global._targetPlayer), 0.025, 1), To World);
			Start Facing(Global._targetPlayer, Vector(X Component Of(Global._targetPlayer), 0.025, 1), 10000, To World,
				Direction and Turn Rate);
			Start Forcing Throttle(Global._targetPlayer, 0, 1, 0, 1, 0, 0);
			Start Transforming Throttle(Global._targetPlayer, 1, 1, Vector Towards(Position Of(Global._targetPlayer) + Vector(-1, 0, 0),
				Position Of(Global._targetPlayer) + Vector(0, 0, 0)));
			Start Camera(Global._targetPlayer, Global._targetPlayer + Vector(-20, 0, 0), Global._targetPlayer + Vector(7, 5, 0), 100);
		End;
		disabled Set Ultimate Ability Enabled(Event Player, False);
		Wait(Global.GLOBAL_ULT_DURATION, Ignore Condition);
		disabled Set Ultimate Ability Enabled(Event Player, True);
		For Global Variable(_i_, 0, Count Of(Global._targetPlayerList), 1);
			Global._targetPlayer = Global._targetPlayerList[Global._i_];
			Stop Facing(Global._targetPlayer);
			Stop Forcing Throttle(Global._targetPlayer);
			Stop Transforming Throttle(Global._targetPlayer);
			Stop Camera(Global._targetPlayer);
		End;
	}
}

rule("ULT: Echo")
{
	event
	{
		Ongoing - Each Player;
		All;
		Echo;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Echo);
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("{0} CLASS IS IN SESSION {1}", Hero Icon String(Hero(Echo)), Ability Icon String(
			Hero(Echo), Button(Ultimate))));
		Global.echoUltTimeLeft = Global.GLOBAL_ULT_DURATION;
		Chase Global Variable Over Time(echoUltTimeLeft, 0, Global.GLOBAL_ULT_DURATION, None);
		Set Ultimate Ability Enabled(Event Player, False);
		Wait(Global.GLOBAL_ULT_DURATION, Ignore Condition);
		Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("ULT: Echo effect")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.echoUltTimeLeft > 0;
	}

	actions
	{
		disabled Big Message(All Players(All Teams), Custom String("HANDSOME FOR {0} SECONDS", Global.asheUltTimeLeft));
		Global._targetPlayerList = Filtered Array(All Players(All Teams), Hero Of(Current Array Element) != Hero(Echo));
		For Global Variable(_i_, 0, Count Of(Global._targetPlayerList), 1);
			Global._targetPlayer = Global._targetPlayerList[Global._i_];
			Set Ultimate Charge(Global._targetPlayer, Ultimate Charge Percent(Global._targetPlayer) + Global.ECHO_ULT_CHARGE_PER_SECOND / 10);
		End;
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
		disabled Big Message(All Players(All Teams), Custom String("{0} OK BACK TO CASUAL", Hero Icon String(Hero(Ashe))));
	}
}

rule("ULT: Genji")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Genji);
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("{0} 100 JUMPING JACKS! GO! {1}", Hero Icon String(Hero(Genji)),
			Ability Icon String(Hero(Genji), Button(Jump))));
		Global.genjiUltTimeLeft = Global.GLOBAL_ULT_DURATION;
		Chase Global Variable Over Time(genjiUltTimeLeft, 0, Global.GLOBAL_ULT_DURATION, None);
		disabled Set Ultimate Ability Enabled(Event Player, False);
		disabled Wait(Global.GLOBAL_ULT_DURATION, Ignore Condition);
		disabled Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("ULT: Genji effect")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.genjiUltTimeLeft > 0;
	}

	actions
	{
		Press Button(Event Player, Button(Jump));
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("ULT: Hanzo")
{
	event
	{
		Ongoing - Each Player;
		All;
		Hanzo;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Hanzo);
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("{0} NOW YOU SEE ME, NOW YOU DON'T! {1}", Hero Icon String(Hero(Hanzo)),
			Ability Icon String(Hero(Hanzo), Button(Ability 1))));
		Set Invisible(All Players(All Teams), All);
		disabled Set Ultimate Ability Enabled(Event Player, False);
		Wait(Global.GLOBAL_ULT_DURATION, Ignore Condition);
		disabled Set Ultimate Ability Enabled(Event Player, True);
		Set Invisible(All Players(All Teams), None);
	}
}

rule("ULT: Junkrat")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junkrat;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Junkrat);
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("{0} HOLD STILL! {1}", Hero Icon String(Hero(Junkrat)), Ability Icon String(Hero(
			Junkrat), Button(Ability 2))));
		Set Status(Filtered Array(All Players(All Teams), Is On Ground(Current Array Element) == True && Hero Of(Current Array Element)
			!= Hero(Junkrat)), Event Player, Rooted, Global.GLOBAL_ULT_DURATION);
		disabled Set Ultimate Ability Enabled(Event Player, False);
		disabled Wait(Global.GLOBAL_ULT_DURATION, Ignore Condition);
		disabled Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("ULT: Lucio")
{
	event
	{
		Ongoing - Each Player;
		All;
		Lúcio;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Lúcio);
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("{0} CRANK UP THE BEAT! {1}", Hero Icon String(Hero(Lúcio)), Ability Icon String(
			Hero(Lúcio), Button(Ability 2))));
		Set Move Speed(All Players(All Teams), 200);
		disabled Set Ultimate Ability Enabled(Event Player, False);
		Wait(Global.GLOBAL_ULT_DURATION, Ignore Condition);
		disabled Set Ultimate Ability Enabled(Event Player, True);
		Set Move Speed(All Players(All Teams), 100);
	}
}

rule("ULT: McCree")
{
	event
	{
		Ongoing - Each Player;
		All;
		McCree;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(McCree);
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("{0} IIITS HIIIGH NOOOOOON... {1}", Hero Icon String(Hero(McCree)),
			Ability Icon String(Hero(McCree), Button(Ultimate))));
		Set Slow Motion(20);
		disabled Set Ultimate Ability Enabled(Event Player, False);
		Wait(Global.GLOBAL_ULT_DURATION * (20 / 100), Ignore Condition);
		disabled Set Ultimate Ability Enabled(Event Player, True);
		Set Slow Motion(100);
	}
}

rule("ULT: Mei")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mei;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Mei);
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("{0} FREEZING RAIN {1}", Hero Icon String(Hero(Mei)), Ability Icon String(Hero(
			Mei), Button(Ultimate))));
		Set Status(Filtered Array(All Players(All Teams), Hero Of(Current Array Element) != Hero(Mei)), Event Player, Frozen,
			Global.GLOBAL_ULT_DURATION);
		Set Ultimate Ability Enabled(Event Player, False);
		Wait(Global.GLOBAL_ULT_DURATION, Ignore Condition);
		Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("ULT: Mercy")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mercy;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Mercy);
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("{0} HEROES ALWAYS RISE {1}", Hero Icon String(Hero(Mercy)), Ability Icon String(
			Hero(Mercy), Button(Ability 2))));
		Global.mercyUltTimeLeft = Global.GLOBAL_ULT_DURATION;
		Chase Global Variable Over Time(mercyUltTimeLeft, 0, Global.GLOBAL_ULT_DURATION, None);
		disabled Set Ultimate Ability Enabled(Event Player, False);
		disabled Wait(Global.GLOBAL_ULT_DURATION, Ignore Condition);
		disabled Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("ULT: Mercy effect")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Global.mercyUltTimeLeft > 0;
	}

	actions
	{
		Wait(2, Ignore Condition);
		Resurrect(Event Player);
		Big Message(All Players(All Teams), Custom String("{0} {1} RESURRECTED {0}", Ability Icon String(Hero(Mercy), Button(Ability 2)),
			Hero Of(Event Player)));
	}
}

rule("ULT: Orisa")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Orisa);
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("{0} CEASE YOUR RESISTANCE. {1}", Hero Icon String(Hero(Orisa)),
			Ability Icon String(Hero(Orisa), Button(Ultimate))));
		Set Damage Dealt(All Players(All Teams), 200);
		disabled Set Ultimate Ability Enabled(Event Player, False);
		Wait(Global.GLOBAL_ULT_DURATION, Ignore Condition);
		disabled Set Ultimate Ability Enabled(Event Player, True);
		Set Damage Dealt(All Players(All Teams), 100);
	}
}

rule("ULT: Pharah")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Pharah);
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("{0} TAKE TO THE SKIES {1}", Hero Icon String(Hero(Pharah)), Ability Icon String(
			Hero(Pharah), Button(Ability 1))));
		Global.pharahUltTimeLeft = Global.GLOBAL_ULT_DURATION;
		Chase Global Variable Over Time(pharahUltTimeLeft, 0, Global.GLOBAL_ULT_DURATION, None);
		disabled Set Ultimate Ability Enabled(Event Player, False);
		disabled Wait(Global.GLOBAL_ULT_DURATION, Ignore Condition);
		disabled Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("ULT: Pharah effect")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.pharahUltTimeLeft > 0;
		Is Button Held(Event Player, Button(Jump)) == True;
	}

	actions
	{
		Apply Impulse(Event Player, Up, Global.PHARAH_ULT_JUMP_HEIGHT, To World, Cancel Contrary Motion);
	}
}

rule("ULT: Reaper")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reaper;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Reaper);
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("{0} DIE! DIE! DIE! {1}", Hero Icon String(Hero(Reaper)), Ability Icon String(
			Hero(Reaper), Button(Ultimate))));
		Event Player.reaperUltTimeLeft = Global.GLOBAL_ULT_DURATION;
		Chase Player Variable Over Time(Event Player, reaperUltTimeLeft, 0, Global.GLOBAL_ULT_DURATION, None);
		Event Player._targetPlayerList = Filtered Array(All Players(All Teams), Current Array Element != Event Player);
		Set Ultimate Ability Enabled(Event Player, False);
		Wait(Global.GLOBAL_ULT_DURATION, Ignore Condition);
		Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("ULT: Reaper effect")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reaper;
	}

	conditions
	{
		Event Player.reaperUltTimeLeft > 0;
		Hero Of(Event Player) == Hero(Reaper);
	}

	actions
	{
		For Player Variable(Event Player, _i_, 0, Count Of(Event Player._targetPlayerList), 1);
			Event Player._targetPlayer = Event Player._targetPlayerList[Event Player._i_];
			Damage(Event Player._targetPlayer, Event Player, Global.REAPER_ULT_DAMAGE_PER_SECOND / 10);
			disabled Small Message(Event Player, Custom String("DAMGE {0} {1}", Event Player._targetPlayer, Global.REAPER_ULT_DAMAGE_PER_SECOND / 10));
		End;
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
		disabled Big Message(All Players(All Teams), Custom String("{0} OK BACK TO CASUAL", Hero Icon String(Hero(Ashe))));
	}
}

rule("ULT: Reinhardt")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Reinhardt);
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("{0} EARTHQUAKE!!! {1}", Hero Icon String(Hero(Reinhardt)), Ability Icon String(
			Hero(Reinhardt), Button(Ultimate))));
		Set Status(Filtered Array(All Players(All Teams), Is On Ground(Current Array Element) == True && Hero Of(Current Array Element)
			!= Hero(Reinhardt)), Event Player, Knocked Down, Global.GLOBAL_ULT_DURATION);
		Set Ultimate Ability Enabled(Event Player, False);
		Wait(Global.GLOBAL_ULT_DURATION, Ignore Condition);
		Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("ULT: Roadhog")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Roadhog);
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("{0} GET OUT {1}", Hero Icon String(Hero(Roadhog)), Ability Icon String(Hero(
			Roadhog), Button(Ultimate))));
		Global.roadhogUltTimeLeft = Global.GLOBAL_ULT_DURATION;
		Chase Global Variable Over Time(roadhogUltTimeLeft, 0, Global.GLOBAL_ULT_DURATION, None);
		disabled Set Ultimate Ability Enabled(Event Player, False);
		disabled Wait(Global.GLOBAL_ULT_DURATION, Ignore Condition);
		disabled Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("ULT: Roadhog effect")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Global.roadhogUltTimeLeft > 0;
	}

	actions
	{
		Apply Impulse(Victim, Facing Direction Of(Attacker), Event Damage, To World, Incorporate Contrary Motion);
	}
}

rule("ULT: Sigma")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Sigma);
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("{0} GRAVITY ADAGIO... {1}", Hero Icon String(Hero(Sigma)), Ability Icon String(
			Hero(Sigma), Button(Ultimate))));
		Global.sigmaUltTimeLeft = Global.GLOBAL_ULT_DURATION * 2;
		Chase Global Variable Over Time(sigmaUltTimeLeft, 0, Global.GLOBAL_ULT_DURATION, None);
		Set Gravity(All Players(All Teams), 20);
		disabled Set Ultimate Ability Enabled(Event Player, False);
		Wait(Global.GLOBAL_ULT_DURATION, Ignore Condition);
		disabled Set Ultimate Ability Enabled(Event Player, True);
		Big Message(All Players(All Teams), Custom String("{0} GRAVITY ALLEGRO! {1}", Hero Icon String(Hero(Sigma)), Ability Icon String(
			Hero(Sigma), Button(Ultimate))));
		Set Gravity(All Players(All Teams), 200);
		Wait(Global.GLOBAL_ULT_DURATION, Ignore Condition);
		Set Gravity(All Players(All Teams), 100);
	}
}

rule("ULT: Sigma effect")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.sigmaUltTimeLeft > 0;
		Global.sigmaUltTimeLeft <= Global.GLOBAL_ULT_DURATION;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Damage(Event Player, Filtered Array(All Players(All Teams), Hero Of(Current Array Element) == Hero(Sigma)), 100);
	}
}

rule("ULT: Sombra")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sombra;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Sombra);
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("{0} Liiights out! {1}", Hero Icon String(Hero(Sombra)), Ability Icon String(
			Hero(Sombra), Button(Ultimate))));
		Set Status(Filtered Array(All Players(All Teams), Hero Of(Current Array Element) != Hero(Sombra)), Event Player, Hacked,
			Global.GLOBAL_ULT_DURATION);
		Set Ultimate Ability Enabled(Event Player, False);
		Wait(Global.GLOBAL_ULT_DURATION, Ignore Condition);
		Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("ULT: Tracer")
{
	event
	{
		Ongoing - Each Player;
		All;
		Tracer;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Tracer);
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("{0} TIME TO OPEN THE EYE OF AGAMOTTO {1}", Hero Icon String(Hero(Tracer)),
			Ability Icon String(Hero(Tracer), Button(Ability 1))));
		Event Player._targetPlayerList = Filtered Array(All Players(All Teams), Current Array Element != Event Player);
		Global.tracerUltTimeLeft = Global.GLOBAL_ULT_DURATION;
		Chase Global Variable Over Time(tracerUltTimeLeft, 0, Global.GLOBAL_ULT_DURATION, None);
		disabled Set Ultimate Ability Enabled(Event Player, False);
		disabled Wait(Global.ASHE_ULT_DURATION, Ignore Condition);
		disabled Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("ULT: Tracer effect")
{
	event
	{
		Ongoing - Each Player;
		All;
		Tracer;
	}

	conditions
	{
		disabled Global.tracerUltTimeLeft > 0;
		Hero Of(Event Player) == Hero(Tracer);
		Is Button Held(Event Player, Button(Ability 1)) == True;
	}

	actions
	{
		For Player Variable(Event Player, _i_, 0, Count Of(Event Player._targetPlayerList), 1);
			Event Player._targetPlayer = Event Player._targetPlayerList[Event Player._i_];
			Teleport(Event Player._targetPlayer, Nearest Walkable Position(Position Of(Event Player._targetPlayer)
				+ Global.TRACER_ULT_BLINK_DISTANCE * Facing Direction Of(Event Player)));
		End;
	}
}

rule("ULT: Widowmaker")
{
	event
	{
		Ongoing - Each Player;
		All;
		Widowmaker;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Widowmaker);
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("{0} I FEEL ALIVE {1}", Hero Icon String(Hero(Widowmaker)), Ability Icon String(
			Hero(Widowmaker), Button(Secondary Fire))));
		Global.widowmakerUltTimeLeft = Global.GLOBAL_ULT_DURATION;
		Chase Global Variable Over Time(widowmakerUltTimeLeft, 0, Global.GLOBAL_ULT_DURATION, None);
		disabled Set Ultimate Ability Enabled(Event Player, False);
		Wait(Global.GLOBAL_ULT_DURATION, Ignore Condition);
		disabled Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("ULT: Widowmaker effect")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Global.widowmakerUltTimeLeft > 0;
		Event Was Critical Hit == False;
	}

	actions
	{
		Heal(Victim, Null, Event Damage);
		If(Is Alive(Victim) == False);
			Resurrect(Victim);
		End;
	}
}

rule("ULT: Winston")
{
	event
	{
		Ongoing - Each Player;
		All;
		Winston;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Winston);
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("{0} OOOH TANKY! {1}", Hero Icon String(Hero(Winston)), Ability Icon String(Hero(
			Winston), Button(Ultimate))));
		Set Max Health(All Players(All Teams), 200);
		Heal(All Players(All Teams), Event Player, 1000);
		disabled Set Ultimate Ability Enabled(Event Player, False);
		Wait(Global.GLOBAL_ULT_DURATION, Ignore Condition);
		disabled Set Ultimate Ability Enabled(Event Player, True);
		Set Max Health(Event Player, 100);
	}
}

rule("ULT: Zenyatta")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zenyatta;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Zenyatta);
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("{0} PRAISE THE SUN {1}", Hero Icon String(Hero(Zenyatta)), Ability Icon String(
			Hero(Zenyatta), Button(Ultimate))));
		Event Player.zenyattaUltTimeLeft = Global.GLOBAL_ULT_DURATION;
		Event Player._targetPlayerList = All Players(All Teams);
		Chase Player Variable Over Time(Event Player, zenyattaUltTimeLeft, 0, Global.GLOBAL_ULT_DURATION, None);
		Set Ultimate Ability Enabled(Event Player, False);
		Wait(Global.GLOBAL_ULT_DURATION, Ignore Condition);
		Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("ULT: Zenyatta effect")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zenyatta;
	}

	conditions
	{
		Event Player.zenyattaUltTimeLeft > 0;
		Hero Of(Event Player) == Hero(Zenyatta);
	}

	actions
	{
		For Player Variable(Event Player, _i_, 0, Count Of(Event Player._targetPlayerList), 1);
			Event Player._targetPlayer = Event Player._targetPlayerList[Event Player._i_];
			Heal(Event Player._targetPlayer, Event Player, Global.ZENYATTA_ULT_HEAL_PER_SECOND / 10);
			disabled Small Message(Event Player, Custom String("DAMGE {0} {1}", Event Player._targetPlayer, Global.REAPER_ULT_DAMAGE_PER_SECOND / 10));
		End;
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
		disabled Big Message(All Players(All Teams), Custom String("{0} OK BACK TO CASUAL", Hero Icon String(Hero(Ashe))));
	}
}
