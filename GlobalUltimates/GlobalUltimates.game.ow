settings
{
	main
	{
		Description: "Press Q and change how the game works! From increasing move speed to forcing everyone to jump, every hero has a new unique ultimate that globally changes the game. Made by shieldgenerator7#0914"
		Mode Name: "Global Ultimates"
	}

	modes
	{
		Assault
		{
			enabled maps
			{
			}
		}

		Control
		{
			enabled maps
			{
			}
		}

		Escort
		{
			enabled maps
			{
			}
		}

		Hybrid
		{
			enabled maps
			{
				Eichenwalde
			}
		}

		General
		{
			Limit Roles: 2 Of Each Role Per Team
		}
	}

	heroes
	{
		General
		{
			Spawn With Ultimate Ready: On

			disabled heroes
			{
				Symmetra
				Torbj√∂rn
				Wrecking Ball
				Zarya
			}
		}
	}

	workshop
	{
		ASHE Ult Duration: 8.000
		BASTION Ult Duration: 20.000
		DVA Ult Duration: 60.000
		GENJI Ult Duration: 20.000
		LUCIO Ult Duration: 20.000
		MCCREE Ult Duration: 20.000
		MOIRA Ult Duration: 20.000
		ORISA Ult Duration: 20.000
		PHARAH Ult Duration: 60.000
		ROADHOG Ult Duration: 60.000
		SIGMA Ult Duration: 20.000
		SOLDIER76 Ult Duration: 20.000
		WINSTON Ult Duration: 60.000
		Zenyatta Ult Heal Per Second: 200.000
	}
}

variables
{
	global:
		0: GLOBAL_ULT_DURATION
		1: ULTIMATE_DATA
		2: ultimateTimeLeftEntries
		3: _i_
		4: _targetPlayer
		5: _targetPlayerList
		6: _targetEntry
		7: BRIGITTE_ULT_ARMOR_PER_SECOND
		9: DVA_ULT_FORCE_SPEED
		10: ECHO_ULT_CHARGE_PER_SECOND
		11: MCCREE_ULT_TIME_SLOW_PERCENT
		12: MOIRA_ULT_PERCENT_LIFESTEAL
		13: PHARAH_ULT_JUMP_HEIGHT
		14: REAPER_ULT_DAMAGE_PER_SECOND
		15: sigmaUltTimeLeft
		16: TRACER_ULT_BLINK_DISTANCE
		17: ZENYATTA_ULT_HEAL_PER_SECOND
		18: ANA_ULT_DURATION
		19: ASHE_ULT_DURATION
		20: BAPTISTE_ULT_DURATION
		21: BASTION_ULT_DURATION
		22: BRIGITTE_ULT_DURATION
		23: DVA_ULT_DURATION
		24: ECHO_ULT_DURATION
		25: GENJI_ULT_DURATION
		26: HANZO_ULT_DURATION
		27: JUNKRAT_ULT_DURATION
		28: LUCIO_ULT_DURATION
		29: MCCREE_ULT_DURATION
		30: MEI_ULT_DURATION
		31: MERCY_ULT_DURATION
		32: MOIRA_ULT_DURATION
		33: ORISA_ULT_DURATION
		34: PHARAH_ULT_DURATION
		35: REAPER_ULT_DURATION
		36: REINHARDT_ULT_DURATION
		37: ROADHOG_ULT_DURATION
		38: SIGMA_ULT_DURATION
		39: SOLDIER76_ULT_DURATION
		40: SOMBRA_ULT_DURATION
		41: TRACER_ULT_DURATION
		42: WIDOWMAKER_ULT_DURATION
		43: WINSTON_ULT_DURATION
		44: ZENYATTA_ULT_DURATION

	player:
		0: _i_
		1: _targetPlayer
		2: _targetPlayerList
		3: hudTextId
		4: hero
		5: ultimateDataEntry
		6: ultimateTimeLeftEntry
		7: ultimateTimeLeftIndex
}

subroutines
{
	0: updateHeroInfo
}

rule("Game Setup")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.ultimateTimeLeftEntries = Array();
		Global.BRIGITTE_ULT_ARMOR_PER_SECOND = Workshop Setting Real(Custom String("Hero Ult Settings"), Custom String(
			"Brigitte Ult Armor Per Second"), 100, 10, 1000, 0);
		Global.DVA_ULT_FORCE_SPEED = Workshop Setting Real(Custom String("Hero Ult Settings"), Custom String("D.Va Ult Force Speed"), 30,
			10, 100, 0);
		Global.ECHO_ULT_CHARGE_PER_SECOND = Workshop Setting Real(Custom String("Hero Ult Settings"), Custom String(
			"Echo Ult Charge Per Second"), 10, 1, 60, 0);
		Global.MCCREE_ULT_TIME_SLOW_PERCENT = Workshop Setting Real(Custom String("Hero Ult Settings"), Custom String(
			"McCree Ult Time Slow Percent"), 20, 0, 100, 0);
		Global.MOIRA_ULT_PERCENT_LIFESTEAL = Workshop Setting Real(Custom String("Hero Ult Settings"), Custom String(
			"Moira Ult Percent Lifesteal"), 100, 0, 100, 0);
		Global.PHARAH_ULT_JUMP_HEIGHT = Workshop Setting Real(Custom String("Hero Ult Settings"), Custom String("Pharah Ult Jump Height"),
			5, 1, 100, 0);
		Global.REAPER_ULT_DAMAGE_PER_SECOND = Workshop Setting Real(Custom String("Hero Ult Settings"), Custom String(
			"Reaper Ult Damage Per Second"), 100, 10, 1000, 0);
		Global.TRACER_ULT_BLINK_DISTANCE = Workshop Setting Real(Custom String("Hero Ult Settings"), Custom String(
			"Tracer Ult Blink Distance"), 5, 1, 20, 0);
		Global.ZENYATTA_ULT_HEAL_PER_SECOND = Workshop Setting Real(Custom String("Hero Ult Settings"), Custom String(
			"Zenyatta Ult Heal Per Second"), 100, 10, 1000, 0);
		Global.GLOBAL_ULT_DURATION = Workshop Setting Real(Custom String("All heroes"), Custom String("Ult Duration"), 100, 10, 500, 0);
		Global.ANA_ULT_DURATION = Workshop Setting Real(Custom String("Hero Ult Durations"), Custom String("ANA Ult Duration"), 10, 1, 300,
			0);
		Global.ASHE_ULT_DURATION = Workshop Setting Real(Custom String("Hero Ult Durations"), Custom String("ASHE Ult Duration"), 10, 1,
			300, 0);
		Global.BAPTISTE_ULT_DURATION = Workshop Setting Real(Custom String("Hero Ult Durations"), Custom String("BAPTISTE Ult Duration"),
			10, 1, 300, 0);
		Global.BASTION_ULT_DURATION = Workshop Setting Real(Custom String("Hero Ult Durations"), Custom String("BASTION Ult Duration"), 10,
			1, 300, 0);
		Global.BRIGITTE_ULT_DURATION = Workshop Setting Real(Custom String("Hero Ult Durations"), Custom String("BRIGITTE Ult Duration"),
			10, 1, 300, 0);
		Global.DVA_ULT_DURATION = Workshop Setting Real(Custom String("Hero Ult Durations"), Custom String("DVA Ult Duration"), 10, 1, 300,
			0);
		Global.ECHO_ULT_DURATION = Workshop Setting Real(Custom String("Hero Ult Durations"), Custom String("ECHO Ult Duration"), 10, 1,
			300, 0);
		Global.GENJI_ULT_DURATION = Workshop Setting Real(Custom String("Hero Ult Durations"), Custom String("GENJI Ult Duration"), 10, 1,
			300, 0);
		Global.HANZO_ULT_DURATION = Workshop Setting Real(Custom String("Hero Ult Durations"), Custom String("HANZO Ult Duration"), 10, 1,
			300, 0);
		Global.JUNKRAT_ULT_DURATION = Workshop Setting Real(Custom String("Hero Ult Durations"), Custom String("JUNKRAT Ult Duration"), 10,
			1, 300, 0);
		Global.LUCIO_ULT_DURATION = Workshop Setting Real(Custom String("Hero Ult Durations"), Custom String("LUCIO Ult Duration"), 10, 1,
			300, 0);
		Global.MCCREE_ULT_DURATION = Workshop Setting Real(Custom String("Hero Ult Durations"), Custom String("MCCREE Ult Duration"), 10,
			1, 300, 0);
		Global.MEI_ULT_DURATION = Workshop Setting Real(Custom String("Hero Ult Durations"), Custom String("MEI Ult Duration"), 10, 1, 300,
			0);
		Global.MERCY_ULT_DURATION = Workshop Setting Real(Custom String("Hero Ult Durations"), Custom String("MERCY Ult Duration"), 10, 1,
			300, 0);
		Global.MOIRA_ULT_DURATION = Workshop Setting Real(Custom String("Hero Ult Durations"), Custom String("MOIRA Ult Duration"), 10, 1,
			300, 0);
		Global.ORISA_ULT_DURATION = Workshop Setting Real(Custom String("Hero Ult Durations"), Custom String("ORISA Ult Duration"), 10, 1,
			300, 0);
		Global.PHARAH_ULT_DURATION = Workshop Setting Real(Custom String("Hero Ult Durations"), Custom String("PHARAH Ult Duration"), 10,
			1, 300, 0);
		Global.REAPER_ULT_DURATION = Workshop Setting Real(Custom String("Hero Ult Durations"), Custom String("REAPER Ult Duration"), 10,
			1, 300, 0);
		Global.REINHARDT_ULT_DURATION = Workshop Setting Real(Custom String("Hero Ult Durations"), Custom String("REINHARDT Ult Duration"),
			10, 1, 300, 0);
		Global.ROADHOG_ULT_DURATION = Workshop Setting Real(Custom String("Hero Ult Durations"), Custom String("ROADHOG Ult Duration"), 10,
			1, 300, 0);
		Global.SIGMA_ULT_DURATION = Workshop Setting Real(Custom String("Hero Ult Durations"), Custom String("SIGMA Ult Duration"), 10, 1,
			300, 0);
		Global.SOLDIER76_ULT_DURATION = Workshop Setting Real(Custom String("Hero Ult Durations"), Custom String("SOLDIER76 Ult Duration"),
			10, 1, 300, 0);
		Global.SOMBRA_ULT_DURATION = Workshop Setting Real(Custom String("Hero Ult Durations"), Custom String("SOMBRA Ult Duration"), 10,
			1, 300, 0);
		Global.TRACER_ULT_DURATION = Workshop Setting Real(Custom String("Hero Ult Durations"), Custom String("TRACER Ult Duration"), 10,
			1, 300, 0);
		Global.WIDOWMAKER_ULT_DURATION = Workshop Setting Real(Custom String("Hero Ult Durations"), Custom String(
			"WIDOWMAKER Ult Duration"), 10, 1, 300, 0);
		Global.WINSTON_ULT_DURATION = Workshop Setting Real(Custom String("Hero Ult Durations"), Custom String("WINSTON Ult Duration"), 10,
			1, 300, 0);
		Global.ZENYATTA_ULT_DURATION = Workshop Setting Real(Custom String("Hero Ult Durations"), Custom String("ZENYATTA Ult Duration"),
			10, 1, 300, 0);
	}
}

rule("Game Setup: Ult Data")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.ULTIMATE_DATA = Array();
		Global.ULTIMATE_DATA[Count Of(Global.ULTIMATE_DATA)] = Array(Hero(Ana), Custom String("NAP TIME... {0}", Ability Icon String(Hero(
			Ana), Button(Ability 1))), Custom String("EVERYONE PUT TO SLEEP"), False, Global.ANA_ULT_DURATION);
		Global.ULTIMATE_DATA[Count Of(Global.ULTIMATE_DATA)] = Array(Hero(Ashe), Custom String("HANDSOME FOR 8 SECONDS {0}",
			Ability Icon String(Hero(Ashe), Button(Ultimate))), Custom String("EVERYONE FORCED TO EMOTE"), True, Global.ASHE_ULT_DURATION);
		Global.ULTIMATE_DATA[Count Of(Global.ULTIMATE_DATA)] = Array(Hero(Baptiste), Custom String("NO DYING ON MY WATCH! {1}",
			Hero Icon String(Hero(Baptiste)), Ability Icon String(Hero(Baptiste), Button(Ability 2))), Custom String("NO ONE CAN DIE"),
			False, Global.BAPTISTE_ULT_DURATION);
		Global.ULTIMATE_DATA[Count Of(Global.ULTIMATE_DATA)] = Array(Hero(Bastion), Custom String(
			"COME OUT COME OUT WHERE EVER YOU ARE {1}", Hero Icon String(Hero(Bastion)), Icon String(Arrow: Up)), Custom String(
			"EVERYONE FORCED TO WALK FORWARD"), True, Global.BASTION_ULT_DURATION);
		Global.ULTIMATE_DATA[Count Of(Global.ULTIMATE_DATA)] = Array(Hero(Brigitte), Custom String("ALLA TILL MIG! {1}", Hero Icon String(
			Hero(Brigitte)), Ability Icon String(Hero(Brigitte), Button(Ultimate))), Custom String("EVERYONE GAINS ARMOR"), True,
			Global.BRIGITTE_ULT_DURATION);
		Global.ULTIMATE_DATA[Count Of(Global.ULTIMATE_DATA)] = Array(Hero(D.Va), Custom String("BUNNY HOP! {1}", Hero Icon String(Hero(
			D.Va)), Ability Icon String(Hero(D.Va), Button(Ability 1))), Custom String("SHOOT TO FLY"), True, Global.DVA_ULT_DURATION);
		Global.ULTIMATE_DATA[Count Of(Global.ULTIMATE_DATA)] = Array(Hero(Echo), Custom String("CLASS IS IN SESSION {1}", Hero Icon String(
			Hero(Echo)), Ability Icon String(Hero(Echo), Button(Ultimate))), Custom String("ULTS CHARGE REALLY FAST"), True,
			Global.ECHO_ULT_DURATION);
		Global.ULTIMATE_DATA[Count Of(Global.ULTIMATE_DATA)] = Array(Hero(Genji), Custom String("100 JUMPING JACKS! GO! {1}",
			Hero Icon String(Hero(Genji)), Ability Icon String(Hero(Genji), Button(Jump))), Custom String("EVERYONE FORCED TO JUMP"), True,
			Global.GENJI_ULT_DURATION);
		Global.ULTIMATE_DATA[Count Of(Global.ULTIMATE_DATA)] = Array(Hero(Hanzo), Custom String("NOW YOU SEE ME, NOW YOU DON'T! {1}",
			Hero Icon String(Hero(Hanzo)), Ability Icon String(Hero(Hanzo), Button(Ability 1))), Custom String("EVERYONE INVISIBLE"), True,
			Global.HANZO_ULT_DURATION);
		Global.ULTIMATE_DATA[Count Of(Global.ULTIMATE_DATA)] = Array(Hero(Junkrat), Custom String("HOLD STILL! {1}", Hero Icon String(Hero(
			Junkrat)), Ability Icon String(Hero(Junkrat), Button(Ability 2))), Custom String("EVERYONE ROOTED"), True,
			Global.JUNKRAT_ULT_DURATION);
		Global.ULTIMATE_DATA[Count Of(Global.ULTIMATE_DATA)] = Array(Hero(L√∫cio), Custom String("CRANK UP THE BEAT! {1}", Hero Icon String(
			Hero(L√∫cio)), Ability Icon String(Hero(L√∫cio), Button(Ability 2))), Custom String("EVERYONE MOVES FASTER"), True,
			Global.LUCIO_ULT_DURATION);
		Global.ULTIMATE_DATA[Count Of(Global.ULTIMATE_DATA)] = Array(Hero(McCree), Custom String("IIITS HIIIGH NOOOOOON... {1}",
			Hero Icon String(Hero(McCree)), Ability Icon String(Hero(McCree), Button(Ultimate))), Custom String("TIME SLOWED"), True,
			Global.MCCREE_ULT_DURATION);
		Global.ULTIMATE_DATA[Count Of(Global.ULTIMATE_DATA)] = Array(Hero(Mei), Custom String("FREEZING RAIN {1}", Hero Icon String(Hero(
			Mei)), Ability Icon String(Hero(Mei), Button(Ultimate))), Custom String("EVERYONE FROZEN"), True, Global.MEI_ULT_DURATION);
		Global.ULTIMATE_DATA[Count Of(Global.ULTIMATE_DATA)] = Array(Hero(Mercy), Custom String("HEROES ALWAYS RISE {1}", Hero Icon String(
			Hero(Mercy)), Ability Icon String(Hero(Mercy), Button(Ability 2))), Custom String("EVERYONE REVIVES"), True,
			Global.MERCY_ULT_DURATION);
		Global.ULTIMATE_DATA[Count Of(Global.ULTIMATE_DATA)] = Array(Hero(Moira), Custom String("FEAST MY SUBJECTS! {1}", Hero Icon String(
			Hero(Moira)), Ability Icon String(Hero(Moira), Button(Ultimate))), Custom String("ALL DAMAGE HAS LIFESTEAL"), True,
			Global.MOIRA_ULT_DURATION);
		Global.ULTIMATE_DATA[Count Of(Global.ULTIMATE_DATA)] = Array(Hero(Orisa), Custom String("CEASE YOUR RESISTANCE. {1}",
			Hero Icon String(Hero(Orisa)), Ability Icon String(Hero(Orisa), Button(Ultimate))), Custom String("DAMAGE INCREASED"), True,
			Global.ORISA_ULT_DURATION);
		Global.ULTIMATE_DATA[Count Of(Global.ULTIMATE_DATA)] = Array(Hero(Pharah), Custom String("TAKE TO THE SKIES {1}", Hero Icon String(
			Hero(Pharah)), Ability Icon String(Hero(Pharah), Button(Ability 1))), Custom String("EVERYONE CAN FLY"), True,
			Global.PHARAH_ULT_DURATION);
		Global.ULTIMATE_DATA[Count Of(Global.ULTIMATE_DATA)] = Array(Hero(Reaper), Custom String("DIE! DIE! DIE! {1}", Hero Icon String(
			Hero(Reaper)), Ability Icon String(Hero(Reaper), Button(Ultimate))), Custom String("EVERYONE DIES"), True,
			Global.REAPER_ULT_DURATION);
		Global.ULTIMATE_DATA[Count Of(Global.ULTIMATE_DATA)] = Array(Hero(Reinhardt), Custom String("EARTHQUAKE!!! {1}", Hero Icon String(
			Hero(Reinhardt)), Ability Icon String(Hero(Reinhardt), Button(Ultimate))), Custom String("EVERYONE KNOCKED DOWN"), True,
			Global.REINHARDT_ULT_DURATION);
		Global.ULTIMATE_DATA[Count Of(Global.ULTIMATE_DATA)] = Array(Hero(Roadhog), Custom String("GET OUT {1}", Hero Icon String(Hero(
			Roadhog)), Ability Icon String(Hero(Roadhog), Button(Ultimate))), Custom String("ALL DAMAGE HAS KNOCKBACK"), True,
			Global.ROADHOG_ULT_DURATION);
		Global.ULTIMATE_DATA[Count Of(Global.ULTIMATE_DATA)] = Array(Hero(Sigma), Custom String("GRAVITY ADAGIO... {1}", Hero Icon String(
			Hero(Sigma)), Ability Icon String(Hero(Sigma), Button(Ultimate))), Custom String("LOW GRAVITY, THEN STRONG GRAVITY"), True,
			Global.SIGMA_ULT_DURATION);
		Global.ULTIMATE_DATA[Count Of(Global.ULTIMATE_DATA)] = Array(Hero(Soldier: 76), Custom String("MAKE EVERY BULLET COUNT! {1}",
			Hero Icon String(Hero(Soldier: 76)), Ability Icon String(Hero(Soldier: 76), Button(Ultimate))), Custom String(
			"EVERYONE HAS AIM HACKS"), True, Global.SOLDIER76_ULT_DURATION);
		Global.ULTIMATE_DATA[Count Of(Global.ULTIMATE_DATA)] = Array(Hero(Sombra), Custom String("Liiights out! {1}", Hero Icon String(
			Hero(Sombra)), Ability Icon String(Hero(Sombra), Button(Ultimate))), Custom String("EVERYONE HACKED"), True,
			Global.SOMBRA_ULT_DURATION);
		Global.ULTIMATE_DATA[Count Of(Global.ULTIMATE_DATA)] = Array(Hero(Tracer), Custom String("TIME TO OPEN THE EYE OF AGAMOTTO {1}",
			Hero Icon String(Hero(Tracer)), Ability Icon String(Hero(Tracer), Button(Ability 1))), Custom String(
			"EVERYONE BLINKS WITH TRACER"), True, Global.TRACER_ULT_DURATION);
		Global.ULTIMATE_DATA[Count Of(Global.ULTIMATE_DATA)] = Array(Hero(Widowmaker), Custom String("I FEEL ALIVE {1}", Hero Icon String(
			Hero(Widowmaker)), Ability Icon String(Hero(Widowmaker), Button(Secondary Fire))), Custom String("HEADSHOTS ONLY"), True,
			Global.WIDOWMAKER_ULT_DURATION);
		Global.ULTIMATE_DATA[Count Of(Global.ULTIMATE_DATA)] = Array(Hero(Winston), Custom String("OOOH TANKY! {1}", Hero Icon String(Hero(
			Winston)), Ability Icon String(Hero(Winston), Button(Ultimate))), Custom String("MAX HP INCREASED"), True,
			Global.WINSTON_ULT_DURATION);
		Global.ULTIMATE_DATA[Count Of(Global.ULTIMATE_DATA)] = Array(Hero(Zenyatta), Custom String("PRAISE THE SUN {1}", Hero Icon String(
			Hero(Zenyatta)), Ability Icon String(Hero(Zenyatta), Button(Ultimate))), Custom String("EVERYONE GETS LOTS OF HEALS"), True,
			Global.ZENYATTA_ULT_DURATION);
	}
}

rule("Skip setup")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is In Setup == True;
	}

	actions
	{
		Set Match Time(0);
	}
}

rule("Skip assembly")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Assembling Heroes == True;
	}

	actions
	{
		Set Match Time(0);
	}
}

rule("==TEST== Teleport to objective ==")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player == Host Player;
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		Teleport(All Players(All Teams), Objective Position(0));
		Set Ultimate Charge(All Players(All Teams), 100);
	}
}

rule("Player Setup")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Disallow Button(Event Player, Button(Ultimate));
		Call Subroutine(updateHeroInfo);
	}
}

rule("Player switched hero")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) != Event Player.hero;
	}

	actions
	{
		Call Subroutine(updateHeroInfo);
	}
}

rule("updateHeroInfo()")
{
	event
	{
		Subroutine;
		updateHeroInfo;
	}

	actions
	{
		Event Player.hero = Hero Of(Event Player);
		Event Player.ultimateDataEntry = Filtered Array(Global.ULTIMATE_DATA, Hero Of(Event Player) == Current Array Element[0])[0];
		Destroy HUD Text(Event Player.hudTextId);
		Create HUD Text(Event Player, Custom String("{0} {1}", Hero Icon String(Event Player.ultimateDataEntry[0]),
			Event Player.ultimateDataEntry[0]), Custom String("{0}", Event Player.ultimateDataEntry[1]), Custom String("{0}",
			Event Player.ultimateDataEntry[2]), Right, 0, Color(White), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Event Player.hudTextId = Last Text ID;
	}
}

rule("Player presses ultimate button")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
	}

	actions
	{
		Event Player.ultimateDataEntry = Filtered Array(Global.ULTIMATE_DATA, Hero Of(Event Player) == Current Array Element[0])[0];
		Big Message(All Players(All Teams), Custom String("{0} {1}", Hero Icon String(Event Player.ultimateDataEntry[0]),
			Event Player.ultimateDataEntry[1]));
		Event Player.ultimateTimeLeftIndex = Count Of(Global.ultimateTimeLeftEntries);
		Create HUD Text(All Players(All Teams), Custom String("{0}: {1}", Hero Icon String(Event Player.ultimateDataEntry[0]),
			Round To Integer(Global.ultimateTimeLeftEntries[Event Player.ultimateTimeLeftIndex][1], To Nearest)), Custom String("{0}",
			Event Player.ultimateDataEntry[1]), Custom String("{0}", Event Player.ultimateDataEntry[2]), Left, 0, Color(White), Color(
			White), Color(White), Visible To and String, Default Visibility);
		Event Player.ultimateTimeLeftEntry = Array(Event Player.ultimateDataEntry[0],
			Global.GLOBAL_ULT_DURATION * Event Player.ultimateDataEntry[4], Last Text ID, Event Player);
		Modify Global Variable(ultimateTimeLeftEntries, Append To Array, 0);
		Global.ultimateTimeLeftEntries[Event Player.ultimateTimeLeftIndex] = Event Player.ultimateTimeLeftEntry;
		Wait(0.100, Ignore Condition);
		Set Ultimate Charge(Event Player, 0);
		If(Event Player.ultimateDataEntry[3] == True);
			Set Ultimate Ability Enabled(Event Player, False);
			Wait(Global.GLOBAL_ULT_DURATION * Event Player.ultimateDataEntry[4], Ignore Condition);
			Set Ultimate Ability Enabled(Event Player, True);
		End;
	}
}

rule("Decrement ultimate time left")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Count Of(Global.ultimateTimeLeftEntries) >= 1;
	}

	actions
	{
		For Global Variable(_i_, 0, Count Of(Global.ultimateTimeLeftEntries), 1);
			"Take the entry to modify out of the array"
			Global._targetEntry = Global.ultimateTimeLeftEntries[Global._i_];
			Global._targetPlayer = Global._targetEntry[3];
			Global._targetPlayer.ultimateTimeLeftIndex = Global._i_;
			"Modify the time left in the entry"
			Global._targetEntry[1] -= 0.100;
			If(Global._targetEntry[1] > 0);
				"Put modified entry back into the array"
				Global.ultimateTimeLeftEntries[Global._i_] = Global._targetEntry;
			Else;
				"Remove HUD"
				Destroy HUD Text(Global._targetEntry[2]);
				"Remove entry from array"
				Modify Global Variable(ultimateTimeLeftEntries, Remove From Array By Index, Global._i_);
			End;
		End;
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("ULT: Ana")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Ana);
	}

	actions
	{
		Set Status(Filtered Array(All Players(All Teams), Hero Of(Current Array Element) != Hero(Ana)), Event Player, Asleep,
			Global.GLOBAL_ULT_DURATION);
	}
}

rule("ULT: Ashe")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ashe;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Ashe);
	}

	actions
	{
		Event Player.ultimateTimeLeftEntry[1] = Global.ASHE_ULT_DURATION;
		Global.ultimateTimeLeftEntries[Event Player.ultimateTimeLeftIndex] = Event Player.ultimateTimeLeftEntry;
		Set Ultimate Ability Enabled(Event Player, False);
		Wait(Global.ASHE_ULT_DURATION, Ignore Condition);
		Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("ULT: Ashe effect")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is True For Any(Global.ultimateTimeLeftEntries, Current Array Element[0] == Hero(Ashe)) == True;
	}

	actions
	{
		Communicate(Filtered Array(All Players(All Teams), Is Communicating Any Emote(Current Array Element) == False && Hero Of(
			Current Array Element) != Hero(Ashe)), Emote Up);
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
		Big Message(All Players(All Teams), Custom String("{0} OK BACK TO CASUAL", Hero Icon String(Hero(Ashe))));
	}
}

rule("ULT: Baptiste")
{
	event
	{
		Ongoing - Each Player;
		All;
		Baptiste;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Baptiste);
	}

	actions
	{
		Set Status(All Players(All Teams), Event Player, Unkillable, Global.GLOBAL_ULT_DURATION);
	}
}

rule("ULT: Bastion")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Bastion);
	}

	actions
	{
		Start Forcing Throttle(All Players(All Teams), 1, 1, 0, 1, 0, 1);
		Wait(Global.GLOBAL_ULT_DURATION, Ignore Condition);
		Stop Forcing Throttle(All Players(All Teams));
	}
}

rule("ULT: Brigitte")
{
	event
	{
		Ongoing - Each Player;
		All;
		Brigitte;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Brigitte);
	}
}

rule("ULT: Brigitte effect")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is True For Any(Global.ultimateTimeLeftEntries, Current Array Element[0] == Hero(Brigitte)) == True;
	}

	actions
	{
		Add Health Pool To Player(Event Player, Armor, Global.BRIGITTE_ULT_ARMOR_PER_SECOND / 10, False, False);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("ULT: D.Va")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(D.Va);
	}
}

rule("ULT: D.Va effect")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is True For Any(Global.ultimateTimeLeftEntries, Current Array Element[0] == Hero(D.Va)) == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
	}

	actions
	{
		Set Gravity(Event Player, 0);
		Apply Impulse(Event Player, Facing Direction Of(Event Player), Global.DVA_ULT_FORCE_SPEED, To World, Cancel Contrary Motion);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
		Set Gravity(Event Player, 100);
	}
}

rule("ULT: Doomfist (with help from TrueNeutral#11414 and the original author of 2D OVERWATCH)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Doomfist;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Doomfist);
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("{0} COMBO BREAKER! {1}", Hero Icon String(Hero(Doomfist)), Ability Icon String(
			Hero(Doomfist), Button(Ultimate))));
		Global._targetPlayerList = All Players(All Teams);
		For Global Variable(_i_, 0, Count Of(Global._targetPlayerList), 1);
			Global._targetPlayer = Global._targetPlayerList[Global._i_];
			Stop Facing(Global._targetPlayer);
			Set Facing(Global._targetPlayer, Vector(X Component Of(Global._targetPlayer), 0.025, 1), To World);
			Start Facing(Global._targetPlayer, Vector(X Component Of(Global._targetPlayer), 0.025, 1), 10000, To World,
				Direction and Turn Rate);
			Start Forcing Throttle(Global._targetPlayer, 0, 1, 0, 1, 0, 0);
			Start Transforming Throttle(Global._targetPlayer, 1, 1, Vector Towards(Position Of(Global._targetPlayer) + Vector(-1, 0, 0),
				Position Of(Global._targetPlayer) + Vector(0, 0, 0)));
			Start Camera(Global._targetPlayer, Global._targetPlayer + Vector(-20, 0, 0), Global._targetPlayer + Vector(7, 5, 0), 100);
		End;
		Wait(Global.GLOBAL_ULT_DURATION, Ignore Condition);
		For Global Variable(_i_, 0, Count Of(Global._targetPlayerList), 1);
			Global._targetPlayer = Global._targetPlayerList[Global._i_];
			Stop Facing(Global._targetPlayer);
			Stop Forcing Throttle(Global._targetPlayer);
			Stop Transforming Throttle(Global._targetPlayer);
			Stop Camera(Global._targetPlayer);
		End;
	}
}

rule("ULT: Echo")
{
	event
	{
		Ongoing - Each Player;
		All;
		Echo;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Echo);
	}
}

rule("ULT: Echo effect")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is True For Any(Global.ultimateTimeLeftEntries, Current Array Element[0] == Hero(Echo)) == True;
	}

	actions
	{
		Global._targetPlayerList = Filtered Array(All Players(All Teams), Hero Of(Current Array Element) != Hero(Echo));
		For Global Variable(_i_, 0, Count Of(Global._targetPlayerList), 1);
			Global._targetPlayer = Global._targetPlayerList[Global._i_];
			Set Ultimate Charge(Global._targetPlayer, Ultimate Charge Percent(Global._targetPlayer) + Global.ECHO_ULT_CHARGE_PER_SECOND / 10);
		End;
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("ULT: Genji")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Genji);
	}
}

rule("ULT: Genji effect")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is True For Any(Global.ultimateTimeLeftEntries, Current Array Element[0] == Hero(Genji)) == True;
	}

	actions
	{
		Press Button(Event Player, Button(Jump));
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("ULT: Hanzo")
{
	event
	{
		Ongoing - Each Player;
		All;
		Hanzo;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Hanzo);
	}

	actions
	{
		Set Invisible(All Players(All Teams), All);
		Wait(Global.GLOBAL_ULT_DURATION, Ignore Condition);
		Set Invisible(All Players(All Teams), None);
	}
}

rule("ULT: Junkrat")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junkrat;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Junkrat);
	}

	actions
	{
		Set Status(Filtered Array(All Players(All Teams), Is On Ground(Current Array Element) == True && Hero Of(Current Array Element)
			!= Hero(Junkrat)), Event Player, Rooted, Global.GLOBAL_ULT_DURATION);
	}
}

rule("ULT: Lucio")
{
	event
	{
		Ongoing - Each Player;
		All;
		L√∫cio;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(L√∫cio);
	}

	actions
	{
		Set Move Speed(All Players(All Teams), 200);
		Wait(Global.GLOBAL_ULT_DURATION, Ignore Condition);
		Set Move Speed(All Players(All Teams), 100);
	}
}

rule("ULT: McCree")
{
	event
	{
		Ongoing - Each Player;
		All;
		McCree;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(McCree);
	}

	actions
	{
		Set Slow Motion(Global.MCCREE_ULT_TIME_SLOW_PERCENT);
		Set Aim Speed(Filtered Array(All Players(All Teams), Hero Of(Current Array Element) == Hero(McCree)), 100 / (
			Global.MCCREE_ULT_TIME_SLOW_PERCENT / 100));
		Set Move Speed(Filtered Array(All Players(All Teams), Hero Of(Current Array Element) == Hero(McCree)), 100 / (
			Global.MCCREE_ULT_TIME_SLOW_PERCENT / 100));
		Wait(Global.GLOBAL_ULT_DURATION * (Global.MCCREE_ULT_TIME_SLOW_PERCENT / 100), Ignore Condition);
		Set Slow Motion(100);
		Set Aim Speed(All Players(All Teams), 100);
		Set Move Speed(All Players(All Teams), 100);
	}
}

rule("ULT: Mei")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mei;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Mei);
	}

	actions
	{
		Set Status(Filtered Array(All Players(All Teams), Hero Of(Current Array Element) != Hero(Mei)), Event Player, Frozen,
			Global.GLOBAL_ULT_DURATION);
	}
}

rule("ULT: Mercy")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mercy;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Mercy);
	}
}

rule("ULT: Mercy effect")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Is True For Any(Global.ultimateTimeLeftEntries, Current Array Element[0] == Hero(Mercy)) == True;
	}

	actions
	{
		Wait(2, Ignore Condition);
		Resurrect(Event Player);
		Big Message(All Players(All Teams), Custom String("{0} {1} RESURRECTED {0}", Ability Icon String(Hero(Mercy), Button(Ability 2)),
			Hero Of(Event Player)));
	}
}

rule("ULT: Moira effect")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Is True For Any(Global.ultimateTimeLeftEntries, Current Array Element[0] == Hero(Moira)) == True;
	}

	actions
	{
		Heal(Event Player, Event Player, Event Damage * Global.MOIRA_ULT_PERCENT_LIFESTEAL / 100);
	}
}

rule("ULT: Orisa")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Orisa);
	}

	actions
	{
		Set Damage Dealt(All Players(All Teams), 200);
		Wait(Global.GLOBAL_ULT_DURATION, Ignore Condition);
		Set Damage Dealt(All Players(All Teams), 100);
	}
}

rule("ULT: Pharah")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Pharah);
	}
}

rule("ULT: Pharah effect")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is True For Any(Global.ultimateTimeLeftEntries, Current Array Element[0] == Hero(Pharah)) == True;
		Is Button Held(Event Player, Button(Jump)) == True;
	}

	actions
	{
		Apply Impulse(Event Player, Up, Global.PHARAH_ULT_JUMP_HEIGHT, To World, Cancel Contrary Motion);
	}
}

rule("ULT: Reaper")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reaper;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Reaper);
	}

	actions
	{
		Event Player._targetPlayerList = Filtered Array(All Players(All Teams), Current Array Element != Event Player);
	}
}

rule("ULT: Reaper effect")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reaper;
	}

	conditions
	{
		Is True For Any(Global.ultimateTimeLeftEntries, Current Array Element[0] == Hero(Reaper)) == True;
		Hero Of(Event Player) == Hero(Reaper);
	}

	actions
	{
		For Player Variable(Event Player, _i_, 0, Count Of(Event Player._targetPlayerList), 1);
			Event Player._targetPlayer = Event Player._targetPlayerList[Event Player._i_];
			Damage(Event Player._targetPlayer, Event Player, Global.REAPER_ULT_DAMAGE_PER_SECOND / 10);
			disabled Small Message(Event Player, Custom String("DAMGE {0} {1}", Event Player._targetPlayer, Global.REAPER_ULT_DAMAGE_PER_SECOND / 10));
		End;
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("ULT: Reinhardt")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Reinhardt);
	}

	actions
	{
		Set Status(Filtered Array(All Players(All Teams), Is On Ground(Current Array Element) == True && Hero Of(Current Array Element)
			!= Hero(Reinhardt)), Event Player, Knocked Down, Global.GLOBAL_ULT_DURATION);
	}
}

rule("ULT: Roadhog effect")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Is True For Any(Global.ultimateTimeLeftEntries, Current Array Element[0] == Hero(Roadhog)) == True;
	}

	actions
	{
		Apply Impulse(Victim, Facing Direction Of(Attacker), Event Damage, To World, Incorporate Contrary Motion);
	}
}

rule("ULT: Sigma")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Sigma);
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("{0} GRAVITY ADAGIO... {1}", Hero Icon String(Hero(Sigma)), Ability Icon String(
			Hero(Sigma), Button(Ultimate))));
		Global.sigmaUltTimeLeft = Global.GLOBAL_ULT_DURATION * 2;
		Chase Global Variable Over Time(sigmaUltTimeLeft, 0, Global.GLOBAL_ULT_DURATION, None);
		Set Gravity(All Players(All Teams), 20);
		Wait(Global.GLOBAL_ULT_DURATION, Ignore Condition);
		Big Message(All Players(All Teams), Custom String("{0} GRAVITY ALLEGRO! {1}", Hero Icon String(Hero(Sigma)), Ability Icon String(
			Hero(Sigma), Button(Ultimate))));
		Set Gravity(All Players(All Teams), 200);
		Wait(Global.GLOBAL_ULT_DURATION, Ignore Condition);
		Set Gravity(All Players(All Teams), 100);
	}
}

rule("ULT: Sigma effect")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.sigmaUltTimeLeft > 0;
		Global.sigmaUltTimeLeft <= Global.GLOBAL_ULT_DURATION;
		Is True For Any(Global.ultimateTimeLeftEntries, Current Array Element[0] == Hero(Sigma)) == True;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Damage(Event Player, Filtered Array(All Players(All Teams), Hero Of(Current Array Element) == Hero(Sigma)), 100);
	}
}

rule("ULT: Soldier: 76 effect")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is True For Any(Global.ultimateTimeLeftEntries, Current Array Element[0] == Hero(Soldier: 76)) == True;
		(Is Button Held(Event Player, Button(Primary Fire)) || Is Button Held(Event Player, Button(Secondary Fire))) == True;
	}

	actions
	{
		Event Player._targetPlayer = Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player)));
		Start Facing(Event Player, Position Of(Event Player._targetPlayer) - Position Of(Event Player), 360, To World,
			Direction and Turn Rate);
		Wait Until(!(Is Button Held(Event Player, Button(Primary Fire)) || Is Button Held(Event Player, Button(Secondary Fire))), 10);
		Stop Facing(Event Player);
	}
}

rule("ULT: Sombra")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sombra;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Sombra);
	}

	actions
	{
		Set Status(Filtered Array(All Players(All Teams), Hero Of(Current Array Element) != Hero(Sombra)), Event Player, Hacked,
			Global.GLOBAL_ULT_DURATION);
	}
}

rule("ULT: Tracer")
{
	event
	{
		Ongoing - Each Player;
		All;
		Tracer;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Tracer);
	}

	actions
	{
		Event Player._targetPlayerList = Filtered Array(All Players(All Teams), Current Array Element != Event Player);
	}
}

rule("ULT: Tracer effect")
{
	event
	{
		Ongoing - Each Player;
		All;
		Tracer;
	}

	conditions
	{
		Is True For Any(Global.ultimateTimeLeftEntries, Current Array Element[0] == Hero(Tracer)) == True;
		Hero Of(Event Player) == Hero(Tracer);
		Is Button Held(Event Player, Button(Ability 1)) == True;
	}

	actions
	{
		For Player Variable(Event Player, _i_, 0, Count Of(Event Player._targetPlayerList), 1);
			Event Player._targetPlayer = Event Player._targetPlayerList[Event Player._i_];
			Teleport(Event Player._targetPlayer, Nearest Walkable Position(Position Of(Event Player._targetPlayer)
				+ Global.TRACER_ULT_BLINK_DISTANCE * Facing Direction Of(Event Player)));
		End;
	}
}

rule("ULT: Widowmaker")
{
	event
	{
		Ongoing - Each Player;
		All;
		Widowmaker;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Widowmaker);
	}
}

rule("ULT: Widowmaker effect")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Is True For Any(Global.ultimateTimeLeftEntries, Current Array Element[0] == Hero(Widowmaker)) == True;
		Event Was Critical Hit == False;
	}

	actions
	{
		Heal(Victim, Null, Event Damage);
		If(Is Alive(Victim) == False);
			Resurrect(Victim);
		End;
	}
}

rule("ULT: Winston")
{
	event
	{
		Ongoing - Each Player;
		All;
		Winston;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Winston);
	}

	actions
	{
		Set Max Health(All Players(All Teams), 200);
		Heal(All Players(All Teams), Event Player, 1000);
		Wait(Global.GLOBAL_ULT_DURATION, Ignore Condition);
		Set Max Health(Event Player, 100);
	}
}

rule("ULT: Zenyatta")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zenyatta;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) == Hero(Zenyatta);
	}

	actions
	{
		Event Player._targetPlayerList = All Players(All Teams);
	}
}

rule("ULT: Zenyatta effect")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zenyatta;
	}

	conditions
	{
		Is True For Any(Global.ultimateTimeLeftEntries, Current Array Element[0] == Hero(Zenyatta)) == True;
		Hero Of(Event Player) == Hero(Zenyatta);
	}

	actions
	{
		For Player Variable(Event Player, _i_, 0, Count Of(Event Player._targetPlayerList), 1);
			Event Player._targetPlayer = Event Player._targetPlayerList[Event Player._i_];
			Heal(Event Player._targetPlayer, Event Player, Global.ZENYATTA_ULT_HEAL_PER_SECOND / 10);
			disabled Small Message(Event Player, Custom String("DAMGE {0} {1}", Event Player._targetPlayer, Global.REAPER_ULT_DAMAGE_PER_SECOND / 10));
		End;
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}
