variables
{
	global:
		0: target
		1: BAP_LAVA_GROWTH_SPEED
		2: BASTION_TRACK_POINTS
		3: BRIG_RING_RADIUS
		4: ORISA_OBJECTIVE_RADIUS
		5: orisaObjectivePos
		6: orisaObjectiveEffectId
		7: REIN_PAYLOAD_POINTS
		8: REIN_PAYLOAD_RADIUS
		9: REIN_PAYLOAD_GROUND_OFFSET
		10: REIN_PAYLOAD_MOVESPEED
		11: REIN_PAYLOAD_CONTEST_RADIUS
		12: HAMMOND_GOAL_RADIUS
		13: ZEN_PEACE_RADIUS

	player:
		0: target
		1: index
		2: bapLavaPos
		3: bapLavaRadius
		4: bapLavaEffectId
		5: bastionTrackEffectIds
		6: bastionTrackPointIndex
		7: brig1v1Target
		8: brigRingPos
		9: brigRingEffectId
		10: meiHUDTextId
		11: mercyKiller
		12: reaperPowerLevel
		13: reinPayloadPos
		14: reinPayloadEffectId
		15: reinPayloadPointIndex
		16: reinPayloadFlagEffectId
		17: roadhogEffectId
		18: roadhogEatRadius
		19: winstonMeatEffectId
		20: hammondLastDamager
		21: hammondGoalEffectId
		22: hammondGoalPos
		23: zenPeaceEffectId
}

rule("Game Setup")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Disable Built-In Game Mode Scoring;
	}
}

rule("Player gets point when kill other player")
{
	event
	{
		Player Dealt Final Blow;
		All;
		All;
	}

	actions
	{
		Modify Player Score(Event Player, 1);
	}
}

rule("Player loses point when kills themselves")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Or(Compare(Attacker, ==, Victim), Compare(Attacker, ==, Null)) == True;
	}

	actions
	{
		Modify Player Score(Event Player, -1.000);
	}
}

rule("Instant Start")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Set Match Time(0);
	}
}

rule("Game Setup (BAP, BRIG, HAM, ZEN)")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Set Global Variable(BAP_LAVA_GROWTH_SPEED, 0.100);
		Set Global Variable(BRIG_RING_RADIUS, 10);
		Set Global Variable(HAMMOND_GOAL_RADIUS, 3);
		Set Global Variable(ZEN_PEACE_RADIUS, 10);
	}
}

rule("Game Setup (ORISA)")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Set Global Variable(ORISA_OBJECTIVE_RADIUS, 5);
	}
}

rule("Game Setup (REIN POINTS)")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Set Global Variable(REIN_PAYLOAD_RADIUS, 1);
		Set Global Variable(REIN_PAYLOAD_MOVESPEED, 2);
		Set Global Variable(REIN_PAYLOAD_GROUND_OFFSET, Multiply(Up, 1.500));
		Set Global Variable(REIN_PAYLOAD_POINTS, Empty Array);
		Set Global Variable(REIN_PAYLOAD_CONTEST_RADIUS, 5);
		Modify Global Variable(REIN_PAYLOAD_POINTS, Append To Array, Vector(193.080, 9, 112.911));
		Modify Global Variable(REIN_PAYLOAD_POINTS, Append To Array, Vector(193.398, 8, 103.589));
		Modify Global Variable(REIN_PAYLOAD_POINTS, Append To Array, Vector(219.554, 6, 103.333));
		Modify Global Variable(REIN_PAYLOAD_POINTS, Append To Array, Vector(219.036, 2, 91.455));
		Modify Global Variable(REIN_PAYLOAD_POINTS, Append To Array, Vector(218.391, 1, 81.491));
		Modify Global Variable(REIN_PAYLOAD_POINTS, Append To Array, Vector(186.954, 1, 81.111));
		Modify Global Variable(REIN_PAYLOAD_POINTS, Append To Array, Vector(187.221, 1, 92.878));
		Modify Global Variable(REIN_PAYLOAD_POINTS, Append To Array, Vector(176.442, 5, 92.730));
		Modify Global Variable(REIN_PAYLOAD_POINTS, Append To Array, Vector(176.894, 5, 76.660));
		Modify Global Variable(REIN_PAYLOAD_POINTS, Append To Array, Vector(182.837, 6, 75.966));
		Modify Global Variable(REIN_PAYLOAD_POINTS, Append To Array, Vector(183.261, 8, 64.856));
		Modify Global Variable(REIN_PAYLOAD_POINTS, Append To Array, Vector(193.289, 8, 63.571));
		Modify Global Variable(REIN_PAYLOAD_POINTS, Append To Array, Vector(203.293, 8.001, 58.252));
	}
}

rule("==TEST==SPAWN BOTS==")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Host Player == True;
		Is Button Held(Event Player, Interact) == True;
	}

	actions
	{
		Create Dummy Bot(Random Value In Array(All Heroes), All Teams, -1.000, Nearest Walkable Position(Ray Cast Hit Position(
			Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 100)), All Players(
			All Teams), Event Player, True)), Multiply(Facing Direction Of(Event Player), -1.000));
	}
}

rule("Ana - Spawns in")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Ana);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Small Message(Event Player, Custom String("{0} Ana is playing Hide & Seek:", Hero Icon String(Hero Of(Event Player)), Null, Null));
		Small Message(Event Player, Custom String("{0} Look at enemies to kill them, and keep out of sight.", Hero Icon String(Hero Of(
			Event Player)), Null, Null));
		Wait(3, Ignore Condition);
		Big Message(Event Player, Custom String("READY OR NOT, HERE I COME!", Null, Null, Null));
	}
}

rule("Ana - Sees enemy")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Ana);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Set Player Variable(Event Player, target, Player Closest To Reticle(Event Player, All Teams));
		Skip If(Compare(Is In Line of Sight(Eye Position(Event Player), Eye Position(Player Variable(Event Player, target)),
			All Barriers Block LOS), ==, False), 1);
		Damage(Player Variable(Event Player, target), Event Player, 20);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Baptiste - Spawns in")
{
	event
	{
		Ongoing - Each Player;
		All;
		Baptiste;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Baptiste);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Small Message(Event Player, Custom String("{0} Baptiste is playing Rising Flood:", Hero Icon String(Hero Of(Event Player)), Null,
			Null));
		Small Message(Event Player, Custom String("{0} The floor is lava, and if it's not, it soon will be.", Hero Icon String(Hero Of(
			Event Player)), Null, Null));
		Wait(3, Ignore Condition);
		Big Message(Event Player, Custom String("RUN FOR THE HILLS!", Null, Null, Null));
		Set Player Variable(Event Player, bapLavaPos, Add(Position Of(Event Player), Multiply(Up, -101.000)));
		Set Player Variable(Event Player, bapLavaRadius, 100);
		Destroy Effect(Player Variable(Event Player, bapLavaEffectId));
		Create Effect(All Players(All Teams), Sphere, Red, Player Variable(Event Player, bapLavaPos), Player Variable(Event Player,
			bapLavaRadius), Position and Radius);
		Set Player Variable(Event Player, bapLavaEffectId, Last Created Entity);
		Stop Chasing Player Variable(Event Player, bapLavaRadius);
		Chase Player Variable At Rate(Event Player, bapLavaRadius, 1000, Global Variable(BAP_LAVA_GROWTH_SPEED), Destination and Rate);
	}
}

rule("Baptiste dies")
{
	event
	{
		Player Died;
		All;
		Baptiste;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Baptiste);
	}

	actions
	{
		Destroy Effect(Player Variable(Victim, bapLavaEffectId));
		Set Player Variable(Event Player, bapLavaRadius, 1);
	}
}

rule("Baptiste - Lava Burns Players")
{
	event
	{
		Ongoing - Each Player;
		All;
		Baptiste;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Baptiste);
		Is Alive(Event Player) == True;
		Count Of(Players Within Radius(Player Variable(Event Player, bapLavaPos), Player Variable(Event Player, bapLavaRadius), All Teams,
			Surfaces And All Barriers)) > 0;
	}

	actions
	{
		Damage(Filtered Array(Players Within Radius(Player Variable(Event Player, bapLavaPos), Player Variable(Event Player,
			bapLavaRadius), All Teams, Off), Compare(Is Alive(Current Array Element), ==, True)), Event Player, 20);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Bastion - Spawns in")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Bastion);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Set Player Variable(Event Player, index, 0);
		Set Player Variable(Event Player, bastionTrackPointIndex, 1);
		Press Button(Event Player, Ability 1);
		Disallow Button(Event Player, Ability 1);
		Teleport(Event Player, First Of(Global Variable(BASTION_TRACK_POINTS)));
		Set Facing(Event Player, Subtract(Value In Array(Global Variable(BASTION_TRACK_POINTS), 1), Value In Array(Global Variable(
			BASTION_TRACK_POINTS), 0)), To World);
		Small Message(Event Player, Custom String("{0} Bastion is playing Race Kart:", Hero Icon String(Hero Of(Event Player)), Null,
			Null));
		Small Message(Event Player, Custom String("{0} Complete the laps to earn points.", Hero Icon String(Hero Of(Event Player)), Null,
			Null));
		Wait(3, Ignore Condition);
		Big Message(Event Player, Custom String("READY...", Null, Null, Null));
		Wait(1, Ignore Condition);
		Big Message(Event Player, Custom String("SET...", Null, Null, Null));
		Wait(1, Ignore Condition);
		Big Message(Event Player, Custom String("GO!", Null, Null, Null));
		Start Forcing Throttle(Event Player, 1, 1, 0, 0, 0, 0);
	}
}

rule("Bastion dies - stop forcing things")
{
	event
	{
		Player Died;
		All;
		Bastion;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Bastion);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Allow Button(Event Player, Ability 1);
		Stop Forcing Throttle(Event Player);
		Set Player Variable(Event Player, index, 0);
		Set Player Variable(Event Player, bastionTrackPointIndex, 1);
	}
}

rule("Bastion - Make track")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Bastion);
		Is Alive(Event Player) == True;
		Player Variable(Event Player, index) < Count Of(Global Variable(BASTION_TRACK_POINTS));
	}

	actions
	{
		Destroy Effect(Value In Array(Player Variable(Event Player, bastionTrackEffectIds), Player Variable(Event Player, index)));
		Skip If(Compare(Player Variable(Event Player, index), !=, Subtract(Count Of(Global Variable(BASTION_TRACK_POINTS)), 1)), 1);
		Create Beam Effect(Event Player, Bad Beam, Value In Array(Global Variable(BASTION_TRACK_POINTS), Player Variable(Event Player,
			index)), Value In Array(Global Variable(BASTION_TRACK_POINTS), 0), White, None);
		Skip If(Compare(Player Variable(Event Player, index), ==, Subtract(Count Of(Global Variable(BASTION_TRACK_POINTS)), 1)), 1);
		Create Beam Effect(Event Player, Bad Beam, Value In Array(Global Variable(BASTION_TRACK_POINTS), Player Variable(Event Player,
			index)), Value In Array(Global Variable(BASTION_TRACK_POINTS), Add(Player Variable(Event Player, index), 1)), White, None);
		Set Player Variable At Index(Event Player, bastionTrackEffectIds, Player Variable(Event Player, index), Last Created Entity);
		Modify Player Variable(Event Player, index, Add, 1);
		Wait(0.200, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Bastion - reaches check point")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Bastion);
		Is Alive(Event Player) == True;
		Distance Between(Position Of(Event Player), Value In Array(Global Variable(BASTION_TRACK_POINTS), Player Variable(Event Player,
			bastionTrackPointIndex))) <= 3;
	}

	actions
	{
		Set Ultimate Charge(Event Player, Add(Ultimate Charge Percent(Event Player), 1));
		Skip If(Compare(Player Variable(Event Player, bastionTrackPointIndex), ==, 0), 3);
		Destroy Effect(Value In Array(Player Variable(Event Player, bastionTrackEffectIds), Player Variable(Event Player,
			bastionTrackPointIndex)));
		Create Beam Effect(Event Player, Bad Beam, Value In Array(Global Variable(BASTION_TRACK_POINTS), Player Variable(Event Player,
			bastionTrackPointIndex)), Value In Array(Global Variable(BASTION_TRACK_POINTS), Subtract(Player Variable(Event Player,
			bastionTrackPointIndex), 1)), Green, None);
		Set Player Variable At Index(Event Player, bastionTrackEffectIds, Player Variable(Event Player, index), Last Created Entity);
		Skip If(Compare(Player Variable(Event Player, bastionTrackPointIndex), !=, 0), 3);
		Set Player Variable(Event Player, index, 0);
		Big Message(Event Player, Custom String("LAP COMPLETE!", Null, Null, Null));
		Set Ultimate Charge(Event Player, Add(Ultimate Charge Percent(Event Player), 10));
		Modify Player Variable(Event Player, bastionTrackPointIndex, Add, 1);
		Skip If(Compare(Player Variable(Event Player, bastionTrackPointIndex), !=, Count Of(Global Variable(BASTION_TRACK_POINTS))), 1);
		Set Player Variable(Event Player, bastionTrackPointIndex, 0);
	}
}

rule("Bastion - press LMB to go")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Bastion);
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Primary Fire) == True;
	}

	actions
	{
		Start Forcing Throttle(Event Player, 1, 1, 0, 0, 0, 0);
	}
}

rule("Bastion - unpress LMB to stop")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Bastion);
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Primary Fire) == False;
	}

	actions
	{
		Start Forcing Throttle(Event Player, 0, 0, 0, 0, 0, 0);
	}
}

rule("Bastion - press SHIFT to speed boost")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Bastion);
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Ability 1) == True;
		Ultimate Charge Percent(Event Player) > 0;
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Set Move Speed(Event Player, 200);
		Set Ultimate Charge(Event Player, Add(Ultimate Charge Percent(Event Player), -1.000));
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
		Set Move Speed(Event Player, 100);
	}
}

rule("Bastion - start ULT")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Bastion);
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Ultimate) == True;
		Ultimate Charge Percent(Event Player) == 100;
	}

	actions
	{
		Set Move Speed(Event Player, 500);
		Teleport(Event Player, Value In Array(Global Variable(BASTION_TRACK_POINTS), Player Variable(Event Player,
			bastionTrackPointIndex)));
	}
}

rule("Bastion - ULTING AT WARP SPEED")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Bastion);
		Is Alive(Event Player) == True;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Facing(Event Player, Subtract(Value In Array(Global Variable(BASTION_TRACK_POINTS), Player Variable(Event Player,
			bastionTrackPointIndex)), Position Of(Event Player)), To World);
		Damage(Players Within Radius(Position Of(Event Player), 3, All Teams, Surfaces And All Barriers), Event Player, 100);
		Wait(0.010, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Bastion - ult ended")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Bastion);
		Is Alive(Event Player) == True;
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Allow Button(Event Player, Ability 1);
		Press Button(Event Player, Ability 1);
		Disallow Button(Event Player, Ability 1);
	}
}

rule("Brigitte - Spawns in")
{
	event
	{
		Ongoing - Each Player;
		All;
		Brigitte;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Brigitte);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Small Message(Event Player, Custom String("{0} Brigitte is playing For Honor:", Hero Icon String(Hero Of(Event Player)), Null,
			Null));
		Small Message(Event Player, Custom String("{0} Damage an enemy to lock them into a 1v1.", Hero Icon String(Hero Of(Event Player)),
			Null, Null));
		Wait(3, Ignore Condition);
		Big Message(Event Player, Custom String("RALLY TO ME!", Null, Null, Null));
		Set Player Variable(Event Player, brig1v1Target, Null);
	}
}

rule("Brigitte - lock player into 1v1")
{
	event
	{
		Player Dealt Damage;
		All;
		Brigitte;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Brigitte);
		Is Alive(Event Player) == True;
		Player Variable(Event Player, brig1v1Target) == Null;
	}

	actions
	{
		Set Player Variable(Event Player, brig1v1Target, Victim);
		Set Player Variable(Event Player, brigRingPos, Position Of(Event Player));
		Destroy Effect(Player Variable(Event Player, brigRingEffectId));
		Create Effect(All Players(All Teams), Ring, White, Player Variable(Event Player, brigRingPos), Global Variable(BRIG_RING_RADIUS),
			None);
		Set Player Variable(Event Player, brigRingEffectId, Last Created Entity);
	}
}

rule("Brigitte - 1v1 target leaves ring")
{
	event
	{
		Ongoing - Each Player;
		All;
		Brigitte;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Brigitte);
		Is Alive(Event Player) == True;
		Player Variable(Event Player, brig1v1Target) != Null;
		Distance Between(Player Variable(Event Player, brigRingPos), Position Of(Player Variable(Event Player, brig1v1Target)))
			> Global Variable(BRIG_RING_RADIUS);
	}

	actions
	{
		Damage(Player Variable(Event Player, brig1v1Target), Event Player, 1000);
	}
}

rule("Brigitte - brig leaves ring during 1v1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Brigitte;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Brigitte);
		Is Alive(Event Player) == True;
		Player Variable(Event Player, brig1v1Target) != Null;
		Distance Between(Player Variable(Event Player, brigRingPos), Position Of(Event Player)) > Global Variable(BRIG_RING_RADIUS);
	}

	actions
	{
		Damage(Event Player, Player Variable(Event Player, brig1v1Target), 1000);
	}
}

rule("Brigitte - 1v1 target dies")
{
	event
	{
		Ongoing - Each Player;
		All;
		Brigitte;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Brigitte);
		Player Variable(Event Player, brig1v1Target) != Null;
		Is Alive(Player Variable(Event Player, brig1v1Target)) == False;
	}

	actions
	{
		Modify Player Score(Event Player, 1);
		Set Player Variable(Event Player, brig1v1Target, Null);
		Destroy Effect(Player Variable(Event Player, brigRingEffectId));
	}
}

rule("Brigitte - brig dies during 1v1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Brigitte;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Brigitte);
		Player Variable(Event Player, brig1v1Target) != Null;
		Is Alive(Event Player) == False;
	}

	actions
	{
		Modify Player Score(Player Variable(Event Player, brig1v1Target), 1);
		Set Player Variable(Event Player, brig1v1Target, Null);
		Destroy Effect(Player Variable(Event Player, brigRingEffectId));
	}
}

rule("Genji - Spawns in")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Genji);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Small Message(Event Player, Custom String("{0} Genji is playing One in the Chamber:", Hero Icon String(Hero Of(Event Player)),
			Null, Null));
		Small Message(Event Player, Custom String("{0} Your dash can instakill, but you only get one.", Hero Icon String(Hero Of(
			Event Player)), Null, Null));
		Wait(3, Ignore Condition);
		Big Message(Event Player, Custom String("YOU LOOK *DASHING* TODAY!", Null, Null, Null));
	}
}

rule("Genji - deals double damage (actually just an extra 100)")
{
	event
	{
		Player Dealt Damage;
		All;
		Genji;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Genji);
		Is Alive(Event Player) == True;
		Event Damage > 100;
	}

	actions
	{
		Damage(Victim, Attacker, 20);
	}
}

rule("Mei - Spawns in")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mei;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Mei);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Small Message(Event Player, Custom String("{0} Mei is playing Freeze Tag:", Hero Icon String(Hero Of(Event Player)), Null, Null));
		Small Message(Event Player, Custom String("{0} Punch to freeze enemies, freeze 5 enemies to kill.", Hero Icon String(Hero Of(
			Event Player)), Null, Null));
		Wait(3, Ignore Condition);
		Big Message(Event Player, Custom String("FREEZE!", Null, Null, Null));
		Destroy HUD Text(Player Variable(Event Player, meiHUDTextId));
		Create HUD Text(Event Player, Custom String("FROZEN: {0} / 5", Count Of(Filtered Array(All Living Players(All Teams), Compare(
			Has Status(Current Array Element, Frozen), ==, True))), Null, Null), Null, Null, Left, 0, White, White, White, String,
			Default Visibility);
		Set Player Variable(Event Player, meiHUDTextId, Last Text ID);
	}
}

rule("Mei - deals damage to freeze")
{
	event
	{
		Player Dealt Damage;
		All;
		Mei;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Mei);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Set Status(Victim, Attacker, Frozen, 9999);
	}
}

rule("Mei - Frozen enemies unfreeze when damaged")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Hero Of(Attacker) != Hero(Mei);
		Is Alive(Event Player) == True;
		Has Status(Event Player, Frozen) == True;
	}

	actions
	{
		Clear Status(Event Player, Frozen);
	}
}

rule("Mei - deals massive damage when get 5 frozen enemies")
{
	event
	{
		Player Dealt Damage;
		All;
		Mei;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Mei);
		Is Alive(Event Player) == True;
		Count Of(Filtered Array(All Living Players(All Teams), Compare(Has Status(Current Array Element, Frozen), ==, True))) >= 4;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Set Player Variable(Event Player, target, Filtered Array(All Living Players(All Teams), Compare(Has Status(Current Array Element,
			Frozen), ==, True)));
		Damage(Player Variable(Event Player, target), Event Player, 10000);
		Wait(1, Ignore Condition);
		Clear Status(Player Variable(Event Player, target), Frozen);
		Set Player Variable(Event Player, target, Null);
	}
}

rule("Mei - Frozen enemy unfreezes when dead")
{
	event
	{
		Player Died;
		All;
		All;
	}

	actions
	{
		Clear Status(Event Player, Frozen);
	}
}

rule("Mei dies")
{
	event
	{
		Player Died;
		All;
		Mei;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Mei);
	}

	actions
	{
		Destroy HUD Text(Player Variable(Event Player, meiHUDTextId));
	}
}

rule("Mercy - Spawns in")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mercy;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Mercy);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Small Message(Event Player, Custom String("{0} Mercy is playing Mercy Boxing:", Hero Icon String(Hero Of(Event Player)), Null,
			Null));
		Small Message(Event Player, Custom String("{0} You pack a powerful punch and can rez yourself.", Hero Icon String(Hero Of(
			Event Player)), Null, Null));
		Wait(3, Ignore Condition);
		Big Message(Event Player, Custom String("ROUND {0}: FIGHT!", Score Of(Event Player), Null, Null));
	}
}

rule("Mercy dies")
{
	event
	{
		Player Died;
		All;
		Mercy;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Mercy);
	}

	actions
	{
		Big Message(Event Player, Custom String("REZ YOURSELF!", Null, Null, Null));
		Set Player Variable(Event Player, mercyKiller, Attacker);
	}
}

rule("Mercy - Rezzes herself")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mercy;
	}

	conditions
	{
		Is Button Held(Event Player, Ability 2) == True;
		Hero Of(Event Player) == Hero(Mercy);
		Is Alive(Event Player) == False;
	}

	actions
	{
		Resurrect(Event Player);
		Skip If(Compare(Player Variable(Event Player, mercyKiller), ==, Null), 1);
		Modify Player Score(Player Variable(Event Player, mercyKiller), -1.000);
		Set Player Variable(Event Player, mercyKiller, Null);
	}
}

rule("Moira - Spawns in")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Moira);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Disallow Button(Event Player, Ultimate);
		Small Message(Event Player, Custom String("{0} Moira is playing Tiny OW:", Hero Icon String(Hero Of(Event Player)), Null, Null));
		Small Message(Event Player, Custom String("{0} Fast cooldowns, your ultimate teleports everyone to you.", Hero Icon String(Hero Of(
			Event Player)), Null, Null));
		Wait(3, Ignore Condition);
		Big Message(Event Player, Custom String("FIND A TINY ROOM AND ULT!", Null, Null, Null));
	}
}

rule("Moira - Switches off")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) != Hero(Moira);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Allow Button(Event Player, Ultimate);
	}
}

rule("Moira - Ultimate: Teleport all players to her")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Moira);
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Ultimate) == True;
	}

	actions
	{
		Set Ultimate Charge(Event Player, 0);
		Teleport(All Living Players(All Teams), Position Of(Event Player));
		Damage(All Living Players(All Teams), Event Player, 1);
	}
}

rule("Orisa - Spawns in")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Orisa);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Small Message(Event Player, Custom String("{0} Orisa is playing Assault:", Hero Icon String(Hero Of(Event Player)), Null, Null));
		Small Message(Event Player, Custom String("{0} Ult to set the objective, then defend it.", Hero Icon String(Hero Of(Event Player)),
			Null, Null));
		Wait(3, Ignore Condition);
		Big Message(Event Player, Custom String("DEFEND THE OBJECTIVE!", Null, Null, Null));
	}
}

rule("Orisa - Ults = set objective position")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Orisa);
		Is Alive(Event Player) == True;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Global Variable(orisaObjectivePos, Position Of(Event Player));
		Skip If(Compare(Global Variable(orisaObjectiveEffectId), ==, Null), 1);
		Big Message(Players On Hero(Hero(Orisa), All Teams), Custom String("{0}{1} Moved the objective!", Hero Icon String(Hero(Orisa)),
			Event Player, Null));
		Skip If(Compare(Global Variable(orisaObjectiveEffectId), !=, Null), 3);
		Create Effect(All Players(All Teams), Ring, Red, Global Variable(orisaObjectivePos), Global Variable(ORISA_OBJECTIVE_RADIUS),
			Position and Radius);
		Set Global Variable(orisaObjectiveEffectId, Last Created Entity);
		Big Message(Players On Hero(Hero(Orisa), All Teams), Custom String("{0} Objective Set!", Hero Icon String(Hero(Orisa)), Null,
			Null));
	}
}

rule("Orisa all switched off - destroy objective")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Hero Being Played(Hero(Orisa), All Teams) == False;
	}

	actions
	{
		Destroy Effect(Global Variable(orisaObjectiveEffectId));
		Set Global Variable(orisaObjectiveEffectId, Null);
	}
}

rule("Orisa - solo on obejctive = points")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Hero Being Played(Hero(Orisa), All Teams) == True;
		Count Of(Players Within Radius(Global Variable(orisaObjectivePos), Global Variable(ORISA_OBJECTIVE_RADIUS), All Teams,
			Surfaces And All Barriers)) == 1;
	}

	actions
	{
		Wait(5, Abort When False);
		Set Global Variable(target, First Of(Players Within Radius(Global Variable(orisaObjectivePos), Global Variable(
			ORISA_OBJECTIVE_RADIUS), All Teams, Surfaces And All Barriers)));
		Modify Player Score(Global Variable(target), 1);
		Skip If(Compare(Hero Of(Global Variable(target)), ==, Hero(Orisa)), 1);
		Big Message(Global Variable(target), Custom String("Objective Capture +1", Null, Null, Null));
		Skip If(Compare(Hero Of(Global Variable(target)), !=, Hero(Orisa)), 1);
		Big Message(Global Variable(target), Custom String("Objective Defense +1", Null, Null, Null));
		Loop If Condition Is True;
	}
}

rule("Reaper - Spawns in")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reaper;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reaper);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Small Message(Event Player, Custom String("{0} Reaper is playing Zombies:", Hero Icon String(Hero Of(Event Player)), Null, Null));
		Small Message(Event Player, Custom String("{0} You get more powerful each time you get killed.", Hero Icon String(Hero Of(
			Event Player)), Null, Null));
		Wait(3, Ignore Condition);
		Big Message(Event Player, Custom String("BRAINS!", Null, Null, Null));
		Start Forcing Player To Be Hero(Event Player, Hero(Reaper));
		Skip If(Compare(Player Variable(Event Player, reaperPowerLevel), >, 0), 1);
		Set Player Variable(Event Player, reaperPowerLevel, 1);
		Set Max Health(Event Player, Multiply(Player Variable(Event Player, reaperPowerLevel), 15));
		Set Damage Dealt(Event Player, Multiply(Player Variable(Event Player, reaperPowerLevel), 15));
	}
}

rule("Reaper dies")
{
	event
	{
		Player Died;
		All;
		Reaper;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reaper);
	}

	actions
	{
		Modify Player Variable(Event Player, reaperPowerLevel, Add, 2);
		Set Max Health(Event Player, 100);
		Set Damage Dealt(Event Player, 100);
	}
}

rule("Reaper got a kill - stop forcing hero, make new zombie")
{
	event
	{
		Player Dealt Final Blow;
		All;
		Reaper;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reaper);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Stop Forcing Player To Be Hero(Event Player);
		Skip If(Compare(Hero Of(Victim), ==, Hero(Reaper)), 1);
		Start Forcing Player To Be Hero(Victim, Hero(Reaper));
	}
}

rule("Reaper heals reaper")
{
	event
	{
		Player Dealt Damage;
		All;
		Reaper;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reaper);
		Is Alive(Event Player) == True;
		Hero Of(Victim) == Hero(Reaper);
	}

	actions
	{
		Heal(Victim, Attacker, Multiply(Event Damage, 2));
	}
}

rule("Rein - Spawn in")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reinhardt);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Small Message(Event Player, Custom String("{0} Reinhardt is playing Escort:", Hero Icon String(Hero Of(Event Player)), Null,
			Null));
		Small Message(Event Player, Custom String("{0} Escort the payload to  score.", Hero Icon String(Hero Of(Event Player)), Null,
			Null));
		Wait(3, Ignore Condition);
		Big Message(Event Player, Custom String("ESCORT THE PAYLOAD!", Null, Null, Null));
	}
}

rule("Rein - Spawn payload")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reinhardt);
		Is Alive(Event Player) == True;
		Player Variable(Event Player, reinPayloadPos) == Null;
	}

	actions
	{
		Teleport(Event Player, Value In Array(Global Variable(REIN_PAYLOAD_POINTS), 0));
		Set Player Variable(Event Player, reinPayloadPos, Value In Array(Global Variable(REIN_PAYLOAD_POINTS), 0));
		Set Player Variable(Event Player, reinPayloadPointIndex, 0);
		Destroy Effect(Player Variable(Event Player, reinPayloadEffectId));
		Create Effect(All Players(All Teams), Sphere, White, Add(Player Variable(Event Player, reinPayloadPos), Global Variable(
			REIN_PAYLOAD_GROUND_OFFSET)), Global Variable(REIN_PAYLOAD_RADIUS), Position and Radius);
		Set Player Variable(Event Player, reinPayloadEffectId, Last Created Entity);
		Destroy Effect(Player Variable(Event Player, reinPayloadFlagEffectId));
		Create Icon(Event Player, Add(Player Variable(Event Player, reinPayloadPos), Global Variable(REIN_PAYLOAD_GROUND_OFFSET)), Flag,
			Visible To and Position, Green, True);
		Set Player Variable(Event Player, reinPayloadFlagEffectId, Last Created Entity);
	}
}

rule("==TEST==Rein lay payload points")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Host Player == True;
		Is Button Held(Event Player, Crouch) == True;
		Hero Of(Event Player) == Hero(Reinhardt);
	}

	actions
	{
		Modify Global Variable(REIN_PAYLOAD_POINTS, Append To Array, Position Of(Event Player));
	}
}

rule("Rein - Payload moves to next point (and kill everyone if reaches destination)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reinhardt);
		Is Alive(Event Player) == True;
		Player Variable(Event Player, reinPayloadPos) == Value In Array(Global Variable(REIN_PAYLOAD_POINTS), Player Variable(Event Player,
			reinPayloadPointIndex));
	}

	actions
	{
		disabled Stop Chasing Player Variable(Event Player, reinPayloadPos);
		Modify Player Variable(Event Player, reinPayloadPointIndex, Add, 1);
		disabled Chase Player Variable At Rate(Event Player, reinPayloadPos, Value In Array(Global Variable(REIN_PAYLOAD_POINTS), Player Variable(
			Event Player, reinPayloadPointIndex)), Global Variable(REIN_PAYLOAD_MOVESPEED), Destination and Rate);
		Abort If(Compare(Player Variable(Event Player, reinPayloadPointIndex), <, Count Of(Global Variable(REIN_PAYLOAD_POINTS))));
		Damage(Filtered Array(All Players(All Teams), Compare(Current Array Element, !=, Event Player)), Event Player, 1000);
		Set Player Variable(Event Player, reinPayloadPos, Value In Array(Global Variable(REIN_PAYLOAD_POINTS), 0));
		Set Player Variable(Event Player, reinPayloadPointIndex, 1);
		disabled Stop Chasing Player Variable(Event Player, reinPayloadPos);
		disabled Chase Player Variable At Rate(Event Player, reinPayloadPos, Value In Array(Global Variable(REIN_PAYLOAD_POINTS), Player Variable(
			Event Player, reinPayloadPointIndex)), Global Variable(REIN_PAYLOAD_MOVESPEED), Destination and Rate);
	}
}

rule("Rein - Payload only moves when Rein is near")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reinhardt);
		Is Alive(Event Player) == True;
		Distance Between(Position Of(Event Player), Player Variable(Event Player, reinPayloadPos)) <= Global Variable(
			REIN_PAYLOAD_CONTEST_RADIUS);
		Count Of(Filtered Array(Players Within Radius(Add(Player Variable(Event Player, reinPayloadPos), Global Variable(
			REIN_PAYLOAD_GROUND_OFFSET)), Global Variable(REIN_PAYLOAD_CONTEST_RADIUS), All Teams, Surfaces And All Barriers), And(Compare(
			Current Array Element, !=, Event Player), Compare(Is Alive(Current Array Element), ==, True)))) == 0;
	}

	actions
	{
		Stop Chasing Player Variable(Event Player, reinPayloadPos);
		Chase Player Variable At Rate(Event Player, reinPayloadPos, Value In Array(Global Variable(REIN_PAYLOAD_POINTS), Player Variable(
			Event Player, reinPayloadPointIndex)), Global Variable(REIN_PAYLOAD_MOVESPEED), Destination and Rate);
	}
}

rule("Rein - Payload stops when enemy is near")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reinhardt);
		Is Alive(Event Player) == True;
		Count Of(Filtered Array(Players Within Radius(Add(Player Variable(Event Player, reinPayloadPos), Global Variable(
			REIN_PAYLOAD_GROUND_OFFSET)), Global Variable(REIN_PAYLOAD_CONTEST_RADIUS), All Teams, Surfaces And All Barriers), And(Compare(
			Current Array Element, !=, Event Player), Compare(Is Alive(Current Array Element), ==, True)))) > 0;
	}

	actions
	{
		Stop Chasing Player Variable(Event Player, reinPayloadPos);
	}
}

rule("Rein - Payload moves backward when Rein is not near")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reinhardt);
		Is Alive(Event Player) == True;
		Distance Between(Position Of(Event Player), Player Variable(Event Player, reinPayloadPos)) > Global Variable(
			REIN_PAYLOAD_CONTEST_RADIUS);
	}

	actions
	{
		Stop Chasing Player Variable(Event Player, reinPayloadPos);
		Chase Player Variable At Rate(Event Player, reinPayloadPos, Value In Array(Global Variable(REIN_PAYLOAD_POINTS), Subtract(
			Player Variable(Event Player, reinPayloadPointIndex), 1)), Multiply(Global Variable(REIN_PAYLOAD_MOVESPEED), 0.250),
			Destination and Rate);
	}
}

rule("Rein - Payload moves to prev point when Rein is not near")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reinhardt);
		Is Alive(Event Player) == True;
		Player Variable(Event Player, reinPayloadPos) == Value In Array(Global Variable(REIN_PAYLOAD_POINTS), Subtract(Player Variable(
			Event Player, reinPayloadPointIndex), 1));
		Player Variable(Event Player, reinPayloadPointIndex) > 1;
		Distance Between(Position Of(Event Player), Player Variable(Event Player, reinPayloadPos)) > Global Variable(
			REIN_PAYLOAD_CONTEST_RADIUS);
	}

	actions
	{
		Modify Player Variable(Event Player, reinPayloadPointIndex, Subtract, 1);
	}
}

rule("Rein switch off")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) != Hero(Reinhardt);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Destroy Effect(Player Variable(Event Player, reinPayloadEffectId));
		Destroy Icon(Player Variable(Event Player, reinPayloadFlagEffectId));
		Set Player Variable(Event Player, reinPayloadPos, Null);
		Set Player Variable(Event Player, reinPayloadPointIndex, 0);
	}
}

rule("Roadhog - Spawns in")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Roadhog);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Set Player Variable(Event Player, roadhogEatRadius, 1);
		Wait(1, Ignore Condition);
		Destroy Effect(Player Variable(Event Player, roadhogEffectId));
		Create Effect(All Players(All Teams), Sphere, Red, Event Player, Player Variable(Event Player, roadhogEatRadius),
			Position and Radius);
		Set Player Variable(Event Player, roadhogEffectId, Last Created Entity);
		Small Message(Event Player, Custom String("{0} Roadhog is playing Agar.io:", Hero Icon String(Hero Of(Event Player)), Null, Null));
		Small Message(Event Player, Custom String("{0} Hook enemies to grow your player-eating sphere.", Hero Icon String(Hero Of(
			Event Player)), Null, Null));
		Wait(3, Ignore Condition);
		Big Message(Event Player, Custom String("OM NOM NOM!", Null, Null, Null));
	}
}

rule("Roadhog - Switches off")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) != Hero(Roadhog);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Destroy Effect(Player Variable(Event Player, roadhogEffectId));
		Set Player Variable(Event Player, roadhogEffectId, Null);
		Set Player Variable(Event Player, roadhogEatRadius, 0);
	}
}

rule("Roadhog - Deals damage (eats players points)")
{
	event
	{
		Player Dealt Damage;
		All;
		Roadhog;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Roadhog);
		Is Alive(Event Player) == True;
		Event Damage <= 50;
	}

	actions
	{
		Kill(Victim, Attacker);
		Modify Player Score(Attacker, Score Of(Victim));
		Set Player Score(Victim, 0);
		Set Player Variable(Attacker, roadhogEatRadius, Score Of(Attacker));
		disabled Skip If(Compare(Player Variable(Event Player, roadhogEffectId), !=, Null), 4);
		disabled Wait(0.250, Ignore Condition);
		disabled Skip If(Compare(Player Variable(Event Player, roadhogEatRadius), !=, 1), 3);
		disabled Destroy Effect(Player Variable(Event Player, roadhogEffectId));
		disabled Create Effect(All Players(All Teams), Sphere, Red, Event Player, Player Variable(Event Player, roadhogEatRadius),
			Position and Radius);
		disabled Set Player Variable(Event Player, roadhogEffectId, Last Created Entity);
	}
}

rule("Roadhog - Eats players in range")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Roadhog);
		Is Alive(Event Player) == True;
		Count Of(Players Within Radius(Position Of(Event Player), Player Variable(Event Player, roadhogEatRadius), All Teams,
			Surfaces And All Barriers)) > 1;
	}

	actions
	{
		Damage(Filtered Array(Players Within Radius(Position Of(Event Player), Player Variable(Event Player, roadhogEatRadius), All Teams,
			Surfaces And All Barriers), And(Compare(Current Array Element, !=, Event Player), Compare(Is Alive(Current Array Element), ==,
			True))), Event Player, 100);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Roadhog dies")
{
	event
	{
		Player Died;
		All;
		Roadhog;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Roadhog);
	}

	actions
	{
		Kill(Victim, Attacker);
		Modify Player Score(Attacker, Score Of(Victim));
		Set Player Score(Victim, 0);
		Set Player Variable(Victim, roadhogEatRadius, 1);
		Destroy Effect(Player Variable(Victim, roadhogEffectId));
	}
}

rule("Sigma - Spawns in")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Sigma);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Small Message(Event Player, Custom String("{0} Sigma is playing Boss Battle:", Hero Icon String(Hero Of(Event Player)), Null,
			Null));
		Small Message(Event Player, Custom String("{0} You are hard to kill, but you fall hard when you do.", Hero Icon String(Hero Of(
			Event Player)), Null, Null));
		Wait(3, Ignore Condition);
		Big Message(Event Player, Custom String("THE UNIVERSE SINGS TO ME!", Null, Null, Null));
	}
}

rule("Sigma dies -> lose 5 points")
{
	event
	{
		Player Died;
		All;
		Sigma;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Sigma);
	}

	actions
	{
		Modify Player Score(Event Player, -5.000);
	}
}

rule("Soldier - Spawns in")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Soldier: 76);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Small Message(Event Player, Custom String("{0} Soldier is playing Infection:", Hero Icon String(Hero Of(Event Player)), Null,
			Null));
		Small Message(Event Player, Custom String("{0} Enemies you kill become Soldier, and you become what kills you.", Hero Icon String(
			Hero Of(Event Player)), Null, Null));
		Wait(3, Ignore Condition);
		Big Message(Event Player, Custom String("WE'RE ALL SOLDIERS NOW!", Null, Null, Null));
	}
}

rule("Soldier - Earns kill - force victim to soldier")
{
	event
	{
		Player Dealt Final Blow;
		All;
		Soldier: 76;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Soldier: 76);
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Start Forcing Player To Be Hero(Victim, Hero(Soldier: 76));
	}
}

rule("Soldier died - swap to killer's hero")
{
	event
	{
		Player Died;
		All;
		Soldier: 76;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Soldier: 76);
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Start Forcing Player To Be Hero(Victim, Hero Of(Attacker));
	}
}

rule("Soldier - Player died - Stop forcing hero")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) != Hero(Reaper);
	}

	actions
	{
		Stop Forcing Player To Be Hero(Event Player);
	}
}

rule("Sombra - Spawns in")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sombra;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Sombra);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Small Message(Event Player, Custom String("{0} Sombra is playing Spy:", Hero Icon String(Hero Of(Event Player)), Null, Null));
		Small Message(Event Player, Custom String("{0} You get points for watching players die.", Hero Icon String(Hero Of(Event Player)),
			Null, Null));
		Wait(3, Ignore Condition);
		Big Message(Event Player, Custom String("HACK THE PLANET!", Null, Null, Null));
	}
}

rule("Sombra - watches player die")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Is Hero Being Played(Hero(Sombra), All Teams) == True;
	}

	actions
	{
		Modify Player Score(Filtered Array(Players On Hero(Hero(Sombra), All Teams), And(Compare(Is In View Angle(Current Array Element,
			Eye Position(Event Player), 70), ==, True), Compare(Is In Line of Sight(Eye Position(Current Array Element), Eye Position(
			Event Player), Barriers Do Not Block LOS), ==, True))), 1);
	}
}

rule("Widowmaker - Spawns in")
{
	event
	{
		Ongoing - Each Player;
		All;
		Widowmaker;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Widowmaker);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Small Message(Event Player, Custom String("{0} Widowmaker is playing Widow HeadShot Only:", Hero Icon String(Hero Of(
			Event Player)), Null, Null));
		Small Message(Event Player, Custom String("{0} You can only be headshot, and you only deal damage with headshots.",
			Hero Icon String(Hero Of(Event Player)), Null, Null));
		Wait(3, Ignore Condition);
		Big Message(Event Player, Custom String("BOOM! HEADSHOT!", Null, Null, Null));
	}
}

rule("Widow - Hit non-headshot = heal enemy")
{
	event
	{
		Player Dealt Damage;
		All;
		Widowmaker;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Widowmaker);
		Is Alive(Event Player) == True;
		Event Was Critical Hit == False;
	}

	actions
	{
		Heal(Victim, Attacker, Event Damage);
	}
}

rule("Winston - Spawns in")
{
	event
	{
		Ongoing - Each Player;
		All;
		Winston;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Winston);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Small Message(Event Player, Custom String("{0} Winston is playing Yeti Hunt:", Hero Icon String(Hero Of(Event Player)), Null,
			Null));
		Small Message(Event Player, Custom String("{0} Eat meat to deal tons of damage with your ult.", Hero Icon String(Hero Of(
			Event Player)), Null, Null));
		Wait(3, Ignore Condition);
		Big Message(Event Player, Custom String("GO PRIMAL!", Null, Null, Null));
	}
}

rule("Winston - player dies and becomes meat")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Is Hero Being Played(Hero(Winston), All Teams) == True;
	}

	actions
	{
		Destroy Effect(Player Variable(Event Player, winstonMeatEffectId));
		Create Effect(All Players(All Teams), Sphere, Red, Add(Position Of(Event Player), Up), 1, Position and Radius);
		Set Player Variable(Event Player, winstonMeatEffectId, Last Created Entity);
	}
}

rule("Winston - collects meat")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == False;
		Player Variable(Event Player, winstonMeatEffectId) != Null;
		Is Hero Being Played(Hero(Winston), All Teams) == True;
		Is True For Any(Players On Hero(Hero(Winston), All Teams), Compare(Distance Between(Position Of(Current Array Element),
			Position Of(Event Player)), <=, 3)) == True;
	}

	actions
	{
		Set Player Variable(Event Player, target, First Of(Filtered Array(Players On Hero(Hero(Winston), All Teams), Compare(
			Distance Between(Position Of(Current Array Element), Position Of(Event Player)), <=, 3))));
		Set Ultimate Charge(Player Variable(Event Player, target), Add(Ultimate Charge Percent(Player Variable(Event Player, target)),
			25));
		Destroy Effect(Player Variable(Event Player, winstonMeatEffectId));
		Set Player Variable(Event Player, winstonMeatEffectId, Null);
	}
}

rule("Winston Ults")
{
	event
	{
		Ongoing - Each Player;
		All;
		Winston;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Winston);
		Is Alive(Event Player) == True;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Damage Dealt(Event Player, 500);
	}
}

rule("Winston Ults Ends")
{
	event
	{
		Ongoing - Each Player;
		All;
		Winston;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Winston);
		Is Alive(Event Player) == True;
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Set Damage Dealt(Event Player, 10);
	}
}

rule("Hammond - Spawns in")
{
	event
	{
		Ongoing - Each Player;
		All;
		Wrecking Ball;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Wrecking Ball);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Small Message(Event Player, Custom String("{0} Wrecking Ball is playing Lucio Ball:", Hero Icon String(Hero Of(Event Player)),
			Null, Null));
		Small Message(Event Player, Custom String("{0} Find the goal to score.", Hero Icon String(Hero Of(Event Player)), Null, Null));
		Wait(3, Ignore Condition);
		Big Message(Event Player, Custom String("BE THE BALL!", Null, Null, Null));
	}
}

rule("Hammond - Create goal")
{
	event
	{
		Ongoing - Each Player;
		All;
		Wrecking Ball;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Wrecking Ball);
		Is Alive(Event Player) == True;
		Player Variable(Event Player, hammondGoalEffectId) == Null;
	}

	actions
	{
		Set Player Variable(Event Player, target, Farthest Player From(Event Player, All Teams));
		Set Player Variable(Event Player, hammondGoalPos, Player Variable(Event Player, target));
		Create Effect(All Players(All Teams), Ring, Green, Player Variable(Event Player, hammondGoalPos), Global Variable(
			HAMMOND_GOAL_RADIUS), None);
		Set Player Variable(Event Player, hammondGoalEffectId, Last Created Entity);
		Big Message(Player Variable(Event Player, target), Custom String("STOP {0}{1} FROM SCORING!", Hero Icon String(Hero(
			Wrecking Ball)), Event Player, Null));
	}
}

rule("Hammond - Hit by enemy fire")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Wrecking Ball);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Set Player Variable(Event Player, hammondLastDamager, Attacker);
		Apply Impulse(Event Player, Subtract(Position Of(Event Player), Position Of(Player Variable(Event Player, hammondLastDamager))),
			20, To World, Cancel Contrary Motion);
	}
}

rule("Hammond - dies (gives point to last damager) (and remove kill self penalty)")
{
	event
	{
		Player Died;
		All;
		Wrecking Ball;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Wrecking Ball);
		Player Variable(Event Player, hammondLastDamager) != Null;
	}

	actions
	{
		Modify Player Score(Player Variable(Event Player, hammondLastDamager), 1);
		Modify Player Score(Event Player, 1);
		Destroy Effect(Player Variable(Event Player, hammondGoalEffectId));
	}
}

rule("Hammond scores")
{
	event
	{
		Ongoing - Each Player;
		All;
		Wrecking Ball;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Wrecking Ball);
		Is Alive(Event Player) == True;
		Distance Between(Position Of(Event Player), Player Variable(Event Player, hammondGoalPos)) <= Global Variable(HAMMOND_GOAL_RADIUS);
	}

	actions
	{
		Destroy Effect(Player Variable(Event Player, hammondGoalEffectId));
		Damage(Filtered Array(All Players(All Teams), Compare(Current Array Element, !=, Event Player)), Event Player, 1000);
		Big Message(All Players(All Teams), Custom String("{0} {1} SCORED!", Hero Icon String(Hero(Wrecking Ball)), Event Player, Null));
	}
}

rule("Hammond Passive Heal")
{
	event
	{
		Ongoing - Each Player;
		All;
		Wrecking Ball;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Wrecking Ball);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Heal(Event Player, Event Player, 10);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Zenyatta - Spawns in")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zenyatta;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Zenyatta);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Small Message(Event Player, Custom String("{0} Zenyatta is playing Chill+Kill:", Hero Icon String(Hero Of(Event Player)), Null,
			Null));
		Small Message(Event Player, Custom String("{0} Emote to create a chill zone.", Hero Icon String(Hero Of(Event Player)), Null,
			Null));
		Wait(3, Ignore Condition);
		Big Message(Event Player, Custom String("we are in harmony", Null, Null, Null));
	}
}

rule("Zenyatta - Peace zone reflects damage")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is True For Any(Players Within Radius(Position Of(Event Player), Global Variable(ZEN_PEACE_RADIUS), All Teams, Off), And(Compare(
			Is Communicating Any Emote(Current Array Element), ==, True), Compare(Hero Of(Current Array Element), ==, Hero(Zenyatta))))
			== True;
	}

	actions
	{
		Damage(Attacker, Victim, Event Damage);
		Heal(Victim, Attacker, Event Damage);
	}
}

rule("Zenyatta - Emotes to start peace zone")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zenyatta;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Zenyatta);
		Is Alive(Event Player) == True;
		Is Communicating Any Emote(Event Player) == True;
	}

	actions
	{
		Destroy Effect(Player Variable(Event Player, zenPeaceEffectId));
		Create Effect(All Players(All Teams), Ring, Yellow, Event Player, Global Variable(ZEN_PEACE_RADIUS), Position and Radius);
		Set Player Variable(Event Player, zenPeaceEffectId, Last Created Entity);
	}
}

rule("Zenyatta - Stop emoting, stop peace zone")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zenyatta;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Zenyatta);
		Is Communicating Any Emote(Event Player) == False;
	}

	actions
	{
		Destroy Effect(Player Variable(Event Player, zenPeaceEffectId));
	}
}

rule("==TEST==BOTS==PRIMARY FIRE")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Press Button(Event Player, Primary Fire);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("==TEST==BOTS==LOOK FOR TARGET")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Start Facing(Event Player, Subtract(Position Of(Player Closest To Reticle(Event Player, All Teams)), Position Of(Event Player)),
			10, To World, Direction and Turn Rate);
	}
}

rule("==BOTS==SHOOT BACK==")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Start Facing(Event Player, Subtract(Position Of(Attacker), Position Of(Event Player)), 10, To World, Direction and Turn Rate);
	}
}

rule("==BOTS==REINHARDT==")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reinhardt);
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Start Throttle In Direction(Event Player, Subtract(Player Variable(Event Player, reinPayloadPos), Position Of(Event Player)), 2,
			To World, Replace existing throttle, Direction and Magnitude);
	}
rule("Game Setup (BASTION)")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Set Global Variable(BASTION_TRACK_POINTS, Empty Array);
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(191.086, 8, 63.952));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(196.174, 7.999, 63.207));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(201.302, 7.999, 62.521));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(206.306, 7.999, 62.066));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(209.563, 7.999, 58.196));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(208.922, 7.999, 53.230));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(208.416, 7.999, 48.244));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(208.396, 8.248, 47.775));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(208.446, 9, 45.944));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(211.248, 10.131, 44.596));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(213.287, 11.152, 44.591));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(214.925, 12.013, 44.681));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(216.827, 12.001, 49.315));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(216.844, 12.001, 54.325));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(216.751, 13.718, 59.110));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(216.752, 14.001, 60.009));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(221.355, 14.001, 62.046));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(222.752, 13.920, 62.122));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(227.713, 13, 62.336));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(228.970, 12.998, 66.375));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(229.153, 11.753, 68.817));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(229.233, 10.895, 70.547));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(229.353, 9.872, 72.588));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(229.477, 9.011, 74.227));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(230.033, 8.998, 79.209));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(230.554, 9.248, 83.205));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(232.803, 8.999, 85.101));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(234.286, 8.978, 87.352));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(234.434, 8.938, 91.395));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(234.575, 8.938, 94.998));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(234.533, 8.986, 99.041));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(232.336, 9.010, 102.341));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(230.271, 5.415, 105.505));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(227.510, 3.998, 109.458));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(225.597, 5, 111.121));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(225.142, 5, 111.388));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(222.061, 9.600, 111.912));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(220.742, 14.442, 111.845));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(218.896, 19.526, 111.714));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(215.820, 23.604, 111.456));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(211.689, 20.510, 111.097));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(209.668, 15.704, 110.975));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(207.998, 10.409, 110.920));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(203.516, 7.999, 110.854));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(198.838, 9, 110.787));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(193.729, 9.002, 110.271));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(192.896, 8.818, 107.301));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(192.716, 7.963, 105.676));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(196.487, 7.999, 102.356));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(201.497, 7.999, 102.154));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(205.101, 8.026, 102.300));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(208.265, 8, 102.575));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(213.274, 8, 103.155));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(213.780, 7.905, 103.216));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(215.560, 6.969, 103.405));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(218.896, 5.790, 101.246));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(218.967, 4.769, 99.205));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(218.934, 3.952, 97.555));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(218.915, 2.931, 95.514));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(218.948, 1.999, 90.553));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(218.948, 1.999, 86.949));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(218.948, 1.893, 86.441));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(217.544, 0.998, 81.632));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(212.658, 0.873, 81.737));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(207.694, 0.041, 81.723));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(202.692, 0, 81.638));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(199.323, 1, 81.555));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(198.796, 1, 81.537));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(193.698, 1, 81.367));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(188.779, 1, 81.357));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(187.537, 1.002, 86.227));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(187.224, 1, 91.236));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(184.502, 2, 92.001));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(182.469, 3, 91.947));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(182, 3.263, 92.033));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(180.594, 4.003, 92.146));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(178.367, 5, 92.197));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(177.846, 5, 92.119));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(173.936, 5, 88.806));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(171.019, 5.002, 84.610));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(170.725, 5.002, 84.171));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(170.287, 5.002, 79.101));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(171.514, 5.002, 77.176));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(173.040, 6.397, 72.490));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(173.072, 7, 71.230));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(173.090, 6.999, 70.703));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(173.186, 6.999, 65.605));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(173.289, 6.999, 60.596));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(176.134, 6.999, 56.438));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(181.178, 8, 56.111));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(181.263, 8, 56.134));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(183.249, 8.002, 60.830));
		Modify Global Variable(BASTION_TRACK_POINTS, Append To Array, Vector(186.753, 8, 64.530));
	}
}