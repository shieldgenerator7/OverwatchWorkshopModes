variables
{
	global:
		0: BAP_LAVA_GROWTH_SPEED
		1: REIN_PAYLOAD_POINTS
		2: REIN_PAYLOAD_RADIUS
		3: REIN_PAYLOAD_GROUND_OFFSET
		4: REIN_PAYLOAD_MOVESPEED
		5: REIN_PAYLOAD_CONTEST_RADIUS
		6: ZEN_PEACE_RADIUS

	player:
		0: target
		1: bapLavaPos
		2: bapLavaRadius
		3: bapLavaEffectId
		4: mercyKiller
		5: reinPayloadPos
		6: reinPayloadEffectId
		7: reinPayloadPointIndex
		8: reinPayloadFlagEffectId
		9: roadhogEffectId
		10: roadhogEatRadius
		11: zenPeaceEffectId
}

rule("Game Setup")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Disable Built-In Game Mode Scoring;
	}
}

rule("Player gets point when kill other player")
{
	event
	{
		Player Dealt Final Blow;
		All;
		All;
	}

	actions
	{
		Modify Player Score(Event Player, 1);
	}
}

rule("Instant Start")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Set Match Time(0);
	}
}

rule("Game Setup (BAP, ZEN)")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Set Global Variable(BAP_LAVA_GROWTH_SPEED, 1);
		Set Global Variable(ZEN_PEACE_RADIUS, 10);
	}
}

rule("Game Setup (REIN POINTS)")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Set Global Variable(REIN_PAYLOAD_RADIUS, 1);
		Set Global Variable(REIN_PAYLOAD_MOVESPEED, 2);
		Set Global Variable(REIN_PAYLOAD_GROUND_OFFSET, Multiply(Up, 1.500));
		Set Global Variable(REIN_PAYLOAD_POINTS, Empty Array);
		Set Global Variable(REIN_PAYLOAD_CONTEST_RADIUS, 5);
		Modify Global Variable(REIN_PAYLOAD_POINTS, Append To Array, Vector(193.080, 9, 112.911));
		Modify Global Variable(REIN_PAYLOAD_POINTS, Append To Array, Vector(193.398, 8, 103.589));
		Modify Global Variable(REIN_PAYLOAD_POINTS, Append To Array, Vector(219.554, 6, 103.333));
		Modify Global Variable(REIN_PAYLOAD_POINTS, Append To Array, Vector(219.036, 2, 91.455));
		Modify Global Variable(REIN_PAYLOAD_POINTS, Append To Array, Vector(218.391, 1, 81.491));
		Modify Global Variable(REIN_PAYLOAD_POINTS, Append To Array, Vector(186.954, 1, 81.111));
		Modify Global Variable(REIN_PAYLOAD_POINTS, Append To Array, Vector(187.221, 1, 92.878));
		Modify Global Variable(REIN_PAYLOAD_POINTS, Append To Array, Vector(176.442, 5, 92.730));
		Modify Global Variable(REIN_PAYLOAD_POINTS, Append To Array, Vector(176.894, 5, 76.660));
		Modify Global Variable(REIN_PAYLOAD_POINTS, Append To Array, Vector(182.837, 6, 75.966));
		Modify Global Variable(REIN_PAYLOAD_POINTS, Append To Array, Vector(183.261, 8, 64.856));
		Modify Global Variable(REIN_PAYLOAD_POINTS, Append To Array, Vector(193.289, 8, 63.571));
		Modify Global Variable(REIN_PAYLOAD_POINTS, Append To Array, Vector(203.293, 8.001, 58.252));
	}
}

rule("==TEST==SPAWN BOTS==")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Host Player == True;
		Is Button Held(Event Player, Interact) == True;
	}

	actions
	{
		Create Dummy Bot(Random Value In Array(All Heroes), All Teams, -1.000, Nearest Walkable Position(Ray Cast Hit Position(
			Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 100)), All Players(
			All Teams), Event Player, True)), Multiply(Facing Direction Of(Event Player), -1.000));
	}
}

rule("Ana - Spawns in")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Ana);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Small Message(Event Player, Custom String("{0} Ana is playing Hide & Seek:", Hero Icon String(Hero Of(Event Player)), Null, Null));
		Small Message(Event Player, Custom String("{0} Look at enemies to kill them, and keep out of sight.", Hero Icon String(Hero Of(
			Event Player)), Null, Null));
		Wait(3, Ignore Condition);
		Big Message(Event Player, Custom String("READY OR NOT, HERE I COME!", Null, Null, Null));
	}
}

rule("Ana - Sees enemy")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Ana);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Set Player Variable(Event Player, target, Player Closest To Reticle(Event Player, All Teams));
		Skip If(Compare(Is In Line of Sight(Eye Position(Event Player), Eye Position(Player Variable(Event Player, target)),
			All Barriers Block LOS), ==, False), 1);
		Damage(Player Variable(Event Player, target), Event Player, 20);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Baptiste - Spawns in")
{
	event
	{
		Ongoing - Each Player;
		All;
		Baptiste;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Baptiste);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Small Message(Event Player, Custom String("{0} Baptiste is playing Rising Flood:", Hero Icon String(Hero Of(Event Player)), Null,
			Null));
		Small Message(Event Player, Custom String("{0} The floor is lava, and if it's not, it soon will be.", Hero Icon String(Hero Of(
			Event Player)), Null, Null));
		Wait(3, Ignore Condition);
		Big Message(Event Player, Custom String("RUN FOR THE HILLS!", Null, Null, Null));
		Set Player Variable(Event Player, bapLavaPos, Add(Position Of(Event Player), Multiply(Up, -110.000)));
		Set Player Variable(Event Player, bapLavaRadius, 100);
		Destroy Effect(Player Variable(Event Player, bapLavaEffectId));
		Create Effect(All Players(All Teams), Sphere, Red, Player Variable(Event Player, bapLavaPos), Player Variable(Event Player,
			bapLavaRadius), Position and Radius);
		Set Player Variable(Event Player, bapLavaEffectId, Last Created Entity);
		Stop Chasing Player Variable(Event Player, bapLavaRadius);
		Chase Player Variable At Rate(Event Player, bapLavaRadius, 1000, Global Variable(BAP_LAVA_GROWTH_SPEED), Destination and Rate);
	}
}

rule("Baptiste dies")
{
	event
	{
		Player Died;
		All;
		Baptiste;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Baptiste);
	}

	actions
	{
		Destroy Effect(Player Variable(Victim, bapLavaEffectId));
		Set Player Variable(Event Player, bapLavaRadius, 1);
	}
}

rule("Baptiste - Lava Burns Players")
{
	event
	{
		Ongoing - Each Player;
		All;
		Baptiste;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Baptiste);
		Is Alive(Event Player) == True;
		Count Of(Players Within Radius(Player Variable(Event Player, bapLavaPos), Player Variable(Event Player, bapLavaRadius), All Teams,
			Surfaces And All Barriers)) > 0;
	}

	actions
	{
		Damage(Filtered Array(Players Within Radius(Player Variable(Event Player, bapLavaPos), Player Variable(Event Player,
			bapLavaRadius), All Teams, Off), Compare(Is Alive(Current Array Element), ==, True)), Event Player, 2);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Genji - Spawns in")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Genji);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Small Message(Event Player, Custom String("{0} Genji is playing One in the Chamber:", Hero Icon String(Hero Of(Event Player)),
			Null, Null));
		Small Message(Event Player, Custom String("{0} Your dash can instakill, but you only get one.", Hero Icon String(Hero Of(
			Event Player)), Null, Null));
		Wait(3, Ignore Condition);
		Big Message(Event Player, Custom String("YOU LOOK *DASHING* TODAY!", Null, Null, Null));
	}
}

rule("Mercy - Spawns in")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mercy;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Mercy);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Small Message(Event Player, Custom String("{0} Mercy is playing Mercy Boxing:", Hero Icon String(Hero Of(Event Player)), Null,
			Null));
		Small Message(Event Player, Custom String("{0} You pack a powerful punch and can rez yourself.", Hero Icon String(Hero Of(
			Event Player)), Null, Null));
		Wait(3, Ignore Condition);
		Big Message(Event Player, Custom String("ROUND {0}: FIGHT!", Score Of(Event Player), Null, Null));
	}
}

rule("Mercy dies")
{
	event
	{
		Player Died;
		All;
		Mercy;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Mercy);
	}

	actions
	{
		Big Message(Event Player, Custom String("REZ YOURSELF!", Null, Null, Null));
		Set Player Variable(Event Player, mercyKiller, Attacker);
	}
}

rule("Mercy - Rezzes herself")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mercy;
	}

	conditions
	{
		Is Button Held(Event Player, Ability 2) == True;
		Hero Of(Event Player) == Hero(Mercy);
		Is Alive(Event Player) == False;
	}

	actions
	{
		Resurrect(Event Player);
		Skip If(Compare(Player Variable(Event Player, mercyKiller), ==, Null), 1);
		Modify Player Score(Player Variable(Event Player, mercyKiller), -1.000);
		Set Player Variable(Event Player, mercyKiller, Null);
	}
}

rule("Moira - Spawns in")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Moira);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Disallow Button(Event Player, Ultimate);
		Small Message(Event Player, Custom String("{0} Moira is playing Tiny OW:", Hero Icon String(Hero Of(Event Player)), Null, Null));
		Small Message(Event Player, Custom String("{0} Fast cooldowns, your ultimate teleports everyone to you.", Hero Icon String(Hero Of(
			Event Player)), Null, Null));
		Wait(3, Ignore Condition);
		Big Message(Event Player, Custom String("FIND A TINY ROOM AND ULT!", Null, Null, Null));
	}
}

rule("Moira - Switches off")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) != Hero(Moira);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Allow Button(Event Player, Ultimate);
	}
}

rule("Moira - Ultimate: Teleport all players to her")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Moira);
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Ultimate) == True;
	}

	actions
	{
		Set Ultimate Charge(Event Player, 0);
		Teleport(All Living Players(All Teams), Position Of(Event Player));
		Damage(All Living Players(All Teams), Event Player, 1);
	}
}

rule("Rein - Spawn in")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reinhardt);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Small Message(Event Player, Custom String("{0} Reinhardt is playing Escort:", Hero Icon String(Hero Of(Event Player)), Null,
			Null));
		Small Message(Event Player, Custom String("{0} Escort the payload to  score.", Hero Icon String(Hero Of(Event Player)), Null,
			Null));
		Wait(3, Ignore Condition);
		Big Message(Event Player, Custom String("ESCORT THE PAYLOAD!", Null, Null, Null));
	}
}

rule("Rein - Spawn payload")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reinhardt);
		Is Alive(Event Player) == True;
		Player Variable(Event Player, reinPayloadPos) == Null;
	}

	actions
	{
		Teleport(Event Player, Value In Array(Global Variable(REIN_PAYLOAD_POINTS), 0));
		Set Player Variable(Event Player, reinPayloadPos, Value In Array(Global Variable(REIN_PAYLOAD_POINTS), 0));
		Set Player Variable(Event Player, reinPayloadPointIndex, 0);
		Destroy Effect(Player Variable(Event Player, reinPayloadPos));
		Create Effect(All Players(All Teams), Sphere, White, Add(Player Variable(Event Player, reinPayloadPos), Global Variable(
			REIN_PAYLOAD_GROUND_OFFSET)), Global Variable(REIN_PAYLOAD_RADIUS), Position and Radius);
		Set Player Variable(Event Player, reinPayloadEffectId, Last Created Entity);
		Destroy Effect(Player Variable(Event Player, reinPayloadFlagEffectId));
		Create Icon(Event Player, Add(Player Variable(Event Player, reinPayloadPos), Global Variable(REIN_PAYLOAD_GROUND_OFFSET)), Flag,
			Visible To and Position, Green, True);
		Set Player Variable(Event Player, reinPayloadFlagEffectId, Last Created Entity);
	}
}

rule("==TEST==Rein lay payload points")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Host Player == True;
		Is Button Held(Event Player, Crouch) == True;
		Hero Of(Event Player) == Hero(Reinhardt);
	}

	actions
	{
		Modify Global Variable(REIN_PAYLOAD_POINTS, Append To Array, Position Of(Event Player));
	}
}

rule("Rein - Payload moves to next point (and kill everyone if reaches destination)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reinhardt);
		Is Alive(Event Player) == True;
		Player Variable(Event Player, reinPayloadPos) == Value In Array(Global Variable(REIN_PAYLOAD_POINTS), Player Variable(Event Player,
			reinPayloadPointIndex));
	}

	actions
	{
		disabled Stop Chasing Player Variable(Event Player, reinPayloadPos);
		Modify Player Variable(Event Player, reinPayloadPointIndex, Add, 1);
		disabled Chase Player Variable At Rate(Event Player, reinPayloadPos, Value In Array(Global Variable(REIN_PAYLOAD_POINTS), Player Variable(
			Event Player, reinPayloadPointIndex)), Global Variable(REIN_PAYLOAD_MOVESPEED), Destination and Rate);
		Abort If(Compare(Player Variable(Event Player, reinPayloadPointIndex), <, Count Of(Global Variable(REIN_PAYLOAD_POINTS))));
		Damage(Filtered Array(All Players(All Teams), Compare(Current Array Element, !=, Event Player)), Event Player, 1000);
		Set Player Variable(Event Player, reinPayloadPos, Value In Array(Global Variable(REIN_PAYLOAD_POINTS), 0));
		Set Player Variable(Event Player, reinPayloadPointIndex, 1);
		disabled Stop Chasing Player Variable(Event Player, reinPayloadPos);
		disabled Chase Player Variable At Rate(Event Player, reinPayloadPos, Value In Array(Global Variable(REIN_PAYLOAD_POINTS), Player Variable(
			Event Player, reinPayloadPointIndex)), Global Variable(REIN_PAYLOAD_MOVESPEED), Destination and Rate);
	}
}

rule("Rein - Payload only moves when Rein is near")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reinhardt);
		Is Alive(Event Player) == True;
		Distance Between(Position Of(Event Player), Player Variable(Event Player, reinPayloadPos)) <= Global Variable(
			REIN_PAYLOAD_CONTEST_RADIUS);
		Count Of(Filtered Array(Players Within Radius(Add(Player Variable(Event Player, reinPayloadPos), Global Variable(
			REIN_PAYLOAD_GROUND_OFFSET)), Global Variable(REIN_PAYLOAD_CONTEST_RADIUS), All Teams, Surfaces And All Barriers), And(Compare(
			Current Array Element, !=, Event Player), Compare(Is Alive(Current Array Element), ==, True)))) == 0;
	}

	actions
	{
		Stop Chasing Player Variable(Event Player, reinPayloadPos);
		Chase Player Variable At Rate(Event Player, reinPayloadPos, Value In Array(Global Variable(REIN_PAYLOAD_POINTS), Player Variable(
			Event Player, reinPayloadPointIndex)), Global Variable(REIN_PAYLOAD_MOVESPEED), Destination and Rate);
	}
}

rule("Rein - Payload stops when enemy is near")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reinhardt);
		Is Alive(Event Player) == True;
		Count Of(Filtered Array(Players Within Radius(Add(Player Variable(Event Player, reinPayloadPos), Global Variable(
			REIN_PAYLOAD_GROUND_OFFSET)), Global Variable(REIN_PAYLOAD_CONTEST_RADIUS), All Teams, Surfaces And All Barriers), And(Compare(
			Current Array Element, !=, Event Player), Compare(Is Alive(Current Array Element), ==, True)))) > 0;
	}

	actions
	{
		Stop Chasing Player Variable(Event Player, reinPayloadPos);
	}
}

rule("Rein - Payload moves backward when Rein is not near")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reinhardt);
		Is Alive(Event Player) == True;
		Distance Between(Position Of(Event Player), Player Variable(Event Player, reinPayloadPos)) > Global Variable(
			REIN_PAYLOAD_CONTEST_RADIUS);
	}

	actions
	{
		Stop Chasing Player Variable(Event Player, reinPayloadPos);
		Chase Player Variable At Rate(Event Player, reinPayloadPos, Value In Array(Global Variable(REIN_PAYLOAD_POINTS), Subtract(
			Player Variable(Event Player, reinPayloadPointIndex), 1)), Multiply(Global Variable(REIN_PAYLOAD_MOVESPEED), 0.250),
			Destination and Rate);
	}
}

rule("Rein - Payload moves to prev point when Rein is not near")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reinhardt);
		Is Alive(Event Player) == True;
		Player Variable(Event Player, reinPayloadPos) == Value In Array(Global Variable(REIN_PAYLOAD_POINTS), Subtract(Player Variable(
			Event Player, reinPayloadPointIndex), 1));
		Player Variable(Event Player, reinPayloadPointIndex) > 1;
		Distance Between(Position Of(Event Player), Player Variable(Event Player, reinPayloadPos)) > Global Variable(
			REIN_PAYLOAD_CONTEST_RADIUS);
	}

	actions
	{
		Modify Player Variable(Event Player, reinPayloadPointIndex, Subtract, 1);
	}
}

rule("Rein switch off")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) != Hero(Reinhardt);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Destroy Effect(Player Variable(Event Player, reinPayloadEffectId));
		Destroy Icon(Player Variable(Event Player, reinPayloadFlagEffectId));
		Set Player Variable(Event Player, reinPayloadPos, Null);
		Set Player Variable(Event Player, reinPayloadPointIndex, 0);
	}
}

rule("Roadhog - Spawns in")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Roadhog);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Set Player Variable(Event Player, roadhogEatRadius, 1);
		Wait(1, Ignore Condition);
		Destroy Effect(Player Variable(Event Player, roadhogEffectId));
		Create Effect(All Players(All Teams), Sphere, Red, Event Player, Player Variable(Event Player, roadhogEatRadius),
			Position and Radius);
		Set Player Variable(Event Player, roadhogEffectId, Last Created Entity);
		Small Message(Event Player, Custom String("{0} Roadhog is playing Agar.io:", Hero Icon String(Hero Of(Event Player)), Null, Null));
		Small Message(Event Player, Custom String("{0} Hook enemies to grow your player-eating sphere.", Hero Icon String(Hero Of(
			Event Player)), Null, Null));
		Wait(3, Ignore Condition);
		Big Message(Event Player, Custom String("OM NOM NOM!", Null, Null, Null));
	}
}

rule("Roadhog - Switches off")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) != Hero(Roadhog);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Destroy Effect(Player Variable(Event Player, roadhogEffectId));
		Set Player Variable(Event Player, roadhogEffectId, Null);
		Set Player Variable(Event Player, roadhogEatRadius, 0);
	}
}

rule("Roadhog - Deals damage (eats players points)")
{
	event
	{
		Player Dealt Damage;
		All;
		Roadhog;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Roadhog);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Kill(Victim, Attacker);
		Modify Player Score(Attacker, Score Of(Victim));
		Set Player Score(Victim, 0);
		Set Player Variable(Attacker, roadhogEatRadius, Score Of(Attacker));
		disabled Skip If(Compare(Player Variable(Event Player, roadhogEffectId), !=, Null), 4);
		disabled Wait(0.250, Ignore Condition);
		disabled Skip If(Compare(Player Variable(Event Player, roadhogEatRadius), !=, 1), 3);
		disabled Destroy Effect(Player Variable(Event Player, roadhogEffectId));
		disabled Create Effect(All Players(All Teams), Sphere, Red, Event Player, Player Variable(Event Player, roadhogEatRadius),
			Position and Radius);
		disabled Set Player Variable(Event Player, roadhogEffectId, Last Created Entity);
	}
}

rule("Roadhog - Eats players in range")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Roadhog);
		Is Alive(Event Player) == True;
		Count Of(Players Within Radius(Position Of(Event Player), Player Variable(Event Player, roadhogEatRadius), All Teams,
			Surfaces And All Barriers)) > 1;
	}

	actions
	{
		Damage(Filtered Array(Players Within Radius(Position Of(Event Player), Player Variable(Event Player, roadhogEatRadius), All Teams,
			Surfaces And All Barriers), And(Compare(Current Array Element, !=, Event Player), Compare(Is Alive(Current Array Element), ==,
			True))), Event Player, 1);
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Roadhog dies")
{
	event
	{
		Player Died;
		All;
		Roadhog;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Roadhog);
	}

	actions
	{
		Kill(Victim, Attacker);
		Modify Player Score(Attacker, Score Of(Victim));
		Set Player Score(Victim, 0);
		Set Player Variable(Victim, roadhogEatRadius, 1);
		Destroy Effect(Player Variable(Victim, roadhogEffectId));
	}
}

rule("Sigma - Spawns in")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sigma;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Sigma);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Small Message(Event Player, Custom String("{0} Sigma is playing Boss Battle:", Hero Icon String(Hero Of(Event Player)), Null,
			Null));
		Small Message(Event Player, Custom String("{0} You are hard to kill, but you fall hard when you do.", Hero Icon String(Hero Of(
			Event Player)), Null, Null));
		Wait(3, Ignore Condition);
		Big Message(Event Player, Custom String("THE UNIVERSE SINGS TO ME!", Null, Null, Null));
	}
}

rule("Sigma dies -> lose 5 points")
{
	event
	{
		Player Died;
		All;
		Sigma;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Sigma);
	}

	actions
	{
		Modify Player Score(Event Player, -5.000);
	}
}

rule("Widowmaker - Spawns in")
{
	event
	{
		Ongoing - Each Player;
		All;
		Widowmaker;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Widowmaker);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Small Message(Event Player, Custom String("{0} Widowmaker is playing Widow HeadShot Only:", Hero Icon String(Hero Of(
			Event Player)), Null, Null));
		Small Message(Event Player, Custom String("{0} You can only be headshot, and you only deal damage with headshots.",
			Hero Icon String(Hero Of(Event Player)), Null, Null));
		Wait(3, Ignore Condition);
		Big Message(Event Player, Custom String("BOOM! HEADSHOT!", Null, Null, Null));
	}
}

rule("Widow - Hit non-headshot = heal enemy")
{
	event
	{
		Player Dealt Damage;
		All;
		Widowmaker;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Widowmaker);
		Is Alive(Event Player) == True;
		Event Was Critical Hit == False;
	}

	actions
	{
		Heal(Victim, Attacker, Event Damage);
	}
}

rule("Zenyatta - Spawns in")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zenyatta;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Zenyatta);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Small Message(Event Player, Custom String("{0} Zenyatta is playing Chill+Kill:", Hero Icon String(Hero Of(Event Player)), Null,
			Null));
		Small Message(Event Player, Custom String("{0} Emote to create a chill zone.", Hero Icon String(Hero Of(Event Player)), Null,
			Null));
		Wait(3, Ignore Condition);
		Big Message(Event Player, Custom String("we are in harmony", Null, Null, Null));
	}
}

rule("Zenyatta - Peace zone reflects damage")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is True For Any(Players Within Radius(Position Of(Event Player), Global Variable(ZEN_PEACE_RADIUS), All Teams, Off), And(Compare(
			Is Communicating Any Emote(Current Array Element), ==, True), Compare(Hero Of(Current Array Element), ==, Hero(Zenyatta))))
			== True;
	}

	actions
	{
		Damage(Attacker, Victim, Event Damage);
		Heal(Victim, Attacker, Event Damage);
	}
}

rule("Zenyatta - Emotes to start peace zone")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zenyatta;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Zenyatta);
		Is Alive(Event Player) == True;
		Is Communicating Any Emote(Event Player) == True;
	}

	actions
	{
		Destroy Effect(Player Variable(Event Player, zenPeaceEffectId));
		Create Effect(All Players(All Teams), Ring, Yellow, Event Player, Global Variable(ZEN_PEACE_RADIUS), Position and Radius);
		Set Player Variable(Event Player, zenPeaceEffectId, Last Created Entity);
	}
}

rule("Zenyatta - Stop emoting, stop peace zone")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zenyatta;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Zenyatta);
		Is Communicating Any Emote(Event Player) == False;
	}

	actions
	{
		Destroy Effect(Player Variable(Event Player, zenPeaceEffectId));
	}
}