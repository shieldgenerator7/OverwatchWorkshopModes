variables
{
	global:
		0: REIN_PAYLOAD_POINTS
		1: REIN_PAYLOAD_RADIUS
		2: REIN_PAYLOAD_GROUND_OFFSET
		3: REIN_PAYLOAD_MOVESPEED
		4: REIN_PAYLOAD_CONTEST_RADIUS

	player:
		0: target
		1: reinPayloadPos
		2: reinPayloadEffectId
		3: reinPayloadPointIndex
		4: reinPayloadFlagEffectId
}

rule("Game Setup (REIN POINTS)")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Set Global Variable(REIN_PAYLOAD_RADIUS, 1);
		Set Global Variable(REIN_PAYLOAD_MOVESPEED, 2);
		Set Global Variable(REIN_PAYLOAD_GROUND_OFFSET, Multiply(Up, 1.500));
		Set Global Variable(REIN_PAYLOAD_POINTS, Empty Array);
		Set Global Variable(REIN_PAYLOAD_CONTEST_RADIUS, 5);
		Modify Global Variable(REIN_PAYLOAD_POINTS, Append To Array, Vector(193.080, 9, 112.911));
		Modify Global Variable(REIN_PAYLOAD_POINTS, Append To Array, Vector(193.398, 8, 103.589));
		Modify Global Variable(REIN_PAYLOAD_POINTS, Append To Array, Vector(219.554, 6, 103.333));
		Modify Global Variable(REIN_PAYLOAD_POINTS, Append To Array, Vector(219.036, 2, 91.455));
		Modify Global Variable(REIN_PAYLOAD_POINTS, Append To Array, Vector(218.391, 1, 81.491));
		Modify Global Variable(REIN_PAYLOAD_POINTS, Append To Array, Vector(186.954, 1, 81.111));
		Modify Global Variable(REIN_PAYLOAD_POINTS, Append To Array, Vector(187.221, 1, 92.878));
		Modify Global Variable(REIN_PAYLOAD_POINTS, Append To Array, Vector(176.442, 5, 92.730));
		Modify Global Variable(REIN_PAYLOAD_POINTS, Append To Array, Vector(176.894, 5, 76.660));
		Modify Global Variable(REIN_PAYLOAD_POINTS, Append To Array, Vector(182.837, 6, 75.966));
		Modify Global Variable(REIN_PAYLOAD_POINTS, Append To Array, Vector(183.261, 8, 64.856));
		Modify Global Variable(REIN_PAYLOAD_POINTS, Append To Array, Vector(193.289, 8, 63.571));
		Modify Global Variable(REIN_PAYLOAD_POINTS, Append To Array, Vector(203.293, 8.001, 58.252));
	}
}

rule("Instant Start")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Set Match Time(0);
	}
}

rule("==TEST==SPAWN BOTS==")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Host Player == True;
		Is Button Held(Event Player, Interact) == True;
	}

	actions
	{
		Create Dummy Bot(Random Value In Array(All Heroes), All Teams, -1.000, Nearest Walkable Position(Ray Cast Hit Position(
			Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 100)), All Players(
			All Teams), Event Player, True)), Multiply(Facing Direction Of(Event Player), -1.000));
	}
}

rule("Ana - Sees enemy")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Ana);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Set Player Variable(Event Player, target, Player Closest To Reticle(Event Player, All Teams));
		Skip If(Compare(Is In Line of Sight(Eye Position(Event Player), Eye Position(Player Variable(Event Player, target)),
			All Barriers Block LOS), ==, False), 1);
		Damage(Player Variable(Event Player, target), Event Player, 20);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rein - Spawn payload")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reinhardt);
		Is Alive(Event Player) == True;
		Player Variable(Event Player, reinPayloadPos) == Null;
	}

	actions
	{
		Teleport(Event Player, Value In Array(Global Variable(REIN_PAYLOAD_POINTS), 0));
		Set Player Variable(Event Player, reinPayloadPos, Value In Array(Global Variable(REIN_PAYLOAD_POINTS), 0));
		Set Player Variable(Event Player, reinPayloadPointIndex, 0);
		Destroy Effect(Player Variable(Event Player, reinPayloadPos));
		Create Effect(All Players(All Teams), Sphere, White, Add(Player Variable(Event Player, reinPayloadPos), Global Variable(
			REIN_PAYLOAD_GROUND_OFFSET)), Global Variable(REIN_PAYLOAD_RADIUS), Position and Radius);
		Set Player Variable(Event Player, reinPayloadEffectId, Last Created Entity);
		Destroy Effect(Player Variable(Event Player, reinPayloadFlagEffectId));
		Create Icon(Event Player, Add(Player Variable(Event Player, reinPayloadPos), Global Variable(REIN_PAYLOAD_GROUND_OFFSET)), Flag,
			Visible To and Position, Green, True);
		Set Player Variable(Event Player, reinPayloadFlagEffectId, Last Created Entity);
	}
}

rule("==TEST==Rein lay payload points")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Host Player == True;
		Is Button Held(Event Player, Crouch) == True;
		Hero Of(Event Player) == Hero(Reinhardt);
	}

	actions
	{
		Modify Global Variable(REIN_PAYLOAD_POINTS, Append To Array, Position Of(Event Player));
	}
}

rule("Rein - Payload moves to next point (and kill everyone if reaches destination)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reinhardt);
		Is Alive(Event Player) == True;
		Player Variable(Event Player, reinPayloadPos) == Value In Array(Global Variable(REIN_PAYLOAD_POINTS), Player Variable(Event Player,
			reinPayloadPointIndex));
	}

	actions
	{
		disabled Stop Chasing Player Variable(Event Player, reinPayloadPos);
		Modify Player Variable(Event Player, reinPayloadPointIndex, Add, 1);
		disabled Chase Player Variable At Rate(Event Player, reinPayloadPos, Value In Array(Global Variable(REIN_PAYLOAD_POINTS), Player Variable(
			Event Player, reinPayloadPointIndex)), Global Variable(REIN_PAYLOAD_MOVESPEED), Destination and Rate);
		Abort If(Compare(Player Variable(Event Player, reinPayloadPointIndex), <, Count Of(Global Variable(REIN_PAYLOAD_POINTS))));
		Damage(Filtered Array(All Players(All Teams), Compare(Current Array Element, !=, Event Player)), Event Player, 1000);
		Set Player Variable(Event Player, reinPayloadPos, Value In Array(Global Variable(REIN_PAYLOAD_POINTS), 0));
		Set Player Variable(Event Player, reinPayloadPointIndex, 1);
		disabled Stop Chasing Player Variable(Event Player, reinPayloadPos);
		disabled Chase Player Variable At Rate(Event Player, reinPayloadPos, Value In Array(Global Variable(REIN_PAYLOAD_POINTS), Player Variable(
			Event Player, reinPayloadPointIndex)), Global Variable(REIN_PAYLOAD_MOVESPEED), Destination and Rate);
	}
}

rule("Rein - Payload only moves when Rein is near")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reinhardt);
		Is Alive(Event Player) == True;
		Distance Between(Position Of(Event Player), Player Variable(Event Player, reinPayloadPos)) <= Global Variable(
			REIN_PAYLOAD_CONTEST_RADIUS);
		Count Of(Filtered Array(Players Within Radius(Add(Player Variable(Event Player, reinPayloadPos), Global Variable(
			REIN_PAYLOAD_GROUND_OFFSET)), Global Variable(REIN_PAYLOAD_CONTEST_RADIUS), All Teams, Surfaces And All Barriers), And(Compare(
			Current Array Element, !=, Event Player), Compare(Is Alive(Current Array Element), ==, True)))) == 0;
	}

	actions
	{
		Stop Chasing Player Variable(Event Player, reinPayloadPos);
		Chase Player Variable At Rate(Event Player, reinPayloadPos, Value In Array(Global Variable(REIN_PAYLOAD_POINTS), Player Variable(
			Event Player, reinPayloadPointIndex)), Global Variable(REIN_PAYLOAD_MOVESPEED), Destination and Rate);
	}
}

rule("Rein - Payload stops when enemy is near")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reinhardt);
		Is Alive(Event Player) == True;
		Count Of(Filtered Array(Players Within Radius(Add(Player Variable(Event Player, reinPayloadPos), Global Variable(
			REIN_PAYLOAD_GROUND_OFFSET)), Global Variable(REIN_PAYLOAD_CONTEST_RADIUS), All Teams, Surfaces And All Barriers), And(Compare(
			Current Array Element, !=, Event Player), Compare(Is Alive(Current Array Element), ==, True)))) > 0;
	}

	actions
	{
		Stop Chasing Player Variable(Event Player, reinPayloadPos);
	}
}

rule("Rein - Payload moves backward when Rein is not near")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reinhardt);
		Is Alive(Event Player) == True;
		Distance Between(Position Of(Event Player), Player Variable(Event Player, reinPayloadPos)) > Global Variable(
			REIN_PAYLOAD_CONTEST_RADIUS);
	}

	actions
	{
		Stop Chasing Player Variable(Event Player, reinPayloadPos);
		Chase Player Variable At Rate(Event Player, reinPayloadPos, Value In Array(Global Variable(REIN_PAYLOAD_POINTS), Subtract(
			Player Variable(Event Player, reinPayloadPointIndex), 1)), Multiply(Global Variable(REIN_PAYLOAD_MOVESPEED), 0.250),
			Destination and Rate);
	}
}

rule("Rein - Payload moves to prev point when Rein is not near")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reinhardt);
		Is Alive(Event Player) == True;
		Player Variable(Event Player, reinPayloadPos) == Value In Array(Global Variable(REIN_PAYLOAD_POINTS), Subtract(Player Variable(
			Event Player, reinPayloadPointIndex), 1));
		Player Variable(Event Player, reinPayloadPointIndex) > 1;
		Distance Between(Position Of(Event Player), Player Variable(Event Player, reinPayloadPos)) > Global Variable(
			REIN_PAYLOAD_CONTEST_RADIUS);
	}

	actions
	{
		Modify Player Variable(Event Player, reinPayloadPointIndex, Subtract, 1);
	}
}