variables
{
	global:
		0: effectNameList

	player:
		0: effectIdList
		1: _temp
		2: textIdList
		3: moveSpeed
		4: scale
		5: damageDealt
		6: damageReceived
		7: maxHealth
}

subroutines
{
	0: updatePlayerEffects
	1: clearPlayerEffects
	2: applyPlayerEffectChanges
}

rule("Game Setup")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.effectNameList = Array(Custom String("FAST"), Custom String("SLOW"), Custom String("BIG"), Custom String("SMALL"),
			Custom String("POWERFUL"), Custom String("POWERLESS"), Custom String("TOUGH"), Custom String("WEAK"), Custom String(
			"LIFE STEAL"), Custom String("LIFE GIVE"), Custom String("HEALTHY"), Custom String("UNHEALTHY"));
		Create Dummy Bot(Hero(Orisa), Opposite Team Of(Team Of(Host Player)), -1, Vector(80.370, 12.680, -96.780), Vector(0.200, -0.510,
			0.830));
	}
}

rule("Player Spawn")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Call Subroutine(clearPlayerEffects);
		Event Player.effectIdList = Empty Array;
		Event Player.textIdList = Empty Array;
	}
}

rule("Player gains effect")
{
	event
	{
		Player Received Healing;
		All;
		All;
	}

	conditions
	{
		Event Was Health Pack == True;
	}

	actions
	{
		Event Player._temp = Random Integer(0, Count Of(Global.effectNameList) - 1);
		Modify Player Variable(Event Player, effectIdList, Append To Array, Event Player._temp);
		Call Subroutine(updatePlayerEffects);
	}
}

rule("Update Player Effects")
{
	event
	{
		Subroutine;
		updatePlayerEffects;
	}

	actions
	{
		Call Subroutine(clearPlayerEffects);
		For Player Variable(Event Player, _temp, 0, Count Of(Event Player.effectIdList), 1);
			If(Event Player.effectIdList[Event Player._temp] == 0);
				Event Player.moveSpeed *= 1.500;
			End;
			If(Event Player.effectIdList[Event Player._temp] == 1);
				Event Player.moveSpeed /= 1.500;
			End;
			If(Event Player.effectIdList[Event Player._temp] == 2);
				Event Player.scale *= 1.500;
			End;
			If(Event Player.effectIdList[Event Player._temp] == 3);
				Event Player.scale /= 1.500;
			End;
			If(Event Player.effectIdList[Event Player._temp] == 4);
				Event Player.damageDealt *= 1.500;
			End;
			If(Event Player.effectIdList[Event Player._temp] == 5);
				Event Player.damageDealt /= 1.500;
			End;
			If(Event Player.effectIdList[Event Player._temp] == 6);
				Event Player.damageReceived *= 1.500;
			End;
			If(Event Player.effectIdList[Event Player._temp] == 7);
				Event Player.damageReceived /= 1.500;
			End;
			If(Event Player.effectIdList[Event Player._temp] == 10);
				Event Player.maxHealth *= 1.500;
			End;
			If(Event Player.effectIdList[Event Player._temp] == 11);
				Event Player.maxHealth /= 1.500;
			End;
		End;
		Call Subroutine(applyPlayerEffectChanges);
	}
}

rule("Clear Player Effects")
{
	event
	{
		Subroutine;
		clearPlayerEffects;
	}

	actions
	{
		Event Player.moveSpeed = 100;
		Event Player.scale = 1;
		Event Player.damageDealt = 100;
		Event Player.damageReceived = 100;
		Event Player.maxHealth = 100;
		Call Subroutine(applyPlayerEffectChanges);
	}
}

rule("Apply Player Effect Changes")
{
	event
	{
		Subroutine;
		applyPlayerEffectChanges;
	}

	actions
	{
		Set Move Speed(Event Player, Event Player.moveSpeed);
		Start Scaling Player(Event Player, Event Player.scale, False);
		Set Damage Dealt(Event Player, Event Player.damageDealt);
		Set Damage Received(Event Player, Event Player.damageReceived);
		Set Max Health(Event Player, Event Player.maxHealth);
		For Player Variable(Event Player, _temp, 0, Count Of(Event Player.textIdList), 1);
			Destroy HUD Text(Event Player.textIdList[Event Player._temp]);
		End;
		Destroy HUD Text(Event Player.textIdList[0]);
		Event Player.textIdList = Empty Array;
		For Player Variable(Event Player, _temp, Count Of(Event Player.effectIdList), 0, -1);
			Create HUD Text(Event Player, Global.effectNameList[Event Player.effectIdList[Event Player._temp]], Null, Null, Left, 0, Color(
				White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, textIdList, Append To Array, Last Text ID);
		End;
	}
}

rule("Effect 8: Life Steal")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Array Contains(Event Player.effectIdList, 8) == True;
	}

	actions
	{
		Heal(Event Player, Event Player, Event Damage);
	}
}

rule("Effect 9: Life Give")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Array Contains(Event Player.effectIdList, 9) == True;
	}

	actions
	{
		Heal(Attacker, Event Player, Event Damage);
	}
}